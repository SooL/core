/**
 * Copyright (c) 2018-2020 FAUCHER Julien & FRANCE Loic
 * This file is part of SooL core Library.
 *
 *  SooL core Library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License
 *  as published by the Free Software Foundation, either version 3
 *  of the License, or (at your option) any later version.
 *
 *  SooL core Library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with SooL core Library. If not, see <https://www.gnu.org/licenses/>.
 */


//Generated 2020-03-22T22:03:49.993630

#ifndef __SOOL_CORE_RCC_H
#define __SOOL_CORE_RCC_H
#include "lib_utils/peripheral_include.h"


#if	defined(STM32MP1     )
#define RCC_TZCR
#define RCC_OCENSETR
#define RCC_OCENCLRR
#define RCC_HSICFGR_0
#define RCC_CSICFGR_0
#define RCC_MPCKSELR
#define RCC_ASSCKSELR
#define RCC_RCK12SELR
#define RCC_MPCKDIVR
#define RCC_AXIDIVR
#define RCC_APB4DIVR
#define RCC_APB5DIVR
#define RCC_RTCDIVR
#define RCC_MSSCKSELR
#define RCC_PLL1CR
#define RCC_PLL1CFGR1
#define RCC_PLLxCFGR2
#define RCC_PLLxFRACR
#define RCC_PLLxCSGR
#define RCC_PLL2CR
#define RCC_PLL2CFGR1
#define RCC_I2C4CKSELR
#define RCC_SPI6CKSELR
#define RCC_UART1CKSELR
#define RCC_RNG1CKSELR
#define RCC_CPERCKSELR
#define RCC_STGENCKSELR
#define RCC_DDRITFCR
#define RCC_MP_BOOTCR
#define RCC_MP_SREQSETR
#define RCC_MP_GCR
#define RCC_MP_APRSTCR
#define RCC_MP_APRSTSR
#define RCC_BDCR_0_LSEBYP LSEBYP
#define RCC_BDCR_0_LSERDY LSERDY
#define RCC_BDCR_0_LSEDRV LSEDRV
#define RCC_BDCR_0_LSECSSON LSECSSON
#define RCC_BDCR_0_LSECSSD LSECSSD
#define RCC_BDCR_0_RTCSRC RTCSRC
#define RCC_BDCR_0_RTCCKEN RTCCKEN
#define RCC_BDCR_0_VSWRST VSWRST
#define RCC_RDLSICR
#define RCC_APB4RSTSETR
#define RCC_APB5RSTSETR
#define RCC_AHB5RSTSETR
#define RCC_AHB6RSTSETR
#define RCC_AHB6RSTCLRR
#define RCC_TZAHB6RSTSETR
#define RCC_MP_APB4ENSETR
#define RCC_MP_APB5ENSETR
#define RCC_MP_AHB5ENSETR
#define RCC_AHB6ENSETR
#define RCC_MP_TZAHB6ENSETR
#define RCC_MC_APB4ENSETR
#define RCC_MC_APB5ENSETR
#define RCC_MC_AHB5ENSETR
#define RCC_MP_APB4LPENSETR
#define RCC_MP_APB5LPENSETR
#define RCC_AHB5LPENSETR
#define RCC_AHB6LPENSETR
#define RCC_MP_TZAHB6LPENSETR
#define RCC_MC_APB4LPENSETR
#define RCC_MC_APB5LPENSETR
#define RCC_BR_RSTSCLRR
#define RCC_MP_GRSTCSETR
#define RCC_MP_RSTSR
#define RCC_MP_IWDGFZSETR
#define RCC_MxCIER
#define RCC_MxCIFR
#define RCC_PWRLPDLYCR
#define RCC_MCO1CFGR
#define RCC_MCO2CFGR
#define RCC_OCRDYR
#define RCC_DBGCFGR
#define RCC_RCK3SELR
#define RCC_RCK4SELR
#define RCC_TIMG1PRER
#define RCC_TIMG2PRER
#define RCC_MCUDIVR
#define RCC_APB1DIVR
#define RCC_APB2DIVR
#define RCC_APB3DIVR
#define RCC_PLL3CR
#define RCC_PLL3CFGR1
#define RCC_PLL4CR
#define RCC_PLL4CFGR1
#define RCC_I2C12CKSELR
#define RCC_I2C35CKSELR
#define RCC_SAI1CKSELR
#define RCC_SAI2CKSELR
#define RCC_SAI3CKSELR
#define RCC_SAI4CKSELR
#define RCC_SPI2S1CKSELR
#define RCC_SPI2S23CKSELR
#define RCC_SPI45CKSELR
#define RCC_UART6CKSELR
#define RCC_UART24CKSELR
#define RCC_UART35CKSELR
#define RCC_UART78CKSELR
#define RCC_SDMMC12CKSELR
#define RCC_SDMMC3CKSELR
#define RCC_ETHCKSELR
#define RCC_QSPICKSELR
#define RCC_FMCCKSELR
#define RCC_FDCANCKSELR
#define RCC_SPDIFCKSELR
#define RCC_CECCKSELR
#define RCC_USBCKSELR
#define RCC_RNG2CKSELR
#define RCC_DSICKSELR
#define RCC_ADCCKSELR
#define RCC_LPTIM45CKSELR
#define RCC_LPTIM23CKSELR
#define RCC_LPTIM1CKSELR
#define RCC_APB1RSTSETR
#define RCC_APB2RSTSETR
#define RCC_APB3RSTSETR
#define RCC_AHB2RSTSETR
#define RCC_AHB3RSTSETR
#define RCC_AHB4RSTSETR
#define RCC_MP_APB1ENSETR
#define RCC_APB2ENSETR
#define RCC_APB3ENSETR
#define RCC_AHB2ENSETR
#define RCC_AHB3ENSETR
#define RCC_AHB4ENSETR
#define RCC_MxMLAHBENSETR
#define RCC_MC_APB1ENSETR
#define RCC_MC_AXIMENSETR
#define RCC_MP_APB1LPENSETR
#define RCC_APB2LPENSETR
#define RCC_APB3LPENSETR
#define RCC_AHB2LPENSETR
#define RCC_AHB3LPENSETR
#define RCC_AHB4LPENSETR
#define RCC_MxAXIMLPENSETR
#define RCC_MxMLAHBLPENSETR
#define RCC_MC_APB1LPENSETR
#define RCC_MC_RSTSCLRR
#define RCC_VERR
#define RCC_IDR
#define RCC_SIDR
#define RCC_MAP0_TZCR TZCR_t TZCR
#define RCC_MAP0_OCENSETR OCENSETR_t OCENSETR
#define RCC_MAP0_OCENCLRR OCENCLRR_t OCENCLRR
#define RCC_MAP0_HSICFGR HSICFGR_t HSICFGR
#define RCC_MAP0_CSICFGR CSICFGR_t CSICFGR
#define RCC_MAP0_MPCKSELR MPCKSELR_t MPCKSELR
#define RCC_MAP0_ASSCKSELR ASSCKSELR_t ASSCKSELR
#define RCC_MAP0_RCK12SELR RCK12SELR_t RCK12SELR
#define RCC_MAP0_MPCKDIVR MPCKDIVR_t MPCKDIVR
#define RCC_MAP0_AXIDIVR AXIDIVR_t AXIDIVR
#define RCC_MAP0_APB4DIVR APB4DIVR_t APB4DIVR
#define RCC_MAP0_APB5DIVR APB5DIVR_t APB5DIVR
#define RCC_MAP0_RTCDIVR RTCDIVR_t RTCDIVR
#define RCC_MAP0_MSSCKSELR MSSCKSELR_t MSSCKSELR
#define RCC_MAP0_PLL1CR PLL1CR_t PLL1CR
#define RCC_MAP0_PLL1CFGR1 PLL1CFGR1_t PLL1CFGR1
#define RCC_MAP0_PLL1CFGR2 PLLxCFGR2_t PLL1CFGR2
#define RCC_MAP0_PLL1FRACR PLLxFRACR_t PLL1FRACR
#define RCC_MAP0_PLL1CSGR PLLxCSGR_t PLL1CSGR
#define RCC_MAP0_PLL2CR PLL2CR_t PLL2CR
#define RCC_MAP0_PLL2CFGR1 PLL2CFGR1_t PLL2CFGR1
#define RCC_MAP0_PLL2CFGR2 PLLxCFGR2_t PLL2CFGR2
#define RCC_MAP0_PLL2FRACR PLLxFRACR_t PLL2FRACR
#define RCC_MAP0_PLL2CSGR PLLxCSGR_t PLL2CSGR
#define RCC_MAP0_I2C4CKSELR I2C4CKSELR_t I2C4CKSELR
#define RCC_MAP0_SPI6CKSELR SPI6CKSELR_t SPI6CKSELR
#define RCC_MAP0_UART1CKSELR UART1CKSELR_t UART1CKSELR
#define RCC_MAP0_RNG1CKSELR RNG1CKSELR_t RNG1CKSELR
#define RCC_MAP0_CPERCKSELR CPERCKSELR_t CPERCKSELR
#define RCC_MAP0_STGENCKSELR STGENCKSELR_t STGENCKSELR
#define RCC_MAP0_DDRITFCR DDRITFCR_t DDRITFCR
#define RCC_MAP0_MP_BOOTCR MP_BOOTCR_t MP_BOOTCR
#define RCC_MAP0_MP_SREQSETR MP_SREQSETR_t MP_SREQSETR
#define RCC_MAP0_MP_SREQCLRR MP_SREQSETR_t MP_SREQCLRR
#define RCC_MAP0_MP_GCR MP_GCR_t MP_GCR
#define RCC_MAP0_MP_APRSTCR MP_APRSTCR_t MP_APRSTCR
#define RCC_MAP0_MP_APRSTSR MP_APRSTSR_t MP_APRSTSR
#define RCC_MAP0_BDCR BDCR_t BDCR
#define RCC_MAP0_RDLSICR RDLSICR_t RDLSICR
#define RCC_MAP0_APB4RSTSETR APB4RSTSETR_t APB4RSTSETR
#define RCC_MAP0_APB4RSTCLRR APB4RSTSETR_t APB4RSTCLRR
#define RCC_MAP0_APB5RSTSETR APB5RSTSETR_t APB5RSTSETR
#define RCC_MAP0_APB5RSTCLRR APB5RSTSETR_t APB5RSTCLRR
#define RCC_MAP0_AHB5RSTSETR AHB5RSTSETR_t AHB5RSTSETR
#define RCC_MAP0_AHB5RSTCLRR AHB5RSTSETR_t AHB5RSTCLRR
#define RCC_MAP0_AHB6RSTSETR AHB6RSTSETR_t AHB6RSTSETR
#define RCC_MAP0_AHB6RSTCLRR AHB6RSTCLRR_t AHB6RSTCLRR
#define RCC_MAP0_TZAHB6RSTSETR TZAHB6RSTSETR_t TZAHB6RSTSETR
#define RCC_MAP0_TZAHB6RSTCLRR TZAHB6RSTSETR_t TZAHB6RSTCLRR
#define RCC_MAP0_MP_APB4ENSETR MP_APB4ENSETR_t MP_APB4ENSETR
#define RCC_MAP0_MP_APB4ENCLRR MP_APB4ENSETR_t MP_APB4ENCLRR
#define RCC_MAP0_MP_APB5ENSETR MP_APB5ENSETR_t MP_APB5ENSETR
#define RCC_MAP0_MP_APB5ENCLRR MP_APB5ENSETR_t MP_APB5ENCLRR
#define RCC_MAP0_MP_AHB5ENSETR MP_AHB5ENSETR_t MP_AHB5ENSETR
#define RCC_MAP0_MP_AHB5ENCLRR MP_AHB5ENSETR_t MP_AHB5ENCLRR
#define RCC_MAP0_MP_AHB6ENSETR AHB6ENSETR_t MP_AHB6ENSETR
#define RCC_MAP0_MP_AHB6ENCLRR AHB6ENSETR_t MP_AHB6ENCLRR
#define RCC_MAP0_MP_TZAHB6ENSETR MP_TZAHB6ENSETR_t MP_TZAHB6ENSETR
#define RCC_MAP0_MP_TZAHB6ENCLRR MP_TZAHB6ENSETR_t MP_TZAHB6ENCLRR
#define RCC_MAP0_MC_APB4ENSETR MC_APB4ENSETR_t MC_APB4ENSETR
#define RCC_MAP0_MC_APB4ENCLRR MC_APB4ENSETR_t MC_APB4ENCLRR
#define RCC_MAP0_MC_APB5ENSETR MC_APB5ENSETR_t MC_APB5ENSETR
#define RCC_MAP0_MC_APB5ENCLRR MC_APB5ENSETR_t MC_APB5ENCLRR
#define RCC_MAP0_MC_AHB5ENSETR MC_AHB5ENSETR_t MC_AHB5ENSETR
#define RCC_MAP0_MC_AHB5ENCLRR MC_AHB5ENSETR_t MC_AHB5ENCLRR
#define RCC_MAP0_MC_AHB6ENSETR AHB6ENSETR_t MC_AHB6ENSETR
#define RCC_MAP0_MC_AHB6ENCLRR AHB6ENSETR_t MC_AHB6ENCLRR
#define RCC_MAP0_MP_APB4LPENSETR MP_APB4LPENSETR_t MP_APB4LPENSETR
#define RCC_MAP0_MP_APB4LPENCLRR MP_APB4LPENSETR_t MP_APB4LPENCLRR
#define RCC_MAP0_MP_APB5LPENSETR MP_APB5LPENSETR_t MP_APB5LPENSETR
#define RCC_MAP0_MP_APB5LPENCLRR MP_APB5LPENSETR_t MP_APB5LPENCLRR
#define RCC_MAP0_MP_AHB5LPENSETR AHB5LPENSETR_t MP_AHB5LPENSETR
#define RCC_MAP0_MP_AHB5LPENCLRR AHB5LPENSETR_t MP_AHB5LPENCLRR
#define RCC_MAP0_MP_AHB6LPENSETR AHB6LPENSETR_t MP_AHB6LPENSETR
#define RCC_MAP0_MP_AHB6LPENCLRR AHB6LPENSETR_t MP_AHB6LPENCLRR
#define RCC_MAP0_MP_TZAHB6LPENSETR MP_TZAHB6LPENSETR_t MP_TZAHB6LPENSETR
#define RCC_MAP0_MP_TZAHB6LPENCLRR MP_TZAHB6LPENSETR_t MP_TZAHB6LPENCLRR
#define RCC_MAP0_MC_APB4LPENSETR MC_APB4LPENSETR_t MC_APB4LPENSETR
#define RCC_MAP0_MC_APB4LPENCLRR MC_APB4LPENSETR_t MC_APB4LPENCLRR
#define RCC_MAP0_MC_APB5LPENSETR MC_APB5LPENSETR_t MC_APB5LPENSETR
#define RCC_MAP0_MC_APB5LPENCLRR MC_APB5LPENSETR_t MC_APB5LPENCLRR
#define RCC_MAP0_MC_AHB5LPENSETR AHB5LPENSETR_t MC_AHB5LPENSETR
#define RCC_MAP0_MC_AHB5LPENCLRR AHB5LPENSETR_t MC_AHB5LPENCLRR
#define RCC_MAP0_MC_AHB6LPENSETR AHB6LPENSETR_t MC_AHB6LPENSETR
#define RCC_MAP0_MC_AHB6LPENCLRR AHB6LPENSETR_t MC_AHB6LPENCLRR
#define RCC_MAP0_BR_RSTSCLRR BR_RSTSCLRR_t BR_RSTSCLRR
#define RCC_MAP0_MP_GRSTCSETR MP_GRSTCSETR_t MP_GRSTCSETR
#define RCC_MAP0_MP_RSTSR MP_RSTSR_t MP_RSTSR
#define RCC_MAP0_MP_IWDGFZSETR MP_IWDGFZSETR_t MP_IWDGFZSETR
#define RCC_MAP0_MP_IWDGFZCLRR MP_IWDGFZSETR_t MP_IWDGFZCLRR
#define RCC_MAP0_MP_CIER MxCIER_t MP_CIER
#define RCC_MAP0_MP_CIFR MxCIFR_t MP_CIFR
#define RCC_MAP0_PWRLPDLYCR PWRLPDLYCR_t PWRLPDLYCR
#define RCC_MAP0_MCO1CFGR MCO1CFGR_t MCO1CFGR
#define RCC_MAP0_MCO2CFGR MCO2CFGR_t MCO2CFGR
#define RCC_MAP0_OCRDYR OCRDYR_t OCRDYR
#define RCC_MAP0_DBGCFGR DBGCFGR_t DBGCFGR
#define RCC_MAP0_RCK3SELR RCK3SELR_t RCK3SELR
#define RCC_MAP0_RCK4SELR RCK4SELR_t RCK4SELR
#define RCC_MAP0_TIMG1PRER TIMG1PRER_t TIMG1PRER
#define RCC_MAP0_TIMG2PRER TIMG2PRER_t TIMG2PRER
#define RCC_MAP0_MCUDIVR MCUDIVR_t MCUDIVR
#define RCC_MAP0_APB1DIVR APB1DIVR_t APB1DIVR
#define RCC_MAP0_APB2DIVR APB2DIVR_t APB2DIVR
#define RCC_MAP0_APB3DIVR APB3DIVR_t APB3DIVR
#define RCC_MAP0_PLL3CR PLL3CR_t PLL3CR
#define RCC_MAP0_PLL3CFGR1 PLL3CFGR1_t PLL3CFGR1
#define RCC_MAP0_PLL3CFGR2 PLLxCFGR2_t PLL3CFGR2
#define RCC_MAP0_PLL3FRACR PLLxFRACR_t PLL3FRACR
#define RCC_MAP0_PLL3CSGR PLLxCSGR_t PLL3CSGR
#define RCC_MAP0_PLL4CR PLL4CR_t PLL4CR
#define RCC_MAP0_PLL4CFGR1 PLL4CFGR1_t PLL4CFGR1
#define RCC_MAP0_PLL4CFGR2 PLLxCFGR2_t PLL4CFGR2
#define RCC_MAP0_PLL4FRACR PLLxFRACR_t PLL4FRACR
#define RCC_MAP0_PLL4CSGR PLLxCSGR_t PLL4CSGR
#define RCC_MAP0_I2C12CKSELR I2C12CKSELR_t I2C12CKSELR
#define RCC_MAP0_I2C35CKSELR I2C35CKSELR_t I2C35CKSELR
#define RCC_MAP0_SAI1CKSELR SAI1CKSELR_t SAI1CKSELR
#define RCC_MAP0_SAI2CKSELR SAI2CKSELR_t SAI2CKSELR
#define RCC_MAP0_SAI3CKSELR SAI3CKSELR_t SAI3CKSELR
#define RCC_MAP0_SAI4CKSELR SAI4CKSELR_t SAI4CKSELR
#define RCC_MAP0_SPI2S1CKSELR SPI2S1CKSELR_t SPI2S1CKSELR
#define RCC_MAP0_SPI2S23CKSELR SPI2S23CKSELR_t SPI2S23CKSELR
#define RCC_MAP0_SPI45CKSELR SPI45CKSELR_t SPI45CKSELR
#define RCC_MAP0_UART6CKSELR UART6CKSELR_t UART6CKSELR
#define RCC_MAP0_UART24CKSELR UART24CKSELR_t UART24CKSELR
#define RCC_MAP0_UART35CKSELR UART35CKSELR_t UART35CKSELR
#define RCC_MAP0_UART78CKSELR UART78CKSELR_t UART78CKSELR
#define RCC_MAP0_SDMMC12CKSELR SDMMC12CKSELR_t SDMMC12CKSELR
#define RCC_MAP0_SDMMC3CKSELR SDMMC3CKSELR_t SDMMC3CKSELR
#define RCC_MAP0_ETHCKSELR ETHCKSELR_t ETHCKSELR
#define RCC_MAP0_QSPICKSELR QSPICKSELR_t QSPICKSELR
#define RCC_MAP0_FMCCKSELR FMCCKSELR_t FMCCKSELR
#define RCC_MAP0_FDCANCKSELR FDCANCKSELR_t FDCANCKSELR
#define RCC_MAP0_SPDIFCKSELR SPDIFCKSELR_t SPDIFCKSELR
#define RCC_MAP0_CECCKSELR CECCKSELR_t CECCKSELR
#define RCC_MAP0_USBCKSELR USBCKSELR_t USBCKSELR
#define RCC_MAP0_RNG2CKSELR RNG2CKSELR_t RNG2CKSELR
#define RCC_MAP0_DSICKSELR DSICKSELR_t DSICKSELR
#define RCC_MAP0_ADCCKSELR ADCCKSELR_t ADCCKSELR
#define RCC_MAP0_LPTIM45CKSELR LPTIM45CKSELR_t LPTIM45CKSELR
#define RCC_MAP0_LPTIM23CKSELR LPTIM23CKSELR_t LPTIM23CKSELR
#define RCC_MAP0_LPTIM1CKSELR LPTIM1CKSELR_t LPTIM1CKSELR
#define RCC_MAP0_APB1RSTSETR APB1RSTSETR_t APB1RSTSETR
#define RCC_MAP0_APB1RSTCLRR APB1RSTSETR_t APB1RSTCLRR
#define RCC_MAP0_APB2RSTSETR APB2RSTSETR_t APB2RSTSETR
#define RCC_MAP0_APB2RSTCLRR APB2RSTSETR_t APB2RSTCLRR
#define RCC_MAP0_APB3RSTSETR APB3RSTSETR_t APB3RSTSETR
#define RCC_MAP0_APB3RSTCLRR APB3RSTSETR_t APB3RSTCLRR
#define RCC_MAP0_AHB2RSTSETR AHB2RSTSETR_t AHB2RSTSETR
#define RCC_MAP0_AHB2RSTCLRR AHB2RSTSETR_t AHB2RSTCLRR
#define RCC_MAP0_AHB3RSTSETR AHB3RSTSETR_t AHB3RSTSETR
#define RCC_MAP0_AHB3RSTCLRR AHB3RSTSETR_t AHB3RSTCLRR
#define RCC_MAP0_AHB4RSTSETR AHB4RSTSETR_t AHB4RSTSETR
#define RCC_MAP0_AHB4RSTCLRR AHB4RSTSETR_t AHB4RSTCLRR
#define RCC_MAP0_MP_APB1ENSETR MP_APB1ENSETR_t MP_APB1ENSETR
#define RCC_MAP0_MP_APB1ENCLRR MP_APB1ENSETR_t MP_APB1ENCLRR
#define RCC_MAP0_MP_APB2ENSETR APB2ENSETR_t MP_APB2ENSETR
#define RCC_MAP0_MP_APB2ENCLRR APB2ENSETR_t MP_APB2ENCLRR
#define RCC_MAP0_MP_APB3ENSETR APB3ENSETR_t MP_APB3ENSETR
#define RCC_MAP0_MP_APB3ENCLRR APB3ENSETR_t MP_APB3ENCLRR
#define RCC_MAP0_MP_AHB2ENSETR AHB2ENSETR_t MP_AHB2ENSETR
#define RCC_MAP0_MP_AHB2ENCLRR AHB2ENSETR_t MP_AHB2ENCLRR
#define RCC_MAP0_MP_AHB3ENSETR AHB3ENSETR_t MP_AHB3ENSETR
#define RCC_MAP0_MP_AHB3ENCLRR AHB3ENSETR_t MP_AHB3ENCLRR
#define RCC_MAP0_MP_AHB4ENSETR AHB4ENSETR_t MP_AHB4ENSETR
#define RCC_MAP0_MP_AHB4ENCLRR AHB4ENSETR_t MP_AHB4ENCLRR
#define RCC_MAP0_MP_MLAHBENSETR MxMLAHBENSETR_t MP_MLAHBENSETR
#define RCC_MAP0_MP_MLAHBENCLRR MxMLAHBENSETR_t MP_MLAHBENCLRR
#define RCC_MAP0_MC_APB1ENSETR MC_APB1ENSETR_t MC_APB1ENSETR
#define RCC_MAP0_MC_APB1ENCLRR MP_APB1ENSETR_t MC_APB1ENCLRR
#define RCC_MAP0_MC_APB2ENSETR APB2ENSETR_t MC_APB2ENSETR
#define RCC_MAP0_MC_APB2ENCLRR APB2ENSETR_t MC_APB2ENCLRR
#define RCC_MAP0_MC_APB3ENSETR APB3ENSETR_t MC_APB3ENSETR
#define RCC_MAP0_MC_APB3ENCLRR APB3ENSETR_t MC_APB3ENCLRR
#define RCC_MAP0_MC_AHB2ENSETR AHB2ENSETR_t MC_AHB2ENSETR
#define RCC_MAP0_MC_AHB2ENCLRR AHB2ENSETR_t MC_AHB2ENCLRR
#define RCC_MAP0_MC_AHB3ENSETR AHB3ENSETR_t MC_AHB3ENSETR
#define RCC_MAP0_MC_AHB3ENCLRR AHB3ENSETR_t MC_AHB3ENCLRR
#define RCC_MAP0_MC_AHB4ENSETR AHB4ENSETR_t MC_AHB4ENSETR
#define RCC_MAP0_MC_AHB4ENCLRR AHB4ENSETR_t MC_AHB4ENCLRR
#define RCC_MAP0_MC_AXIMENSETR MC_AXIMENSETR_t MC_AXIMENSETR
#define RCC_MAP0_MC_AXIMENCLRR MC_AXIMENSETR_t MC_AXIMENCLRR
#define RCC_MAP0_MC_MLAHBENSETR MxMLAHBENSETR_t MC_MLAHBENSETR
#define RCC_MAP0_MC_MLAHBENCLRR MxMLAHBENSETR_t MC_MLAHBENCLRR
#define RCC_MAP0_MP_APB1LPENSETR MP_APB1LPENSETR_t MP_APB1LPENSETR
#define RCC_MAP0_MP_APB1LPENCLRR MP_APB1LPENSETR_t MP_APB1LPENCLRR
#define RCC_MAP0_MP_APB2LPENSETR APB2LPENSETR_t MP_APB2LPENSETR
#define RCC_MAP0_MP_APB2LPENCLRR APB2LPENSETR_t MP_APB2LPENCLRR
#define RCC_MAP0_MP_APB3LPENSETR APB3LPENSETR_t MP_APB3LPENSETR
#define RCC_MAP0_MP_APB3LPENCLRR APB3LPENSETR_t MP_APB3LPENCLRR
#define RCC_MAP0_MP_AHB2LPENSETR AHB2LPENSETR_t MP_AHB2LPENSETR
#define RCC_MAP0_MP_AHB2LPENCLRR AHB2LPENSETR_t MP_AHB2LPENCLRR
#define RCC_MAP0_MP_AHB3LPENSETR AHB3LPENSETR_t MP_AHB3LPENSETR
#define RCC_MAP0_MP_AHB3LPENCLRR AHB3LPENSETR_t MP_AHB3LPENCLRR
#define RCC_MAP0_MP_AHB4LPENSETR AHB4LPENSETR_t MP_AHB4LPENSETR
#define RCC_MAP0_MP_AHB4LPENCLRR AHB4LPENSETR_t MP_AHB4LPENCLRR
#define RCC_MAP0_MP_AXIMLPENSETR MxAXIMLPENSETR_t MP_AXIMLPENSETR
#define RCC_MAP0_MP_AXIMLPENCLRR MxAXIMLPENSETR_t MP_AXIMLPENCLRR
#define RCC_MAP0_MP_MLAHBLPENSETR MxMLAHBLPENSETR_t MP_MLAHBLPENSETR
#define RCC_MAP0_MP_MLAHBLPENCLRR MxMLAHBLPENSETR_t MP_MLAHBLPENCLRR
#define RCC_MAP0_MC_APB1LPENSETR MC_APB1LPENSETR_t MC_APB1LPENSETR
#define RCC_MAP0_MC_APB1LPENCLRR MC_APB1LPENSETR_t MC_APB1LPENCLRR
#define RCC_MAP0_MC_APB2LPENSETR APB2LPENSETR_t MC_APB2LPENSETR
#define RCC_MAP0_MC_APB2LPENCLRR APB2LPENSETR_t MC_APB2LPENCLRR
#define RCC_MAP0_MC_APB3LPENSETR APB3LPENSETR_t MC_APB3LPENSETR
#define RCC_MAP0_MC_APB3LPENCLRR APB3LPENSETR_t MC_APB3LPENCLRR
#define RCC_MAP0_MC_AHB2LPENSETR AHB2LPENSETR_t MC_AHB2LPENSETR
#define RCC_MAP0_MC_AHB2LPENCLRR AHB2LPENSETR_t MC_AHB2LPENCLRR
#define RCC_MAP0_MC_AHB3LPENSETR AHB3LPENSETR_t MC_AHB3LPENSETR
#define RCC_MAP0_MC_AHB3LPENCLRR AHB3LPENSETR_t MC_AHB3LPENCLRR
#define RCC_MAP0_MC_AHB4LPENSETR AHB4LPENSETR_t MC_AHB4LPENSETR
#define RCC_MAP0_MC_AHB4LPENCLRR AHB4LPENSETR_t MC_AHB4LPENCLRR
#define RCC_MAP0_MC_AXIMLPENSETR MxAXIMLPENSETR_t MC_AXIMLPENSETR
#define RCC_MAP0_MC_AXIMLPENCLRR MxAXIMLPENSETR_t MC_AXIMLPENCLRR
#define RCC_MAP0_MC_MLAHBLPENSETR MxMLAHBLPENSETR_t MC_MLAHBLPENSETR
#define RCC_MAP0_MC_MLAHBLPENCLRR MxMLAHBLPENSETR_t MC_MLAHBLPENCLRR
#define RCC_MAP0_MC_RSTSCLRR MC_RSTSCLRR_t MC_RSTSCLRR
#define RCC_MAP0_MC_CIER MxCIER_t MC_CIER
#define RCC_MAP0_MC_CIFR MxCIFR_t MC_CIFR
#define RCC_MAP0_VERR VERR_t VERR
#define RCC_MAP0_IDR IDR_t IDR
#define RCC_MAP0_SIDR SIDR_t SIDR
#else
#define RCC_BDCR_0_LSEBYP
#define RCC_BDCR_0_LSERDY
#define RCC_BDCR_0_LSEDRV
#define RCC_BDCR_0_LSECSSON
#define RCC_BDCR_0_LSECSSD
#define RCC_BDCR_0_RTCSRC
#define RCC_BDCR_0_RTCCKEN
#define RCC_BDCR_0_VSWRST
#define RCC_MAP0_TZCR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_OCENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_OCENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_HSICFGR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_CSICFGR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MPCKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_ASSCKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_RCK12SELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MPCKDIVR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_AXIDIVR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_APB4DIVR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_APB5DIVR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_RTCDIVR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MSSCKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_PLL1CR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_PLL1CFGR1 __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_PLL1CFGR2 __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_PLL1FRACR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_PLL1CSGR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_PLL2CR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_PLL2CFGR1 __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_PLL2CFGR2 __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_PLL2FRACR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_PLL2CSGR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_I2C4CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_SPI6CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_UART1CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_RNG1CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_CPERCKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_STGENCKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_DDRITFCR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_BOOTCR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_SREQSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_SREQCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_GCR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_APRSTCR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_APRSTSR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_BDCR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_RDLSICR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_APB4RSTSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_APB4RSTCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_APB5RSTSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_APB5RSTCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_AHB5RSTSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_AHB5RSTCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_AHB6RSTSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_AHB6RSTCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_TZAHB6RSTSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_TZAHB6RSTCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_APB4ENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_APB4ENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_APB5ENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_APB5ENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_AHB5ENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_AHB5ENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_AHB6ENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_AHB6ENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_TZAHB6ENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_TZAHB6ENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_APB4ENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_APB4ENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_APB5ENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_APB5ENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AHB5ENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AHB5ENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AHB6ENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AHB6ENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_APB4LPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_APB4LPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_APB5LPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_APB5LPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_AHB5LPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_AHB5LPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_AHB6LPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_AHB6LPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_TZAHB6LPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_TZAHB6LPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_APB4LPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_APB4LPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_APB5LPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_APB5LPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AHB5LPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AHB5LPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AHB6LPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AHB6LPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_BR_RSTSCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_GRSTCSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_RSTSR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_IWDGFZSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_IWDGFZCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_CIER __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_CIFR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_PWRLPDLYCR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MCO1CFGR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MCO2CFGR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_OCRDYR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_DBGCFGR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_RCK3SELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_RCK4SELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_TIMG1PRER __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_TIMG2PRER __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MCUDIVR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_APB1DIVR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_APB2DIVR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_APB3DIVR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_PLL3CR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_PLL3CFGR1 __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_PLL3CFGR2 __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_PLL3FRACR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_PLL3CSGR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_PLL4CR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_PLL4CFGR1 __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_PLL4CFGR2 __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_PLL4FRACR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_PLL4CSGR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_I2C12CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_I2C35CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_SAI1CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_SAI2CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_SAI3CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_SAI4CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_SPI2S1CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_SPI2S23CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_SPI45CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_UART6CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_UART24CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_UART35CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_UART78CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_SDMMC12CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_SDMMC3CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_ETHCKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_QSPICKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_FMCCKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_FDCANCKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_SPDIFCKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_CECCKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_USBCKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_RNG2CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_DSICKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_ADCCKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_LPTIM45CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_LPTIM23CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_LPTIM1CKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_APB1RSTSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_APB1RSTCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_APB2RSTSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_APB2RSTCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_APB3RSTSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_APB3RSTCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_AHB2RSTSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_AHB2RSTCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_AHB3RSTSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_AHB3RSTCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_AHB4RSTSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_AHB4RSTCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_APB1ENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_APB1ENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_APB2ENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_APB2ENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_APB3ENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_APB3ENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_AHB2ENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_AHB2ENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_AHB3ENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_AHB3ENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_AHB4ENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_AHB4ENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_MLAHBENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_MLAHBENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_APB1ENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_APB1ENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_APB2ENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_APB2ENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_APB3ENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_APB3ENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AHB2ENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AHB2ENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AHB3ENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AHB3ENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AHB4ENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AHB4ENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AXIMENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AXIMENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_MLAHBENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_MLAHBENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_APB1LPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_APB1LPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_APB2LPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_APB2LPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_APB3LPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_APB3LPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_AHB2LPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_AHB2LPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_AHB3LPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_AHB3LPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_AHB4LPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_AHB4LPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_AXIMLPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_AXIMLPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_MLAHBLPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MP_MLAHBLPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_APB1LPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_APB1LPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_APB2LPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_APB2LPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_APB3LPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_APB3LPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AHB2LPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AHB2LPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AHB3LPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AHB3LPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AHB4LPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AHB4LPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AXIMLPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_AXIMLPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_MLAHBLPENSETR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_MLAHBLPENCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_RSTSCLRR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_CIER __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_MC_CIFR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_VERR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_IDR __SOOL_PERIPH_PADDING_4
#define RCC_MAP0_SIDR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32MP1     ) || defined(STM32H747xx_CORE_CM4) || defined(STM32H747xx_CORE_CM7) || defined(STM32H757xx_CORE_CM4) || defined(STM32H757xx_CORE_CM7)
#define RCC_HSICFGR
#define RCC_CSICFGR
#endif

#if	defined(STM32H747xx_CORE_CM4) || defined(STM32H747xx_CORE_CM7) || defined(STM32H757xx_CORE_CM4) || defined(STM32H757xx_CORE_CM7)
#define RCC_HSICFGR_1
#define RCC_CSICFGR_1
#define RCC_CRRCR_0
#define RCC_D3CFGR_0
#define RCC_D1CCIPR_DSISEL DSISEL
#define RCC_AHB1RSTR_0_ARTRST ARTRST
#define RCC_APB3RSTR_DSIRST DSIRST
#define RCC_GCR_WW2RSC WW2RSC
#define RCC_GCR_BOOT_C1 BOOT_C1
#define RCC_GCR_BOOT_C2 BOOT_C2
#define RCC_AHB1ENR_0_ARTEN ARTEN
#define RCC_AHB1ENR_0_USB1OTGHEN USB1OTGHEN
#define RCC_AHB1ENR_0_USB1OTGHSULPIEN USB1OTGHSULPIEN
#define RCC_AHB1ENR_0_USB2OTGHSEN USB2OTGHSEN
#define RCC_C1_AHB1ENR_0_ARTEN ARTEN
#define RCC_C1_AHB1ENR_0_USB1OTGHSEN USB1OTGHSEN
#define RCC_C1_AHB1ENR_0_USB1OTGHSULPIEN USB1OTGHSULPIEN
#define RCC_C1_AHB1ENR_0_USB2OTGHSEN USB2OTGHSEN
#define RCC_APB3ENR_DSIEN DSIEN
#define RCC_APB1LENR_0_WWDG2EN WWDG2EN
#define RCC_AHB1LPENR_0_ARTLPEN ARTLPEN
#define RCC_APB3LPENR_DSILPEN DSILPEN
#define RCC_APB1LLPENR_WWDG2LPEN WWDG2LPEN
#define RCC_MAP1_HSICFGR HSICFGR_t HSICFGR
#define RCC_MAP1_CSICFGR CSICFGR_t CSICFGR
#define RCC_MAP1_AHB3ENR D3CFGR_t AHB3ENR
#define RCC_MAP1_C1_AHB3ENR D3CFGR_t C1_AHB3ENR
#else
#define RCC_D1CCIPR_DSISEL
#define RCC_AHB1RSTR_0_ARTRST
#define RCC_APB3RSTR_DSIRST
#define RCC_GCR_WW2RSC
#define RCC_GCR_BOOT_C1
#define RCC_GCR_BOOT_C2
#define RCC_AHB1ENR_0_ARTEN
#define RCC_AHB1ENR_0_USB1OTGHEN
#define RCC_AHB1ENR_0_USB1OTGHSULPIEN
#define RCC_AHB1ENR_0_USB2OTGHSEN
#define RCC_C1_AHB1ENR_0_ARTEN
#define RCC_C1_AHB1ENR_0_USB1OTGHSEN
#define RCC_C1_AHB1ENR_0_USB1OTGHSULPIEN
#define RCC_C1_AHB1ENR_0_USB2OTGHSEN
#define RCC_APB3ENR_DSIEN
#define RCC_APB1LENR_0_WWDG2EN
#define RCC_AHB1LPENR_0_ARTLPEN
#define RCC_APB3LPENR_DSILPEN
#define RCC_APB1LLPENR_WWDG2LPEN
#define RCC_MAP1_HSICFGR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_CSICFGR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_AHB3ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_C1_AHB3ENR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F4      ) || defined(STM32F7      ) || \
    defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32H7      ) || defined(STM32L4      ) || \
    defined(STM32MP1     ) || defined(STM32WB      )
#define RCC_BDCR
#endif

#if	defined(STM32F413xx  ) || defined(STM32F423xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_BDCR_0_LSEMOD LSEMOD
#else
#define RCC_BDCR_0_LSEMOD
#endif

#if	defined(STM32WB      )
#define RCC_BDCR_0_LSECSSD_ LSECSSD_
#define RCC_BDCR_1_LSCOSEL LSCOSEL
#define RCC_CR_0_HSEPRE HSEPRE
#define RCC_CR_1_HSIKERDY HSIKERDY
#define RCC_CFGR_2_HPREF HPREF
#define RCC_CFGR_2_PPRE1F PPRE1F
#define RCC_CFGR_3_PPRE2F PPRE2F
#define RCC_PLLCFGR_2_PLLQ PLLQ
#define RCC_PLLCFGR_2_PLLREN PLLREN
#define RCC_PLLCFGR_2_PLLR PLLR
#define RCC_PLLCFGR_4_PLLP PLLP
#define RCC_PLLCFGR_4_PLLQEN PLLQEN
#define RCC_CIER_0_LSI2RDYIE LSI2RDYIE
#define RCC_CIER_1_LSI1RDYIE LSI1RDYIE
#define RCC_CIFR_0_LSI2RDYF LSI2RDYF
#define RCC_CIFR_1_LSI1RDYF LSI1RDYF
#define RCC_CICR_0_LSI2RDYC LSI2RDYC
#define RCC_CICR_1_LSI1RDYC LSI1RDYC
#define RCC_CSR_0_LSI2ON LSI2ON
#define RCC_CSR_0_LSI2RDY LSI2RDY
#define RCC_CSR_0_LSI2TRIMEN LSI2TRIMEN
#define RCC_CSR_0_LSI2TRIMOK LSI2TRIMOK
#define RCC_CSR_0_RFWKPSEL RFWKPSEL
#define RCC_CSR_0_RFRSTS RFRSTS
#define RCC_CSR_1_LSI1ON LSI1ON
#define RCC_CSR_1_LSI1RDY LSI1RDY
#define RCC_CSR_1_LSI2BW LSI2BW
#define RCC_AHB3RSTR_0_AES2RST AES2RST
#define RCC_AHB3RSTR_0_RNGRST RNGRST
#define RCC_AHB3RSTR_0_HSEMRST HSEMRST
#define RCC_AHB3RSTR_0_IPCCRST IPCCRST
#define RCC_AHB3RSTR_0_FLASHRST FLASHRST
#define RCC_AHB3RSTR_1_PKARST PKARST
#define RCC_AHB1RSTR_2_DMAMUXRST DMAMUXRST
#define RCC_AHB2RSTR_2_AES1RST AES1RST
#define RCC_APB3RSTR_RFRST RFRST
#define RCC_AHB2ENR_2_AES1EN AES1EN
#define RCC_AHB3ENR_0_AES2EN AES2EN
#define RCC_AHB3ENR_0_RNGEN RNGEN
#define RCC_AHB3ENR_0_HSEMEN HSEMEN
#define RCC_AHB3ENR_0_IPCCEN IPCCEN
#define RCC_AHB3ENR_0_FLASHEN FLASHEN
#define RCC_AHB3ENR_1_PKAEN PKAEN
#define RCC_PLLSAI1CFGR_1
#define RCC_APB1ENR1_2
#define RCC_AHB1SMENR_1_DMAMUXSMEN DMAMUXSMEN
#define RCC_AHB2SMENR_2_AES1SMEN AES1SMEN
#define RCC_AHB3SMENR_0_PKASMEN PKASMEN
#define RCC_AHB3SMENR_0_AES2SMEN AES2SMEN
#define RCC_AHB3SMENR_0_RNGSMEN RNGSMEN
#define RCC_AHB3SMENR_0_SRAM2SMEN SRAM2SMEN
#define RCC_AHB3SMENR_0_FLASHSMEN FLASHSMEN
#define RCC_APB1SMENR1_1_CRSMEN CRSMEN
#define RCC_APB1SMENR1_2
#define RCC_CCIPR_1_RNGSEL RNGSEL
#define RCC_SMPSCR
#define RCC_HSECR
#define RCC_EXTCFGR
#define RCC_C2AHB1ENR
#define RCC_C2AHB3ENR
#define RCC_C2APB1ENR1
#define RCC_C2APB3ENR
#define RCC_C2AHB3SMENR
#define RCC_C2APB1SMENR1
#define RCC_C2APB3SMENR
#define RCC_MAP5_SMPSCR SMPSCR_t SMPSCR
#define RCC_MAP5_APB3RSTR APB3RSTR_t APB3RSTR
#define RCC_MAP5_HSECR HSECR_t HSECR
#define RCC_MAP5_EXTCFGR EXTCFGR_t EXTCFGR
#define RCC_MAP5_C2AHB1ENR C2AHB1ENR_t C2AHB1ENR
#define RCC_MAP5_C2AHB2ENR AHB2ENR_t C2AHB2ENR
#define RCC_MAP5_C2AHB3ENR C2AHB3ENR_t C2AHB3ENR
#define RCC_MAP5_C2APB1ENR1 C2APB1ENR1_t C2APB1ENR1
#define RCC_MAP5_C2APB1ENR2 APB1ENR2_t C2APB1ENR2
#define RCC_MAP5_C2APB2ENR APB2ENR_t C2APB2ENR
#define RCC_MAP5_C2APB3ENR C2APB3ENR_t C2APB3ENR
#define RCC_MAP5_C2AHB1SMENR AHB1SMENR_t C2AHB1SMENR
#define RCC_MAP5_C2AHB2SMENR AHB2SMENR_t C2AHB2SMENR
#define RCC_MAP5_C2AHB3SMENR C2AHB3SMENR_t C2AHB3SMENR
#define RCC_MAP5_C2APB1SMENR1 C2APB1SMENR1_t C2APB1SMENR1
#define RCC_MAP5_C2APB1SMENR2 APB1SMENR2_t C2APB1SMENR2
#define RCC_MAP5_C2APB2SMENR APB2SMENR_t C2APB2SMENR
#define RCC_MAP5_C2APB3SMENR C2APB3SMENR_t C2APB3SMENR
#else
#define RCC_BDCR_0_LSECSSD_
#define RCC_BDCR_1_LSCOSEL
#define RCC_CR_0_HSEPRE
#define RCC_CR_1_HSIKERDY
#define RCC_CFGR_2_HPREF
#define RCC_CFGR_2_PPRE1F
#define RCC_CFGR_3_PPRE2F
#define RCC_PLLCFGR_2_PLLQ
#define RCC_PLLCFGR_2_PLLREN
#define RCC_PLLCFGR_2_PLLR
#define RCC_PLLCFGR_4_PLLP
#define RCC_PLLCFGR_4_PLLQEN
#define RCC_CIER_0_LSI2RDYIE
#define RCC_CIER_1_LSI1RDYIE
#define RCC_CIFR_0_LSI2RDYF
#define RCC_CIFR_1_LSI1RDYF
#define RCC_CICR_0_LSI2RDYC
#define RCC_CICR_1_LSI1RDYC
#define RCC_CSR_0_LSI2ON
#define RCC_CSR_0_LSI2RDY
#define RCC_CSR_0_LSI2TRIMEN
#define RCC_CSR_0_LSI2TRIMOK
#define RCC_CSR_0_RFWKPSEL
#define RCC_CSR_0_RFRSTS
#define RCC_CSR_1_LSI1ON
#define RCC_CSR_1_LSI1RDY
#define RCC_CSR_1_LSI2BW
#define RCC_AHB3RSTR_0_AES2RST
#define RCC_AHB3RSTR_0_RNGRST
#define RCC_AHB3RSTR_0_HSEMRST
#define RCC_AHB3RSTR_0_IPCCRST
#define RCC_AHB3RSTR_0_FLASHRST
#define RCC_AHB3RSTR_1_PKARST
#define RCC_AHB1RSTR_2_DMAMUXRST
#define RCC_AHB2RSTR_2_AES1RST
#define RCC_APB3RSTR_RFRST
#define RCC_AHB2ENR_2_AES1EN
#define RCC_AHB3ENR_0_AES2EN
#define RCC_AHB3ENR_0_RNGEN
#define RCC_AHB3ENR_0_HSEMEN
#define RCC_AHB3ENR_0_IPCCEN
#define RCC_AHB3ENR_0_FLASHEN
#define RCC_AHB3ENR_1_PKAEN
#define RCC_AHB1SMENR_1_DMAMUXSMEN
#define RCC_AHB2SMENR_2_AES1SMEN
#define RCC_AHB3SMENR_0_PKASMEN
#define RCC_AHB3SMENR_0_AES2SMEN
#define RCC_AHB3SMENR_0_RNGSMEN
#define RCC_AHB3SMENR_0_SRAM2SMEN
#define RCC_AHB3SMENR_0_FLASHSMEN
#define RCC_APB1SMENR1_1_CRSMEN
#define RCC_CCIPR_1_RNGSEL
#define RCC_MAP5_SMPSCR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_APB3RSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_HSECR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_EXTCFGR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_C2AHB1ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_C2AHB2ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_C2AHB3ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_C2APB1ENR1 __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_C2APB1ENR2 __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_C2APB2ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_C2APB3ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_C2AHB1SMENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_C2AHB2SMENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_C2AHB3SMENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_C2APB1SMENR1 __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_C2APB1SMENR2 __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_C2APB2SMENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_C2APB3SMENR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F4      ) || defined(STM32F7      ) || \
    defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32H7      ) || defined(STM32L4      ) || \
    defined(STM32WB      )
#define RCC_BDCR_0_RTCEN RTCEN
#define RCC_BDCR_1
#else
#define RCC_BDCR_0_RTCEN
#endif

#if	defined(STM32G0      ) || defined(STM32L4      ) || defined(STM32WB      )
#define RCC_BDCR_0_LSCOEN LSCOEN
#define RCC_CCIPR_0
#else
#define RCC_BDCR_0_LSCOEN
#endif

#if	defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L4      )
#define RCC_BDCR_0_LSCOSEL LSCOSEL
#else
#define RCC_BDCR_0_LSCOSEL
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || \
    defined(STM32H7      ) || defined(STM32L4      ) || defined(STM32WB      )
#define RCC_BDCR_1_LSEDRV LSEDRV
#else
#define RCC_BDCR_1_LSEDRV
#endif

#if	defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32H7      ) || defined(STM32L4      ) || \
    defined(STM32WB      )
#define RCC_BDCR_1_LSECSSON LSECSSON
#define RCC_CIFR_0_LSECSSF LSECSSF
#define RCC_CICR_0_LSECSSC LSECSSC
#else
#define RCC_BDCR_1_LSECSSON
#define RCC_CIFR_0_LSECSSF
#define RCC_CICR_0_LSECSSC
#endif

#if	defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32H7      ) || defined(STM32L4      )
#define RCC_BDCR_1_LSECSSD LSECSSD
#else
#define RCC_BDCR_1_LSECSSD
#endif

#if	defined(STM32H7      )
#define RCC_BDCR_1_RTCSRC RTCSRC
#define RCC_CR_0_HSIKERON HSIKERON
#define RCC_CR_0_HSIRDY HSIRDY
#define RCC_CR_0_HSIDIV HSIDIV
#define RCC_CR_0_HSIDIVF HSIDIVF
#define RCC_CR_0_CSION CSION
#define RCC_CR_0_CSIRDY CSIRDY
#define RCC_CR_0_CSIKERON CSIKERON
#define RCC_CR_0_RC48ON RC48ON
#define RCC_CR_0_RC48RDY RC48RDY
#define RCC_CR_0_D1CKRDY D1CKRDY
#define RCC_CR_0_D2CKRDY D2CKRDY
#define RCC_CR_0_PLL1ON PLL1ON
#define RCC_CR_0_PLL1RDY PLL1RDY
#define RCC_CR_0_PLL2ON PLL2ON
#define RCC_CR_0_PLL2RDY PLL2RDY
#define RCC_CR_0_PLL3ON PLL3ON
#define RCC_CR_0_PLL3RDY PLL3RDY
#define RCC_CFGR_0_STOPWUCK STOPWUCK
#define RCC_CFGR_0_STOPKERWUCK STOPKERWUCK
#define RCC_CFGR_0_RTCPRE RTCPRE
#define RCC_CFGR_0_HRTIMSEL HRTIMSEL
#define RCC_CFGR_0_TIMPRE TIMPRE
#define RCC_CFGR_0_MCO1PRE MCO1PRE
#define RCC_CFGR_0_MCO1SEL MCO1SEL
#define RCC_CFGR_0_MCO2PRE MCO2PRE
#define RCC_CFGR_0_MCO2SEL MCO2SEL
#define RCC_D1CFGR
#define RCC_D2CFGR
#define RCC_D3CFGR
#define RCC_PLLCKSELR
#define RCC_PLLCFGR_0_PLL1FRACEN PLL1FRACEN
#define RCC_PLLCFGR_0_PLL1VCOSEL PLL1VCOSEL
#define RCC_PLLCFGR_0_PLL1RGE PLL1RGE
#define RCC_PLLCFGR_0_PLL2FRACEN PLL2FRACEN
#define RCC_PLLCFGR_0_PLL2VCOSEL PLL2VCOSEL
#define RCC_PLLCFGR_0_PLL2RGE PLL2RGE
#define RCC_PLLCFGR_0_PLL3FRACEN PLL3FRACEN
#define RCC_PLLCFGR_0_PLL3VCOSEL PLL3VCOSEL
#define RCC_PLLCFGR_0_PLL3RGE PLL3RGE
#define RCC_PLLCFGR_0_DIVP1EN DIVP1EN
#define RCC_PLLCFGR_0_DIVQ1EN DIVQ1EN
#define RCC_PLLCFGR_0_DIVR1EN DIVR1EN
#define RCC_PLLCFGR_0_DIVP2EN DIVP2EN
#define RCC_PLLCFGR_0_DIVQ2EN DIVQ2EN
#define RCC_PLLCFGR_0_DIVR2EN DIVR2EN
#define RCC_PLLCFGR_0_DIVP3EN DIVP3EN
#define RCC_PLLCFGR_0_DIVQ3EN DIVQ3EN
#define RCC_PLLCFGR_0_DIVR3EN DIVR3EN
#define RCC_PLLxDIVR
#define RCC_PLL1FRACR
#define RCC_PLL2FRACR
#define RCC_PLL3DIVR
#define RCC_PLL3FRACR
#define RCC_D1CCIPR
#define RCC_D2CCIP1R
#define RCC_D2CCIP2R
#define RCC_D3CCIPR
#define RCC_CIER_0_HSIRDYIE HSIRDYIE
#define RCC_CIER_0_CSIRDYIE CSIRDYIE
#define RCC_CIER_0_RC48RDYIE RC48RDYIE
#define RCC_CIER_0_PLL1RDYIE PLL1RDYIE
#define RCC_CIER_0_PLL2RDYIE PLL2RDYIE
#define RCC_CIER_0_PLL3RDYIE PLL3RDYIE
#define RCC_CIFR_0_HSIRDYF HSIRDYF
#define RCC_CIFR_0_CSIRDY CSIRDY
#define RCC_CIFR_0_RC48RDYF RC48RDYF
#define RCC_CIFR_0_PLL1RDYF PLL1RDYF
#define RCC_CIFR_0_PLL2RDYF PLL2RDYF
#define RCC_CIFR_0_PLL3RDYF PLL3RDYF
#define RCC_CIFR_0_HSECSSF HSECSSF
#define RCC_CICR_0_HSIRDYC HSIRDYC
#define RCC_CICR_0_HSE_ready_Interrupt_Clear HSE_ready_Interrupt_Clear
#define RCC_CICR_0_RC48RDYC RC48RDYC
#define RCC_CICR_0_PLL1RDYC PLL1RDYC
#define RCC_CICR_0_PLL2RDYC PLL2RDYC
#define RCC_CICR_0_PLL3RDYC PLL3RDYC
#define RCC_CICR_0_HSECSSC HSECSSC
#define RCC_AHB3RSTR_0_MDMARST MDMARST
#define RCC_AHB3RSTR_0_DMA2DRST DMA2DRST
#define RCC_AHB3RSTR_0_JPGDECRST JPGDECRST
#define RCC_AHB3RSTR_0_FMCRST FMCRST
#define RCC_AHB3RSTR_0_QSPIRST QSPIRST
#define RCC_AHB3RSTR_0_SDMMC1RST SDMMC1RST
#define RCC_AHB1RSTR_0_ADC12RST ADC12RST
#define RCC_AHB1RSTR_0_ETH1MACRST ETH1MACRST
#define RCC_AHB1RSTR_0_USB1OTGRST USB1OTGRST
#define RCC_AHB1RSTR_0_USB2OTGRST USB2OTGRST
#define RCC_AHB2RSTR_0_CAMITFRST CAMITFRST
#define RCC_AHB2RSTR_0_CRYPTRST CRYPTRST
#define RCC_AHB2RSTR_0_HASHRST HASHRST
#define RCC_AHB2RSTR_0_SDMMC2RST SDMMC2RST
#define RCC_AHB4RSTR
#define RCC_APB3RSTR_LTDCRST LTDCRST
#define RCC_APB1LRSTR
#define RCC_APB1HRSTR
#define RCC_APB2RSTR_0_SAI3RST SAI3RST
#define RCC_APB2RSTR_0_DFSDM1RST DFSDM1RST
#define RCC_APB2RSTR_0_HRTIMRST HRTIMRST
#define RCC_APB4RSTR
#define RCC_GCR
#define RCC_D3AMR
#define RCC_xRSR
#define RCC_AHB1ENR_0_ADC12EN ADC12EN
#define RCC_AHB1ENR_0_ETH1MACEN ETH1MACEN
#define RCC_AHB1ENR_0_ETH1TXEN ETH1TXEN
#define RCC_AHB1ENR_0_ETH1RXEN ETH1RXEN
#define RCC_AHB2ENR_0_CAMITFEN CAMITFEN
#define RCC_AHB2ENR_0_CRYPTEN CRYPTEN
#define RCC_AHB2ENR_0_SDMMC2EN SDMMC2EN
#define RCC_AHB2ENR_0_SRAM1EN SRAM1EN
#define RCC_AHB2ENR_0_SRAM2EN SRAM2EN
#define RCC_AHB2ENR_0_SRAM3EN SRAM3EN
#define RCC_AHB4ENR
#define RCC_APB3ENR
#define RCC_APB1LENR
#define RCC_APB1HENR
#define RCC_APB2ENR_0_SAI3EN SAI3EN
#define RCC_APB2ENR_0_DFSDM1EN DFSDM1EN
#define RCC_APB2ENR_0_HRTIMEN HRTIMEN
#define RCC_APB4ENR
#define RCC_AHB3LPENR_0
#define RCC_AHB1LPENR_0_DMA1LPEN DMA1LPEN
#define RCC_AHB1LPENR_0_DMA2LPEN DMA2LPEN
#define RCC_AHB1LPENR_0_ADC12LPEN ADC12LPEN
#define RCC_AHB1LPENR_0_ETH1MACLPEN ETH1MACLPEN
#define RCC_AHB1LPENR_0_ETH1TXLPEN ETH1TXLPEN
#define RCC_AHB1LPENR_0_ETH1RXLPEN ETH1RXLPEN
#define RCC_AHB2LPENR_0_CAMITFLPEN CAMITFLPEN
#define RCC_AHB2LPENR_0_CRYPTLPEN CRYPTLPEN
#define RCC_AHB2LPENR_0_SDMMC2LPEN SDMMC2LPEN
#define RCC_AHB2LPENR_0_SRAM1LPEN SRAM1LPEN
#define RCC_AHB2LPENR_0_SRAM2LPEN SRAM2LPEN
#define RCC_AHB2LPENR_0_SRAM3LPEN SRAM3LPEN
#define RCC_AHB4LPENR
#define RCC_APB3LPENR
#define RCC_APB1LLPENR
#define RCC_APB1HLPENR
#define RCC_APB2LPENR_0_TIM15LPEN TIM15LPEN
#define RCC_APB2LPENR_0_TIM16LPEN TIM16LPEN
#define RCC_APB2LPENR_0_TIM17LPEN TIM17LPEN
#define RCC_APB2LPENR_0_SAI3LPEN SAI3LPEN
#define RCC_APB2LPENR_0_DFSDM1LPEN DFSDM1LPEN
#define RCC_APB2LPENR_0_HRTIMLPEN HRTIMLPEN
#define RCC_APB4LPENR
#define RCC_MAP1_CFGR CFGR_t CFGR
#define RCC_MAP1_D1CFGR D1CFGR_t D1CFGR
#define RCC_MAP1_D2CFGR D2CFGR_t D2CFGR
#define RCC_MAP1_D3CFGR D3CFGR_t D3CFGR
#define RCC_MAP1_PLLCKSELR PLLCKSELR_t PLLCKSELR
#define RCC_MAP1_PLLCFGR PLLCFGR_t PLLCFGR
#define RCC_MAP1_PLL1DIVR PLLxDIVR_t PLL1DIVR
#define RCC_MAP1_PLL1FRACR PLL1FRACR_t PLL1FRACR
#define RCC_MAP1_PLL2DIVR PLLxDIVR_t PLL2DIVR
#define RCC_MAP1_PLL2FRACR PLL2FRACR_t PLL2FRACR
#define RCC_MAP1_PLL3DIVR PLL3DIVR_t PLL3DIVR
#define RCC_MAP1_PLL3FRACR PLL3FRACR_t PLL3FRACR
#define RCC_MAP1_D1CCIPR D1CCIPR_t D1CCIPR
#define RCC_MAP1_D2CCIP1R D2CCIP1R_t D2CCIP1R
#define RCC_MAP1_D2CCIP2R D2CCIP2R_t D2CCIP2R
#define RCC_MAP1_D3CCIPR D3CCIPR_t D3CCIPR
#define RCC_MAP1_CIER CIER_t CIER
#define RCC_MAP1_CIFR CIFR_t CIFR
#define RCC_MAP1_CICR CICR_t CICR
#define RCC_MAP1_AHB3RSTR AHB3RSTR_t AHB3RSTR
#define RCC_MAP1_AHB1RSTR AHB1RSTR_t AHB1RSTR
#define RCC_MAP1_AHB2RSTR AHB2RSTR_t AHB2RSTR
#define RCC_MAP1_AHB4RSTR AHB4RSTR_t AHB4RSTR
#define RCC_MAP1_APB3RSTR APB3RSTR_t APB3RSTR
#define RCC_MAP1_APB1LRSTR APB1LRSTR_t APB1LRSTR
#define RCC_MAP1_APB1HRSTR APB1HRSTR_t APB1HRSTR
#define RCC_MAP1_APB2RSTR APB2RSTR_t APB2RSTR
#define RCC_MAP1_APB4RSTR APB4RSTR_t APB4RSTR
#define RCC_MAP1_GCR GCR_t GCR
#define RCC_MAP1_D3AMR D3AMR_t D3AMR
#define RCC_MAP1_RSR xRSR_t RSR
#define RCC_MAP1_AHB1ENR AHB1ENR_t AHB1ENR
#define RCC_MAP1_AHB2ENR AHB2ENR_t AHB2ENR
#define RCC_MAP1_AHB4ENR AHB4ENR_t AHB4ENR
#define RCC_MAP1_APB3ENR APB3ENR_t APB3ENR
#define RCC_MAP1_APB1LENR APB1LENR_t APB1LENR
#define RCC_MAP1_APB1HENR APB1HENR_t APB1HENR
#define RCC_MAP1_APB2ENR APB2ENR_t APB2ENR
#define RCC_MAP1_APB4ENR APB4ENR_t APB4ENR
#define RCC_MAP1_AHB3LPENR AHB3LPENR_t AHB3LPENR
#define RCC_MAP1_AHB1LPENR AHB1LPENR_t AHB1LPENR
#define RCC_MAP1_AHB2LPENR AHB2LPENR_t AHB2LPENR
#define RCC_MAP1_AHB4LPENR AHB4LPENR_t AHB4LPENR
#define RCC_MAP1_APB3LPENR APB3LPENR_t APB3LPENR
#define RCC_MAP1_APB1LLPENR APB1LLPENR_t APB1LLPENR
#define RCC_MAP1_APB1HLPENR APB1HLPENR_t APB1HLPENR
#define RCC_MAP1_APB2LPENR APB2LPENR_t APB2LPENR
#define RCC_MAP1_APB4LPENR APB4LPENR_t APB4LPENR
#define RCC_MAP1_C1_RSR xRSR_t C1_RSR
#define RCC_MAP1_C1_AHB2ENR AHB2ENR_t C1_AHB2ENR
#define RCC_MAP1_C1_AHB4ENR AHB4ENR_t C1_AHB4ENR
#define RCC_MAP1_C1_APB3ENR APB3ENR_t C1_APB3ENR
#define RCC_MAP1_C1_APB1HENR APB1HENR_t C1_APB1HENR
#define RCC_MAP1_C1_APB2ENR APB2ENR_t C1_APB2ENR
#define RCC_MAP1_C1_APB4ENR APB4ENR_t C1_APB4ENR
#define RCC_MAP1_C1_AHB2LPENR AHB2LPENR_t C1_AHB2LPENR
#define RCC_MAP1_C1_AHB4LPENR AHB4LPENR_t C1_AHB4LPENR
#define RCC_MAP1_C1_APB3LPENR APB3LPENR_t C1_APB3LPENR
#define RCC_MAP1_C1_APB1LLPENR APB1LLPENR_t C1_APB1LLPENR
#define RCC_MAP1_C1_APB1HLPENR APB1HLPENR_t C1_APB1HLPENR
#define RCC_MAP1_C1_APB2LPENR APB2LPENR_t C1_APB2LPENR
#define RCC_MAP1_C1_APB4LPENR APB4LPENR_t C1_APB4LPENR
#else
#define RCC_BDCR_1_RTCSRC
#define RCC_CR_0_HSIKERON
#define RCC_CR_0_HSIRDY
#define RCC_CR_0_HSIDIV
#define RCC_CR_0_HSIDIVF
#define RCC_CR_0_CSION
#define RCC_CR_0_CSIRDY
#define RCC_CR_0_CSIKERON
#define RCC_CR_0_RC48ON
#define RCC_CR_0_RC48RDY
#define RCC_CR_0_D1CKRDY
#define RCC_CR_0_D2CKRDY
#define RCC_CR_0_PLL1ON
#define RCC_CR_0_PLL1RDY
#define RCC_CR_0_PLL2ON
#define RCC_CR_0_PLL2RDY
#define RCC_CR_0_PLL3ON
#define RCC_CR_0_PLL3RDY
#define RCC_CFGR_0_STOPWUCK
#define RCC_CFGR_0_STOPKERWUCK
#define RCC_CFGR_0_RTCPRE
#define RCC_CFGR_0_HRTIMSEL
#define RCC_CFGR_0_TIMPRE
#define RCC_CFGR_0_MCO1PRE
#define RCC_CFGR_0_MCO1SEL
#define RCC_CFGR_0_MCO2PRE
#define RCC_CFGR_0_MCO2SEL
#define RCC_PLLCFGR_0_PLL1FRACEN
#define RCC_PLLCFGR_0_PLL1VCOSEL
#define RCC_PLLCFGR_0_PLL1RGE
#define RCC_PLLCFGR_0_PLL2FRACEN
#define RCC_PLLCFGR_0_PLL2VCOSEL
#define RCC_PLLCFGR_0_PLL2RGE
#define RCC_PLLCFGR_0_PLL3FRACEN
#define RCC_PLLCFGR_0_PLL3VCOSEL
#define RCC_PLLCFGR_0_PLL3RGE
#define RCC_PLLCFGR_0_DIVP1EN
#define RCC_PLLCFGR_0_DIVQ1EN
#define RCC_PLLCFGR_0_DIVR1EN
#define RCC_PLLCFGR_0_DIVP2EN
#define RCC_PLLCFGR_0_DIVQ2EN
#define RCC_PLLCFGR_0_DIVR2EN
#define RCC_PLLCFGR_0_DIVP3EN
#define RCC_PLLCFGR_0_DIVQ3EN
#define RCC_PLLCFGR_0_DIVR3EN
#define RCC_CIER_0_HSIRDYIE
#define RCC_CIER_0_CSIRDYIE
#define RCC_CIER_0_RC48RDYIE
#define RCC_CIER_0_PLL1RDYIE
#define RCC_CIER_0_PLL2RDYIE
#define RCC_CIER_0_PLL3RDYIE
#define RCC_CIFR_0_HSIRDYF
#define RCC_CIFR_0_CSIRDY
#define RCC_CIFR_0_RC48RDYF
#define RCC_CIFR_0_PLL1RDYF
#define RCC_CIFR_0_PLL2RDYF
#define RCC_CIFR_0_PLL3RDYF
#define RCC_CIFR_0_HSECSSF
#define RCC_CICR_0_HSIRDYC
#define RCC_CICR_0_HSE_ready_Interrupt_Clear
#define RCC_CICR_0_RC48RDYC
#define RCC_CICR_0_PLL1RDYC
#define RCC_CICR_0_PLL2RDYC
#define RCC_CICR_0_PLL3RDYC
#define RCC_CICR_0_HSECSSC
#define RCC_AHB3RSTR_0_MDMARST
#define RCC_AHB3RSTR_0_DMA2DRST
#define RCC_AHB3RSTR_0_JPGDECRST
#define RCC_AHB3RSTR_0_FMCRST
#define RCC_AHB3RSTR_0_QSPIRST
#define RCC_AHB3RSTR_0_SDMMC1RST
#define RCC_AHB1RSTR_0_ADC12RST
#define RCC_AHB1RSTR_0_ETH1MACRST
#define RCC_AHB1RSTR_0_USB1OTGRST
#define RCC_AHB1RSTR_0_USB2OTGRST
#define RCC_AHB2RSTR_0_CAMITFRST
#define RCC_AHB2RSTR_0_CRYPTRST
#define RCC_AHB2RSTR_0_HASHRST
#define RCC_AHB2RSTR_0_SDMMC2RST
#define RCC_APB3RSTR_LTDCRST
#define RCC_APB2RSTR_0_SAI3RST
#define RCC_APB2RSTR_0_DFSDM1RST
#define RCC_APB2RSTR_0_HRTIMRST
#define RCC_AHB1ENR_0_ADC12EN
#define RCC_AHB1ENR_0_ETH1MACEN
#define RCC_AHB1ENR_0_ETH1TXEN
#define RCC_AHB1ENR_0_ETH1RXEN
#define RCC_AHB2ENR_0_CAMITFEN
#define RCC_AHB2ENR_0_CRYPTEN
#define RCC_AHB2ENR_0_SDMMC2EN
#define RCC_AHB2ENR_0_SRAM1EN
#define RCC_AHB2ENR_0_SRAM2EN
#define RCC_AHB2ENR_0_SRAM3EN
#define RCC_APB2ENR_0_SAI3EN
#define RCC_APB2ENR_0_DFSDM1EN
#define RCC_APB2ENR_0_HRTIMEN
#define RCC_AHB1LPENR_0_DMA1LPEN
#define RCC_AHB1LPENR_0_DMA2LPEN
#define RCC_AHB1LPENR_0_ADC12LPEN
#define RCC_AHB1LPENR_0_ETH1MACLPEN
#define RCC_AHB1LPENR_0_ETH1TXLPEN
#define RCC_AHB1LPENR_0_ETH1RXLPEN
#define RCC_AHB2LPENR_0_CAMITFLPEN
#define RCC_AHB2LPENR_0_CRYPTLPEN
#define RCC_AHB2LPENR_0_SDMMC2LPEN
#define RCC_AHB2LPENR_0_SRAM1LPEN
#define RCC_AHB2LPENR_0_SRAM2LPEN
#define RCC_AHB2LPENR_0_SRAM3LPEN
#define RCC_APB2LPENR_0_TIM15LPEN
#define RCC_APB2LPENR_0_TIM16LPEN
#define RCC_APB2LPENR_0_TIM17LPEN
#define RCC_APB2LPENR_0_SAI3LPEN
#define RCC_APB2LPENR_0_DFSDM1LPEN
#define RCC_APB2LPENR_0_HRTIMLPEN
#define RCC_MAP1_CFGR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_D1CFGR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_D2CFGR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_D3CFGR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_PLLCKSELR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_PLLCFGR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_PLL1DIVR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_PLL1FRACR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_PLL2DIVR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_PLL2FRACR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_PLL3DIVR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_PLL3FRACR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_D1CCIPR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_D2CCIP1R __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_D2CCIP2R __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_D3CCIPR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_CIER __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_CIFR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_CICR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_AHB3RSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_AHB1RSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_AHB2RSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_AHB4RSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_APB3RSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_APB1LRSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_APB1HRSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_APB2RSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_APB4RSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_GCR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_D3AMR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_RSR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_AHB1ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_AHB2ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_AHB4ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_APB3ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_APB1LENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_APB1HENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_APB2ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_APB4ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_AHB3LPENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_AHB1LPENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_AHB2LPENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_AHB4LPENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_APB3LPENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_APB1LLPENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_APB1HLPENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_APB2LPENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_APB4LPENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_C1_RSR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_C1_AHB2ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_C1_AHB4ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_C1_APB3ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_C1_APB1HENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_C1_APB2ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_C1_APB4ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_C1_AHB2LPENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_C1_AHB4LPENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_C1_APB3LPENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_C1_APB1LLPENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_C1_APB1HLPENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_C1_APB2LPENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_C1_APB4LPENR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32H7      )
#define RCC_BDCR_1_VSWRST VSWRST
#define RCC_CR_0_HSECSSON HSECSSON
#else
#define RCC_BDCR_1_VSWRST
#define RCC_CR_0_HSECSSON
#endif

#if	defined(STM32G4      ) || defined(STM32GB      )
#define RCC_BDCR_1_LSCCOEN LSCCOEN
#define RCC_CR_2_PLLSYSON PLLSYSON
#define RCC_CR_2_PLLSYSRDY PLLSYSRDY
#define RCC_CRRCR_3
#define RCC_CIER_1_RC48RDYIE RC48RDYIE
#define RCC_CIFR_2_RC48RDYF RC48RDYF
#define RCC_CICR_2_RC48RDYC RC48RDYC
#define RCC_AHB3RSTR_0_QUADSPI1RST QUADSPI1RST
#define RCC_AHB1RSTR_1_CORDICRST CORDICRST
#define RCC_AHB1RSTR_1_MATRIXRST MATRIXRST
#define RCC_AHB1RSTR_2_FLITFRST_ FLITFRST_
#define RCC_AHB2RSTR_0_DAC2RST DAC2RST
#define RCC_AHB2RSTR_0_DAC3RST DAC3RST
#define RCC_AHB2RSTR_0_DAC4RST DAC4RST
#define RCC_AHB2RSTR_1_ADC12RST ADC12RST
#define RCC_AHB2RSTR_1_ADC345RST_ ADC345RST_
#define RCC_AHB2RSTR_1_DAC1RST_ DAC1RST_
#define RCC_AHB2RSTR_1_CRYPTRST CRYPTRST
#define RCC_AHB2RSTR_2_RNGRST RNGRST
#define RCC_APB2RSTR_1_SPI4RST SPI4RST
#define RCC_APB2RSTR_1_TIM20RST TIM20RST
#define RCC_APB2RSTR_1_HRTIM1RST HRTIM1RST
#define RCC_AHB1ENR_1_CORDICEN CORDICEN
#define RCC_AHB1ENR_1_FMACEN FMACEN
#define RCC_AHB1ENR_2_FLITFEN FLITFEN
#define RCC_AHB2ENR_0_DAC2 DAC2
#define RCC_AHB2ENR_0_DAC3 DAC3
#define RCC_AHB2ENR_0_DAC4 DAC4
#define RCC_AHB2ENR_1_ADC12EN ADC12EN
#define RCC_AHB2ENR_1_ADC345EN ADC345EN
#define RCC_AHB2ENR_1_DAC1 DAC1
#define RCC_AHB2ENR_1_CRYPTEN CRYPTEN
#define RCC_AHB2ENR_2_RNGEN RNGEN
#define RCC_APB2ENR_1_SPI4EN SPI4EN
#define RCC_APB2ENR_1_HRTIMEREN HRTIMEREN
#define RCC_APB2ENR_2_TIM20EN TIM20EN
#define RCC_ICSCR_2_HSICAL0 HSICAL0
#define RCC_AHB3ENR_0_QUADSPI1EN QUADSPI1EN
#define RCC_APB1RSTR1_1_CRSRST CRSRST
#define RCC_APB1RSTR1_1_USBDRST USBDRST
#define RCC_APB1RSTR1_1_FDCANRST FDCANRST
#define RCC_APB1RSTR1_1_I2C3 I2C3
#define RCC_APB1RSTR2_USBPDRST USBPDRST
#define RCC_APB1ENR1_1_CRSEN CRSEN
#define RCC_APB1ENR1_1_USBDEN USBDEN
#define RCC_APB1ENR1_1_FDCANEN FDCANEN
#define RCC_APB1ENR1_1_I2C3 I2C3
#define RCC_APB1ENR2_USBPDEN USBPDEN
#define RCC_AHB1SMENR_0_CORDICSMEN CORDICSMEN
#define RCC_AHB1SMENR_0_FMACSMEN FMACSMEN
#define RCC_AHB2SMENR_0_DAC4SMEN DAC4SMEN
#define RCC_AHB2SMENR_0_CRYPTSMEN CRYPTSMEN
#define RCC_AHB2SMENR_1
#define RCC_AHB3SMENR_0_QUADSPI1SMEN QUADSPI1SMEN
#define RCC_APB1SMENR1_1_CRSSMEN CRSSMEN
#define RCC_APB1SMENR1_1_FDCANSMEN FDCANSMEN
#define RCC_APB1SMENR1_1_I2C3SMEN_3 I2C3SMEN_3
#define RCC_APB1SMENR2_USBPDSMEN USBPDSMEN
#define RCC_APB2SMENR_0_SPI4SMEN SPI4SMEN
#define RCC_APB2SMENR_0_TIM20SMEN TIM20SMEN
#define RCC_APB2SMENR_1_HRTIMERSMEN HRTIMERSMEN
#define RCC_CCIPR2_1_QUADSPISEL QUADSPISEL
#define RCC_PLLSYSCFGR_0_PLLSYSM PLLSYSM
#define RCC_PLLSYSCFGR_0_PLLSYSN PLLSYSN
#define RCC_PLLSYSCFGR_0_PLLSYSP PLLSYSP
#define RCC_PLLSYSCFGR_0_PLLSYSQEN PLLSYSQEN
#define RCC_PLLSYSCFGR_0_PLLSYSQ PLLSYSQ
#define RCC_PLLSYSCFGR_0_PLLSYSREN PLLSYSREN
#define RCC_PLLSYSCFGR_0_PLLSYSR PLLSYSR
#define RCC_PLLSYSCFGR_0_PLLSYSPDIV PLLSYSPDIV
#define RCC_CCIPR1
#define RCC_MAP4_CCIPR1 CCIPR1_t CCIPR1
#else
#define RCC_BDCR_1_LSCCOEN
#define RCC_CR_2_PLLSYSON
#define RCC_CR_2_PLLSYSRDY
#define RCC_CIER_1_RC48RDYIE
#define RCC_CIFR_2_RC48RDYF
#define RCC_CICR_2_RC48RDYC
#define RCC_AHB3RSTR_0_QUADSPI1RST
#define RCC_AHB1RSTR_1_CORDICRST
#define RCC_AHB1RSTR_1_MATRIXRST
#define RCC_AHB1RSTR_2_FLITFRST_
#define RCC_AHB2RSTR_0_DAC2RST
#define RCC_AHB2RSTR_0_DAC3RST
#define RCC_AHB2RSTR_0_DAC4RST
#define RCC_AHB2RSTR_1_ADC12RST
#define RCC_AHB2RSTR_1_ADC345RST_
#define RCC_AHB2RSTR_1_DAC1RST_
#define RCC_AHB2RSTR_1_CRYPTRST
#define RCC_AHB2RSTR_2_RNGRST
#define RCC_APB2RSTR_1_SPI4RST
#define RCC_APB2RSTR_1_TIM20RST
#define RCC_APB2RSTR_1_HRTIM1RST
#define RCC_AHB1ENR_1_CORDICEN
#define RCC_AHB1ENR_1_FMACEN
#define RCC_AHB1ENR_2_FLITFEN
#define RCC_AHB2ENR_0_DAC2
#define RCC_AHB2ENR_0_DAC3
#define RCC_AHB2ENR_0_DAC4
#define RCC_AHB2ENR_1_ADC12EN
#define RCC_AHB2ENR_1_ADC345EN
#define RCC_AHB2ENR_1_DAC1
#define RCC_AHB2ENR_1_CRYPTEN
#define RCC_AHB2ENR_2_RNGEN
#define RCC_APB2ENR_1_SPI4EN
#define RCC_APB2ENR_1_HRTIMEREN
#define RCC_APB2ENR_2_TIM20EN
#define RCC_ICSCR_2_HSICAL0
#define RCC_AHB3ENR_0_QUADSPI1EN
#define RCC_APB1RSTR1_1_CRSRST
#define RCC_APB1RSTR1_1_USBDRST
#define RCC_APB1RSTR1_1_FDCANRST
#define RCC_APB1RSTR1_1_I2C3
#define RCC_APB1RSTR2_USBPDRST
#define RCC_APB1ENR1_1_CRSEN
#define RCC_APB1ENR1_1_USBDEN
#define RCC_APB1ENR1_1_FDCANEN
#define RCC_APB1ENR1_1_I2C3
#define RCC_APB1ENR2_USBPDEN
#define RCC_AHB1SMENR_0_CORDICSMEN
#define RCC_AHB1SMENR_0_FMACSMEN
#define RCC_AHB2SMENR_0_DAC4SMEN
#define RCC_AHB2SMENR_0_CRYPTSMEN
#define RCC_AHB3SMENR_0_QUADSPI1SMEN
#define RCC_APB1SMENR1_1_CRSSMEN
#define RCC_APB1SMENR1_1_FDCANSMEN
#define RCC_APB1SMENR1_1_I2C3SMEN_3
#define RCC_APB1SMENR2_USBPDSMEN
#define RCC_APB2SMENR_0_SPI4SMEN
#define RCC_APB2SMENR_0_TIM20SMEN
#define RCC_APB2SMENR_1_HRTIMERSMEN
#define RCC_CCIPR2_1_QUADSPISEL
#define RCC_PLLSYSCFGR_0_PLLSYSM
#define RCC_PLLSYSCFGR_0_PLLSYSN
#define RCC_PLLSYSCFGR_0_PLLSYSP
#define RCC_PLLSYSCFGR_0_PLLSYSQEN
#define RCC_PLLSYSCFGR_0_PLLSYSQ
#define RCC_PLLSYSCFGR_0_PLLSYSREN
#define RCC_PLLSYSCFGR_0_PLLSYSR
#define RCC_PLLSYSCFGR_0_PLLSYSPDIV
#define RCC_MAP4_CCIPR1 __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F4      ) || defined(STM32F7      ) || \
    defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L4      ) || defined(STM32WB      )
#define RCC_BDCR_2
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || \
    defined(STM32L4      ) || defined(STM32WB      ) || defined(STM32F446xx  )
#define RCC_BDCR_2_RTCSEL RTCSEL
#else
#define RCC_BDCR_2_RTCSEL
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F4      ) || defined(STM32F7      ) || \
    defined(STM32G0      ) || defined(STM32L4      ) || defined(STM32WB      )
#define RCC_BDCR_2_BDRST BDRST
#define RCC_CR_1_CSSON CSSON
#else
#define RCC_BDCR_2_BDRST
#define RCC_CR_1_CSSON
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32F401xC  ) || defined(STM32F401xE  ) || defined(STM32F405xx  ) || \
    defined(STM32F407xx  ) || defined(STM32F410Cx  ) || defined(STM32F410Rx  ) || defined(STM32F410Tx  ) || defined(STM32F411xE  ) || \
    defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || \
    defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || \
    defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_BDCR_3
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F4      ) || defined(STM32F7      ) || \
    defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32H7      ) || defined(STM32L0      ) || \
    defined(STM32L1      ) || defined(STM32L4      ) || defined(STM32WB      )
#define RCC_CR
#define RCC_CFGR
#define RCC_CSR
#define RCC_MAP1
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F4      ) || defined(STM32F7      ) || \
    defined(STM32H7      ) || defined(STM32L1      )
#define RCC_CR_0_HSION HSION
#else
#define RCC_CR_0_HSION
#endif

#if	defined(STM32L4      ) || defined(STM32WB      )
#define RCC_CR_0_HSIASFS HSIASFS
#define RCC_CR_1_MSION MSION
#define RCC_CR_1_MSIRDY MSIRDY
#define RCC_CR_1_MSIPLLEN MSIPLLEN
#define RCC_CR_1_MSIRANGE MSIRANGE
#define RCC_PLLCFGR_1_PLLSRC PLLSRC
#define RCC_PLLCFGR_1_PLLN PLLN
#define RCC_PLLCFGR_1_PLLPEN PLLPEN
#define RCC_CIER_1_MSIRDYIE MSIRDYIE
#define RCC_CIER_1_PLLRDYIE PLLRDYIE
#define RCC_CIFR_1_MSIRDYF MSIRDYF
#define RCC_CIFR_1_PLLRDYF PLLRDYF
#define RCC_CICR_1_MSIRDYC MSIRDYC
#define RCC_CICR_1_PLLRDYC PLLRDYC
#define RCC_AHB1RSTR_0_TSCRST TSCRST
#define RCC_AHB2RSTR_0_GPIOHRST GPIOHRST
#define RCC_AHB2RSTR_0_ADCRST ADCRST
#define RCC_AHB1ENR_1_TSCEN TSCEN
#define RCC_AHB2ENR_0_GPIOHEN GPIOHEN
#define RCC_AHB2ENR_0_ADCEN ADCEN
#define RCC_ICSCR_1_MSICAL MSICAL
#define RCC_ICSCR_1_MSITRIM MSITRIM
#define RCC_ICSCR_1_HSICAL HSICAL
#define RCC_APB1RSTR1_0_I2C3RST I2C3RST
#define RCC_APB1RSTR2_LPTIM2RST LPTIM2RST
#define RCC_APB1ENR1_0_I2C3EN I2C3EN
#define RCC_APB1ENR2_LPTIM2EN LPTIM2EN
#define RCC_AHB1SMENR_0_TSCSMEN TSCSMEN
#define RCC_AHB2SMENR_0_GPIOHSMEN GPIOHSMEN
#define RCC_AHB2SMENR_0_ADCFSSMEN ADCFSSMEN
#define RCC_APB1SMENR2_LPTIM2SMEN LPTIM2SMEN
#define RCC_CCIPR_0_I2C3SEL I2C3SEL
#define RCC_CCIPR_0_CLK48SEL CLK48SEL
#define RCC_CCIPR_0_ADCSEL ADCSEL
#define RCC_MAP2_PLLCFGR PLLCFGR_t PLLCFGR
#define RCC_MAP2_CCIPR CCIPR_t CCIPR
#else
#define RCC_CR_0_HSIASFS
#define RCC_CR_1_MSION
#define RCC_CR_1_MSIRDY
#define RCC_CR_1_MSIPLLEN
#define RCC_CR_1_MSIRANGE
#define RCC_PLLCFGR_1_PLLSRC
#define RCC_PLLCFGR_1_PLLN
#define RCC_PLLCFGR_1_PLLPEN
#define RCC_CIER_1_MSIRDYIE
#define RCC_CIER_1_PLLRDYIE
#define RCC_CIFR_1_MSIRDYF
#define RCC_CIFR_1_PLLRDYF
#define RCC_CICR_1_MSIRDYC
#define RCC_CICR_1_PLLRDYC
#define RCC_AHB1RSTR_0_TSCRST
#define RCC_AHB2RSTR_0_GPIOHRST
#define RCC_AHB2RSTR_0_ADCRST
#define RCC_AHB1ENR_1_TSCEN
#define RCC_AHB2ENR_0_GPIOHEN
#define RCC_AHB2ENR_0_ADCEN
#define RCC_ICSCR_1_MSICAL
#define RCC_ICSCR_1_MSITRIM
#define RCC_ICSCR_1_HSICAL
#define RCC_APB1RSTR1_0_I2C3RST
#define RCC_APB1RSTR2_LPTIM2RST
#define RCC_APB1ENR1_0_I2C3EN
#define RCC_APB1ENR2_LPTIM2EN
#define RCC_AHB1SMENR_0_TSCSMEN
#define RCC_AHB2SMENR_0_GPIOHSMEN
#define RCC_AHB2SMENR_0_ADCFSSMEN
#define RCC_APB1SMENR2_LPTIM2SMEN
#define RCC_CCIPR_0_I2C3SEL
#define RCC_CCIPR_0_CLK48SEL
#define RCC_CCIPR_0_ADCSEL
#define RCC_MAP2_PLLCFGR __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_CCIPR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32L1      )
#define RCC_CR_0_RTCPRE1 RTCPRE1
#define RCC_CR_3_CSSON CSSON
#define RCC_CR_3_RTCPRE0 RTCPRE0
#define RCC_CSR_1_RTCEN RTCEN
#define RCC_CSR_1_RTCRST RTCRST
#define RCC_APB2RSTR_0_TM10RST TM10RST
#define RCC_APB2RSTR_0_ADC1RST ADC1RST
#define RCC_APB2RSTR_1_TM11RST TM11RST
#define RCC_APB2RSTR_2_TIM9RST TIM9RST
#define RCC_APB2ENR_0_TIM10EN TIM10EN
#define RCC_APB2ENR_2_TIM9EN TIM9EN
#define RCC_APB2ENR_2_TIM11EN TIM11EN
#define RCC_APB2ENR_2_ADC1EN ADC1EN
#define RCC_APB2LPENR_0_TIM9LPEN TIM9LPEN
#define RCC_APB2LPENR_0_TIM10LPEN TIM10LPEN
#define RCC_APB2LPENR_1_SYSCFGLPEN SYSCFGLPEN
#define RCC_APB2LPENR_1_ADC1LPEN ADC1LPEN
#define RCC_APB2LPENR_1_USART1LPEN USART1LPEN
#define RCC_APB2LPENR_2
#define RCC_ICSCR_4
#define RCC_CIR_2
#define RCC_APB1RSTR_2_COMPRST COMPRST
#define RCC_APB1ENR_3_COMPEN COMPEN
#define RCC_APB1LPENR_1_USBLPEN USBLPEN
#define RCC_APB1LPENR_1_COMPLPEN COMPLPEN
#define RCC_APB1LPENR_2
#define RCC_AHBENR_0_GPIODEN GPIODEN
#define RCC_AHBENR_1_FLITFEN FLITFEN
#define RCC_AHBENR_2_GPIOAEN GPIOAEN
#define RCC_AHBENR_2_GPIOBEN GPIOBEN
#define RCC_AHBENR_2_GPIOCEN GPIOCEN
#define RCC_AHBRSTR_0_GPIOBRST GPIOBRST
#define RCC_AHBRSTR_0_GPIOCRST GPIOCRST
#define RCC_AHBRSTR_0_GPIODRST GPIODRST
#define RCC_AHBRSTR_0_FLITFRST FLITFRST
#define RCC_AHBRSTR_1_GPIOARST GPIOARST
#define RCC_AHBLPENR
#define RCC_MAP1_APB1ENR APB1ENR_t APB1ENR
#define RCC_MAP3_AHBENR AHBENR_t AHBENR
#define RCC_MAP4_AHBRSTR AHBRSTR_t AHBRSTR
#define RCC_MAP4_APB2RSTR APB2RSTR_t APB2RSTR
#define RCC_MAP4_APB1RSTR APB1RSTR_t APB1RSTR
#define RCC_MAP4_APB2ENR APB2ENR_t APB2ENR
#define RCC_MAP4_AHBLPENR AHBLPENR_t AHBLPENR
#define RCC_MAP7
#else
#define RCC_CR_0_RTCPRE1
#define RCC_CR_3_CSSON
#define RCC_CR_3_RTCPRE0
#define RCC_CSR_1_RTCEN
#define RCC_CSR_1_RTCRST
#define RCC_APB2RSTR_0_TM10RST
#define RCC_APB2RSTR_0_ADC1RST
#define RCC_APB2RSTR_1_TM11RST
#define RCC_APB2RSTR_2_TIM9RST
#define RCC_APB2ENR_0_TIM10EN
#define RCC_APB2ENR_2_TIM9EN
#define RCC_APB2ENR_2_TIM11EN
#define RCC_APB2ENR_2_ADC1EN
#define RCC_APB2LPENR_0_TIM9LPEN
#define RCC_APB2LPENR_0_TIM10LPEN
#define RCC_APB2LPENR_1_SYSCFGLPEN
#define RCC_APB2LPENR_1_ADC1LPEN
#define RCC_APB2LPENR_1_USART1LPEN
#define RCC_APB1RSTR_2_COMPRST
#define RCC_APB1ENR_3_COMPEN
#define RCC_APB1LPENR_1_USBLPEN
#define RCC_APB1LPENR_1_COMPLPEN
#define RCC_AHBENR_0_GPIODEN
#define RCC_AHBENR_1_FLITFEN
#define RCC_AHBENR_2_GPIOAEN
#define RCC_AHBENR_2_GPIOBEN
#define RCC_AHBENR_2_GPIOCEN
#define RCC_AHBRSTR_0_GPIOBRST
#define RCC_AHBRSTR_0_GPIOCRST
#define RCC_AHBRSTR_0_GPIODRST
#define RCC_AHBRSTR_0_FLITFRST
#define RCC_AHBRSTR_1_GPIOARST
#define RCC_MAP1_APB1ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP3_AHBENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP4_AHBRSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP4_APB2RSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP4_APB1RSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP4_APB2ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP4_AHBLPENR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F4      ) || defined(STM32F7      ) || \
    defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L0      ) || defined(STM32L1      ) || \
    defined(STM32L4      ) || defined(STM32WB      )
#define RCC_CR_1
#define RCC_CFGR_1
#define RCC_CSR_0_SFTRSTF SFTRSTF
#define RCC_CSR_0_WWDGRSTF WWDGRSTF
#else
#define RCC_CSR_0_SFTRSTF
#define RCC_CSR_0_WWDGRSTF
#endif

#if	defined(STM32L4      )
#define RCC_CR_1_MSIRGSEL MSIRGSEL
#define RCC_PLLCFGR_0_PLLR PLLR
#define RCC_PLLCFGR_1_PLLP PLLP
#define RCC_PLLCFGR_1_PLLQEN PLLQEN
#define RCC_PLLCFGR_1_PLLQ PLLQ
#define RCC_PLLCFGR_1_PLLREN PLLREN
#define RCC_CSR_0_MSISRANGE MSISRANGE
#define RCC_AHB1RSTR_0_FLASHRST FLASHRST
#define RCC_AHB2RSTR_1_RNGRST RNGRST
#define RCC_AHB1ENR_0_FLASHEN FLASHEN
#define RCC_AHB2ENR_1_RNGEN RNGEN
#define RCC_APB1RSTR1_0_OPAMPRST OPAMPRST
#define RCC_APB1ENR1_0_OPAMPEN OPAMPEN
#define RCC_AHB2SMENR_0_RNGSMEN RNGSMEN
#define RCC_APB1SMENR1_0_OPAMPSMEN OPAMPSMEN
#define RCC_CCIPR_0_USART3SEL USART3SEL
#define RCC_CCIPR_0_I2C2SEL I2C2SEL
#else
#define RCC_CR_1_MSIRGSEL
#define RCC_PLLCFGR_0_PLLR
#define RCC_PLLCFGR_1_PLLP
#define RCC_PLLCFGR_1_PLLQEN
#define RCC_PLLCFGR_1_PLLQ
#define RCC_PLLCFGR_1_PLLREN
#define RCC_CSR_0_MSISRANGE
#define RCC_AHB1RSTR_0_FLASHRST
#define RCC_AHB2RSTR_1_RNGRST
#define RCC_AHB1ENR_0_FLASHEN
#define RCC_AHB2ENR_1_RNGEN
#define RCC_APB1RSTR1_0_OPAMPRST
#define RCC_APB1ENR1_0_OPAMPEN
#define RCC_AHB2SMENR_0_RNGSMEN
#define RCC_APB1SMENR1_0_OPAMPSMEN
#define RCC_CCIPR_0_USART3SEL
#define RCC_CCIPR_0_I2C2SEL
#endif

#if	defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L4      ) || defined(STM32WB      )
#define RCC_CR_1_HSION HSION
#define RCC_CR_1_HSIKERON HSIKERON
#define RCC_CR_1_HSIRDY HSIRDY
#define RCC_CIER_1
#define RCC_CIFR_1
#define RCC_CICR_1
#define RCC_MAP2_CIER CIER_t CIER
#define RCC_MAP2_CIFR CIFR_t CIFR
#define RCC_MAP2_CICR CICR_t CICR
#else
#define RCC_CR_1_HSION
#define RCC_CR_1_HSIKERON
#define RCC_CR_1_HSIRDY
#define RCC_MAP2_CIER __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_CIFR __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_CICR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32L0      )
#define RCC_CR_1_RTCPRE RTCPRE
#define RCC_CR_2_HSI16ON HSI16ON
#define RCC_CR_2_HSI16RDYF HSI16RDYF
#define RCC_CR_2_CSSLSEON CSSLSEON
#define RCC_CR_3_HSI16KERON HSI16KERON
#define RCC_CR_3_HSI16DIVEN HSI16DIVEN
#define RCC_CR_3_HSI16DIVF HSI16DIVF
#define RCC_CIER_2_HSI16RDYIE HSI16RDYIE
#define RCC_CIER_2_PLLRDYIE PLLRDYIE
#define RCC_CIER_2_CSSLSE CSSLSE
#define RCC_CIER_3
#define RCC_CIFR_2_HSI16RDYF HSI16RDYF
#define RCC_CIFR_2_PLLRDYF PLLRDYF
#define RCC_CIFR_2_CSSLSEF CSSLSEF
#define RCC_CIFR_3
#define RCC_CICR_2_HSI16RDYC HSI16RDYC
#define RCC_CICR_2_PLLRDYC PLLRDYC
#define RCC_CICR_2_CSSLSEC CSSLSEC
#define RCC_CICR_3
#define RCC_CSR_0_CSSLSEON CSSLSEON
#define RCC_CSR_0_RTCEN RTCEN
#define RCC_CSR_0_RTCRST RTCRST
#define RCC_CSR_1_CSSLSED CSSLSED
#define RCC_CSR_2_LSEDRV LSEDRV
#define RCC_APB2RSTR_0_TIM21RST TIM21RST
#define RCC_APB2RSTR_3_DBGRST DBGRST
#define RCC_APB2ENR_0_TIM21EN TIM21EN
#define RCC_APB2ENR_1_TIM22EN TIM22EN
#define RCC_APB2ENR_3_DBGEN DBGEN
#define RCC_ICSCR_2_HSI16TRIM HSI16TRIM
#define RCC_ICSCR_3_HSI16CAL HSI16CAL
#define RCC_APB2SMENR_0_TIM21SMEN TIM21SMEN
#define RCC_APB2SMENR_0_TIM22SMEN TIM22SMEN
#define RCC_APB2SMENR_0_ADCSMEN ADCSMEN
#define RCC_APB2SMENR_1_DBGSMEN DBGSMEN
#define RCC_CCIPR_1_USART1SEL0 USART1SEL0
#define RCC_CCIPR_1_USART1SEL1 USART1SEL1
#define RCC_CCIPR_1_USART2SEL0 USART2SEL0
#define RCC_CCIPR_1_USART2SEL1 USART2SEL1
#define RCC_CCIPR_1_LPUART1SEL0 LPUART1SEL0
#define RCC_CCIPR_1_LPUART1SEL1 LPUART1SEL1
#define RCC_CCIPR_1_I2C1SEL0 I2C1SEL0
#define RCC_CCIPR_1_I2C1SEL1 I2C1SEL1
#define RCC_CCIPR_1_LPTIM1SEL0 LPTIM1SEL0
#define RCC_CCIPR_1_LPTIM1SEL1 LPTIM1SEL1
#define RCC_APB1RSTR_1_LPTIM1RST LPTIM1RST
#define RCC_APB1RSTR_2_LPUART1RST LPUART1RST
#define RCC_APB1ENR_1_LPUART1EN LPUART1EN
#define RCC_APB1ENR_2_LPTIM1EN LPTIM1EN
#define RCC_AHBENR_1_MIFEN MIFEN
#define RCC_AHBENR_1_CRYPEN CRYPEN
#define RCC_AHBRSTR_1_MIFRST MIFRST
#define RCC_AHBRSTR_1_CRYPRST CRYPRST
#define RCC_IOPRSTR_IOPHRST IOPHRST
#define RCC_IOPENR_0_IOPHEN IOPHEN
#define RCC_IOPENR_1_GPIOHEN GPIOHEN
#define RCC_AHBSMENR_1
#define RCC_IOPSMEN
#define RCC_APB1SMENR
#define RCC_MAP6
#else
#define RCC_CR_1_RTCPRE
#define RCC_CR_2_HSI16ON
#define RCC_CR_2_HSI16RDYF
#define RCC_CR_2_CSSLSEON
#define RCC_CR_3_HSI16KERON
#define RCC_CR_3_HSI16DIVEN
#define RCC_CR_3_HSI16DIVF
#define RCC_CIER_2_HSI16RDYIE
#define RCC_CIER_2_PLLRDYIE
#define RCC_CIER_2_CSSLSE
#define RCC_CIFR_2_HSI16RDYF
#define RCC_CIFR_2_PLLRDYF
#define RCC_CIFR_2_CSSLSEF
#define RCC_CICR_2_HSI16RDYC
#define RCC_CICR_2_PLLRDYC
#define RCC_CICR_2_CSSLSEC
#define RCC_CSR_0_CSSLSEON
#define RCC_CSR_0_RTCEN
#define RCC_CSR_0_RTCRST
#define RCC_CSR_1_CSSLSED
#define RCC_CSR_2_LSEDRV
#define RCC_APB2RSTR_0_TIM21RST
#define RCC_APB2RSTR_3_DBGRST
#define RCC_APB2ENR_0_TIM21EN
#define RCC_APB2ENR_1_TIM22EN
#define RCC_APB2ENR_3_DBGEN
#define RCC_ICSCR_2_HSI16TRIM
#define RCC_ICSCR_3_HSI16CAL
#define RCC_APB2SMENR_0_TIM21SMEN
#define RCC_APB2SMENR_0_TIM22SMEN
#define RCC_APB2SMENR_0_ADCSMEN
#define RCC_APB2SMENR_1_DBGSMEN
#define RCC_CCIPR_1_USART1SEL0
#define RCC_CCIPR_1_USART1SEL1
#define RCC_CCIPR_1_USART2SEL0
#define RCC_CCIPR_1_USART2SEL1
#define RCC_CCIPR_1_LPUART1SEL0
#define RCC_CCIPR_1_LPUART1SEL1
#define RCC_CCIPR_1_I2C1SEL0
#define RCC_CCIPR_1_I2C1SEL1
#define RCC_CCIPR_1_LPTIM1SEL0
#define RCC_CCIPR_1_LPTIM1SEL1
#define RCC_APB1RSTR_1_LPTIM1RST
#define RCC_APB1RSTR_2_LPUART1RST
#define RCC_APB1ENR_1_LPUART1EN
#define RCC_APB1ENR_2_LPTIM1EN
#define RCC_AHBENR_1_MIFEN
#define RCC_AHBENR_1_CRYPEN
#define RCC_AHBRSTR_1_MIFRST
#define RCC_AHBRSTR_1_CRYPRST
#define RCC_IOPRSTR_IOPHRST
#define RCC_IOPENR_0_IOPHEN
#define RCC_IOPENR_1_GPIOHEN
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F4      ) || defined(STM32F7      ) || \
    defined(STM32G0      ) || defined(STM32L0      ) || defined(STM32L1      ) || defined(STM32L4      ) || defined(STM32WB      )
#define RCC_CR_1_PLLON PLLON
#define RCC_CR_1_PLLRDY PLLRDY
#else
#define RCC_CR_1_PLLON
#define RCC_CR_1_PLLRDY
#endif

#if	defined(STM32WB      ) || defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L433xx  ) || defined(STM32L442xx  ) || \
    defined(STM32L443xx  ) || defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  ) || \
    defined(STM32L475xx  ) || defined(STM32L476xx  ) || defined(STM32L485xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || \
    defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || \
    defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_CR_1_PLLSAI1ON PLLSAI1ON
#define RCC_CR_1_PLLSAI1RDY PLLSAI1RDY
#define RCC_CIER_1_PLLSAI1RDYIE PLLSAI1RDYIE
#define RCC_CIFR_1_PLLSAI1RDYF PLLSAI1RDYF
#define RCC_CICR_1_PLLSAI1RDYC PLLSAI1RDYC
#define RCC_PLLSAI1CFGR
#define RCC_CCIPR_0_SAI1SEL SAI1SEL
#define RCC_MAP2_PLLSAI1CFGR PLLSAI1CFGR_t PLLSAI1CFGR
#else
#define RCC_CR_1_PLLSAI1ON
#define RCC_CR_1_PLLSAI1RDY
#define RCC_CIER_1_PLLSAI1RDYIE
#define RCC_CIFR_1_PLLSAI1RDYF
#define RCC_CICR_1_PLLSAI1RDYC
#define RCC_CCIPR_0_SAI1SEL
#define RCC_MAP2_PLLSAI1CFGR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32L475xx  ) || defined(STM32L476xx  ) || defined(STM32L485xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || \
    defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || \
    defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_CR_1_PLLSAI2ON PLLSAI2ON
#define RCC_CR_1_PLLSAI2RDY PLLSAI2RDY
#define RCC_CIER_1_PLLSAI2RDYIE PLLSAI2RDYIE
#define RCC_CIFR_1_PLLSAI2RDYF PLLSAI2RDYF
#define RCC_CICR_1_PLLSAI2RDYC PLLSAI2RDYC
#define RCC_AHB2RSTR_0_OTGFSRST OTGFSRST
#define RCC_APB2RSTR_1_SAI2RST SAI2RST
#define RCC_AHB2ENR_0_OTGFSEN OTGFSEN
#define RCC_APB2ENR_1_SAI2EN SAI2EN
#define RCC_PLLSAI2CFGR
#define RCC_AHB2SMENR_0_OTGFSSMEN OTGFSSMEN
#define RCC_APB2SMENR_0_SAI2SMEN SAI2SMEN
#define RCC_CCIPR_0_UART4SEL UART4SEL
#define RCC_CCIPR_0_UART5SEL UART5SEL
#define RCC_CCIPR_0_SAI2SEL SAI2SEL
#define RCC_MAP2_PLLSAI2CFGR PLLSAI2CFGR_t PLLSAI2CFGR
#else
#define RCC_CR_1_PLLSAI2ON
#define RCC_CR_1_PLLSAI2RDY
#define RCC_CIER_1_PLLSAI2RDYIE
#define RCC_CIFR_1_PLLSAI2RDYF
#define RCC_CICR_1_PLLSAI2RDYC
#define RCC_AHB2RSTR_0_OTGFSRST
#define RCC_APB2RSTR_1_SAI2RST
#define RCC_AHB2ENR_0_OTGFSEN
#define RCC_APB2ENR_1_SAI2EN
#define RCC_AHB2SMENR_0_OTGFSSMEN
#define RCC_APB2SMENR_0_SAI2SMEN
#define RCC_CCIPR_0_UART4SEL
#define RCC_CCIPR_0_UART5SEL
#define RCC_CCIPR_0_SAI2SEL
#define RCC_MAP2_PLLSAI2CFGR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F4      ) || defined(STM32F7      ) || \
    defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L0      ) || defined(STM32L1      )
#define RCC_CR_2
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F4      ) || defined(STM32F7      ) || \
    defined(STM32L1      )
#define RCC_CR_2_HSIRDY HSIRDY
#define RCC_CIR
#else
#define RCC_CR_2_HSIRDY
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F4      ) || defined(STM32F7      )
#define RCC_CR_2_HSITRIM HSITRIM
#define RCC_CR_2_HSICAL HSICAL
#else
#define RCC_CR_2_HSITRIM
#define RCC_CR_2_HSICAL
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32F401xC  ) || defined(STM32F401xE  ) || defined(STM32F405xx  ) || \
    defined(STM32F407xx  ) || defined(STM32F411xE  ) || defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || \
    defined(STM32F412Zx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || \
    defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || \
    defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_CR_2_PLLI2SON PLLI2SON
#define RCC_CR_2_PLLI2SRDY PLLI2SRDY
#define RCC_AHB1RSTR_0_GPIODRST GPIODRST
#define RCC_AHB1RSTR_0_GPIOERST GPIOERST
#define RCC_AHB2RSTR_1_OTGFSRST OTGFSRST
#define RCC_APB2RSTR_1_TIM10RST TIM10RST
#define RCC_AHB1ENR_0_GPIODEN GPIODEN
#define RCC_AHB1ENR_0_GPIOEEN GPIOEEN
#define RCC_AHB2ENR_1_OTGFSEN OTGFSEN
#define RCC_APB2ENR_1_TIM10EN TIM10EN
#define RCC_AHB1LPENR_0_GPIODLPEN GPIODLPEN
#define RCC_AHB1LPENR_0_GPIOELPEN GPIOELPEN
#define RCC_AHB2LPENR_0_OTGFSLPEN OTGFSLPEN
#define RCC_APB2LPENR_1_TIM10LPEN TIM10LPEN
#define RCC_CIR_0_PLLI2SRDYF PLLI2SRDYF
#define RCC_CIR_0_PLLI2SRDYIE PLLI2SRDYIE
#define RCC_APB1RSTR_0_I2C3RST I2C3RST
#define RCC_APB1ENR_0_I2C3EN I2C3EN
#define RCC_APB1LPENR_0_SPI3LPEN SPI3LPEN
#define RCC_APB1LPENR_0_I2C3LPEN I2C3LPEN
#define RCC_PLLI2SCFGR
#define RCC_MAP3_AHB2RSTR AHB2RSTR_t AHB2RSTR
#define RCC_MAP3_AHB2ENR AHB2ENR_t AHB2ENR
#define RCC_MAP3_AHB2LPENR AHB2LPENR_t AHB2LPENR
#define RCC_MAP3_PLLI2SCFGR PLLI2SCFGR_t PLLI2SCFGR
#else
#define RCC_CR_2_PLLI2SON
#define RCC_CR_2_PLLI2SRDY
#define RCC_AHB1RSTR_0_GPIODRST
#define RCC_AHB1RSTR_0_GPIOERST
#define RCC_AHB2RSTR_1_OTGFSRST
#define RCC_APB2RSTR_1_TIM10RST
#define RCC_AHB1ENR_0_GPIODEN
#define RCC_AHB1ENR_0_GPIOEEN
#define RCC_AHB2ENR_1_OTGFSEN
#define RCC_APB2ENR_1_TIM10EN
#define RCC_AHB1LPENR_0_GPIODLPEN
#define RCC_AHB1LPENR_0_GPIOELPEN
#define RCC_AHB2LPENR_0_OTGFSLPEN
#define RCC_APB2LPENR_1_TIM10LPEN
#define RCC_CIR_0_PLLI2SRDYF
#define RCC_CIR_0_PLLI2SRDYIE
#define RCC_APB1RSTR_0_I2C3RST
#define RCC_APB1ENR_0_I2C3EN
#define RCC_APB1LPENR_0_SPI3LPEN
#define RCC_APB1LPENR_0_I2C3LPEN
#define RCC_MAP3_AHB2RSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP3_AHB2ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP3_AHB2LPENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP3_PLLI2SCFGR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32F469xx  ) || defined(STM32F479xx  ) || defined(STM32F722xx  ) || defined(STM32F723xx  ) || defined(STM32F730xx  ) || \
    defined(STM32F732xx  ) || defined(STM32F733xx  )
#define RCC_CR_2_PLLSAION PLLSAION
#define RCC_CR_2_PLLSAIRDY PLLSAIRDY
#else
#define RCC_CR_2_PLLSAION
#define RCC_CR_2_PLLSAIRDY
#endif

#if	defined(STM32G0      ) || defined(STM32L0      ) || defined(STM32L1      )
#define RCC_CR_3
#define RCC_ICSCR_3
#define RCC_AHBENR_1_CRCEN CRCEN
#define RCC_AHBRSTR_0_CRCRST CRCRST
#else
#define RCC_AHBENR_1_CRCEN
#define RCC_AHBRSTR_0_CRCRST
#endif

#if	defined(STM32L010x4  ) || defined(STM32L010x6  ) || defined(STM32L010x8  ) || defined(STM32L010xB  ) || defined(STM32L011xx  ) || \
    defined(STM32L021xx  ) || defined(STM32L031xx  ) || defined(STM32L041xx  ) || defined(STM32L071xx  ) || defined(STM32L081xx  )
#define RCC_CR_3_HSI16OUTEN HSI16OUTEN
#define RCC_CSR_1_LSIIWDGLP LSIIWDGLP
#define RCC_APB2RSTR_2_TIM22RST TIM22RST
#define RCC_CCIPR_1_I2C3SEL0 I2C3SEL0
#define RCC_CCIPR_1_I2C3SEL1 I2C3SEL1
#define RCC_APB1RSTR_3_CRCRST CRCRST
#define RCC_APB1RSTR_3_I2C3 I2C3
#define RCC_APB1ENR_1_TIM3EN TIM3EN
#define RCC_IOPRSTR_IOPERST IOPERST
#define RCC_IOPENR_0_IOPEEN IOPEEN
#define RCC_IOPENR_1_GPIOEEN GPIOEEN
#define RCC_AHBSMENR_1_CRYPTSMEN CRYPTSMEN
#define RCC_IOPSMEN_IOPESMEN IOPESMEN
#define RCC_APB1SMENR_TIM3SMEN TIM3SMEN
#define RCC_APB1SMENR_TIM7SMEN TIM7SMEN
#define RCC_APB1SMENR_USART4SMEN USART4SMEN
#define RCC_APB1SMENR_USART5SMEN USART5SMEN
#define RCC_APB1SMENR_I2C3SMEN I2C3SMEN
#else
#define RCC_CR_3_HSI16OUTEN
#define RCC_CSR_1_LSIIWDGLP
#define RCC_APB2RSTR_2_TIM22RST
#define RCC_CCIPR_1_I2C3SEL0
#define RCC_CCIPR_1_I2C3SEL1
#define RCC_APB1RSTR_3_CRCRST
#define RCC_APB1RSTR_3_I2C3
#define RCC_APB1ENR_1_TIM3EN
#define RCC_IOPRSTR_IOPERST
#define RCC_IOPENR_0_IOPEEN
#define RCC_IOPENR_1_GPIOEEN
#define RCC_AHBSMENR_1_CRYPTSMEN
#define RCC_IOPSMEN_IOPESMEN
#define RCC_APB1SMENR_TIM3SMEN
#define RCC_APB1SMENR_TIM7SMEN
#define RCC_APB1SMENR_USART4SMEN
#define RCC_APB1SMENR_USART5SMEN
#define RCC_APB1SMENR_I2C3SMEN
#endif

#if	defined(STM32L0      ) || defined(STM32L1      )
#define RCC_CR_3_MSION MSION
#define RCC_CR_3_MSIRDY MSIRDY
#define RCC_CFGR_5_PLLDIV PLLDIV
#define RCC_CSR_1_RTCSEL RTCSEL
#define RCC_CSR_2_LSEON LSEON
#define RCC_CSR_2_LSERDY LSERDY
#define RCC_CSR_2_LSEBYP LSEBYP
#define RCC_ICSCR_2_MSIRANGE MSIRANGE
#define RCC_ICSCR_3_MSICAL MSICAL
#define RCC_ICSCR_3_MSITRIM MSITRIM
#else
#define RCC_CR_3_MSION
#define RCC_CR_3_MSIRDY
#define RCC_CFGR_5_PLLDIV
#define RCC_CSR_1_RTCSEL
#define RCC_CSR_2_LSEON
#define RCC_CSR_2_LSERDY
#define RCC_CSR_2_LSEBYP
#define RCC_ICSCR_2_MSIRANGE
#define RCC_ICSCR_3_MSICAL
#define RCC_ICSCR_3_MSITRIM
#endif

#if	defined(STM32G0      )
#define RCC_CR_3_HSIDIV HSIDIV
#define RCC_CFGR_5_HPRE HPRE
#define RCC_CFGR_5_PPRE PPRE
#define RCC_CSR_2_PWRRSTF PWRRSTF
#define RCC_ICSCR_3_HSITRIM HSITRIM
#define RCC_CCIPR_1_I2S2SEL I2S2SEL
#define RCC_CCIPR_1_TIM1SEL TIM1SEL
#define RCC_CCIPR_1_RNGDIV RNGDIV
#define RCC_CCIPR_2
#define RCC_PLLSYSCFGR_1
#define RCC_AHBENR_0_FLASHEN FLASHEN
#define RCC_AHBENR_0_AESEN AESEN
#define RCC_AHBENR_2_RNGEN RNGEN
#define RCC_AHBRSTR_0_FLASHRST FLASHRST
#define RCC_AHBRSTR_0_AESRST AESRST
#define RCC_AHBRSTR_1_RNGRST RNGRST
#define RCC_IOPRSTR_IOPFRST IOPFRST
#define RCC_APBRSTR1
#define RCC_APBRSTR2
#define RCC_IOPENR_0_IOPFEN IOPFEN
#define RCC_IOPENR_1_GPIOFEN GPIOFEN
#define RCC_APBENR1
#define RCC_APBENR2
#define RCC_IOPSMENR
#define RCC_AHBSMENR_0_FLASHSMEN FLASHSMEN
#define RCC_AHBSMENR_0_AESSMEN AESSMEN
#define RCC_AHBSMENR_0_RNGSMEN RNGSMEN
#define RCC_APBSMENR1
#define RCC_APBSMENR2
#define RCC_MAP2_IOPRSTR IOPRSTR_t IOPRSTR
#define RCC_MAP4_APBRSTR1 APBRSTR1_t APBRSTR1
#define RCC_MAP4_APBRSTR2 APBRSTR2_t APBRSTR2
#define RCC_MAP4_IOPENR IOPENR_t IOPENR
#define RCC_MAP4_AHBENR AHBENR_t AHBENR
#define RCC_MAP4_IOPSMENR IOPSMENR_t IOPSMENR
#define RCC_MAP4_BDCR BDCR_t BDCR
#define RCC_MAP5_APBENR1 APBENR1_t APBENR1
#define RCC_MAP5_APBENR2 APBENR2_t APBENR2
#define RCC_MAP5_AHBSMENR AHBSMENR_t AHBSMENR
#define RCC_MAP5_APBSMENR1 APBSMENR1_t APBSMENR1
#define RCC_MAP5_APBSMENR2 APBSMENR2_t APBSMENR2
#define RCC_MAP5_CCIPR CCIPR_t CCIPR
#define RCC_MAP5_CSR CSR_t CSR
#else
#define RCC_CR_3_HSIDIV
#define RCC_CFGR_5_HPRE
#define RCC_CFGR_5_PPRE
#define RCC_CSR_2_PWRRSTF
#define RCC_ICSCR_3_HSITRIM
#define RCC_CCIPR_1_I2S2SEL
#define RCC_CCIPR_1_TIM1SEL
#define RCC_CCIPR_1_RNGDIV
#define RCC_AHBENR_0_FLASHEN
#define RCC_AHBENR_0_AESEN
#define RCC_AHBENR_2_RNGEN
#define RCC_AHBRSTR_0_FLASHRST
#define RCC_AHBRSTR_0_AESRST
#define RCC_AHBRSTR_1_RNGRST
#define RCC_IOPRSTR_IOPFRST
#define RCC_IOPENR_0_IOPFEN
#define RCC_IOPENR_1_GPIOFEN
#define RCC_AHBSMENR_0_FLASHSMEN
#define RCC_AHBSMENR_0_AESSMEN
#define RCC_AHBSMENR_0_RNGSMEN
#define RCC_MAP2_IOPRSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP4_APBRSTR1 __SOOL_PERIPH_PADDING_4
#define RCC_MAP4_APBRSTR2 __SOOL_PERIPH_PADDING_4
#define RCC_MAP4_IOPENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP4_AHBENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP4_IOPSMENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP4_BDCR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_APBENR1 __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_APBENR2 __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_AHBSMENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_APBSMENR1 __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_APBSMENR2 __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_CCIPR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_CSR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32H7      ) || defined(STM32WB      ) || defined(STM32L051xx  ) || \
    defined(STM32L052xx  ) || defined(STM32L053xx  ) || defined(STM32L062xx  ) || defined(STM32L063xx  ) || defined(STM32L072xx  ) || \
    defined(STM32L073xx  ) || defined(STM32L082xx  ) || defined(STM32L083xx  ) || defined(STM32L412xx  ) || defined(STM32L422xx  ) || \
    defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L442xx  ) || defined(STM32L451xx  ) || defined(STM32L452xx  ) || \
    defined(STM32L462xx  ) || defined(STM32L471xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || \
    defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_CRRCR
#endif

#if	defined(STM32H742xx  ) || defined(STM32H743xx  ) || defined(STM32H745xx_CORE_CM4) || defined(STM32H745xx_CORE_CM7) || defined(STM32H750xx  ) || \
    defined(STM32H753xx  ) || defined(STM32H755xx_CORE_CM4) || defined(STM32H755xx_CORE_CM7)
#define RCC_CRRCR_1
#define RCC_D3CFGR_1
#define RCC_AHB3RSTR_0_CPURST CPURST
#define RCC_AHB1ENR_0_USB2ULPIEN USB2ULPIEN
#define RCC_AHB1ENR_1_USB1OTGEN USB1OTGEN
#define RCC_AHB1ENR_1_USB1ULPIEN USB1ULPIEN
#define RCC_AHB1ENR_1_USB2OTGEN USB2OTGEN
#define RCC_ICSCR_0
#define RCC_AHB3ENR_0_MDMAEN MDMAEN
#define RCC_AHB3ENR_0_DMA2DEN DMA2DEN
#define RCC_AHB3ENR_0_JPGDECEN JPGDECEN
#define RCC_AHB3ENR_0_FMCEN FMCEN
#define RCC_AHB3ENR_0_QSPIEN QSPIEN
#define RCC_AHB3ENR_0_SDMMC1EN SDMMC1EN
#define RCC_MAP0_C1_AHB3ENR AHB3ENR_t C1_AHB3ENR
#define RCC_MAP2_AHB3ENR AHB3ENR_t AHB3ENR
#else
#define RCC_AHB3RSTR_0_CPURST
#define RCC_AHB1ENR_0_USB2ULPIEN
#define RCC_AHB1ENR_1_USB1OTGEN
#define RCC_AHB1ENR_1_USB1ULPIEN
#define RCC_AHB1ENR_1_USB2OTGEN
#define RCC_AHB3ENR_0_MDMAEN
#define RCC_AHB3ENR_0_DMA2DEN
#define RCC_AHB3ENR_0_JPGDECEN
#define RCC_AHB3ENR_0_FMCEN
#define RCC_AHB3ENR_0_QSPIEN
#define RCC_AHB3ENR_0_SDMMC1EN
#define RCC_MAP0_C1_AHB3ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_AHB3ENR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32WB      ) || defined(STM32L051xx  ) || defined(STM32L052xx  ) || defined(STM32L053xx  ) || defined(STM32L062xx  ) || \
    defined(STM32L063xx  ) || defined(STM32L072xx  ) || defined(STM32L073xx  ) || defined(STM32L082xx  ) || defined(STM32L083xx  ) || \
    defined(STM32L412xx  ) || defined(STM32L422xx  ) || defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L442xx  ) || \
    defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  ) || defined(STM32L4P5xx  ) || \
    defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || \
    defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_CRRCR_2
#endif

#if	defined(STM32WB      ) || defined(STM32L412xx  ) || defined(STM32L422xx  ) || defined(STM32L431xx  ) || defined(STM32L432xx  ) || \
    defined(STM32L442xx  ) || defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  ) || \
    defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || \
    defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_CRRCR_2_HSI48CAL HSI48CAL
#else
#define RCC_CRRCR_2_HSI48CAL
#endif

#if	defined(STM32L051xx  ) || defined(STM32L052xx  ) || defined(STM32L053xx  ) || defined(STM32L062xx  ) || defined(STM32L063xx  ) || \
    defined(STM32L072xx  ) || defined(STM32L073xx  ) || defined(STM32L082xx  ) || defined(STM32L083xx  )
#define RCC_CRRCR_4
#define RCC_CIER_2_HSI48RDYIE HSI48RDYIE
#define RCC_CIFR_2_HSI48RDYF HSI48RDYF
#define RCC_CICR_2_HSI48RDYC HSI48RDYC
#define RCC_APB2RSTR_1_TM12RST TM12RST
#define RCC_APB2ENR_3_MIFIEN MIFIEN
#define RCC_CCIPR_1_HSI48MSEL HSI48MSEL
#define RCC_APB1RSTR_2_LPUART12RST LPUART12RST
#define RCC_AHBENR_3_TOUCHEN TOUCHEN
#define RCC_AHBENR_3_RNGEN RNGEN
#define RCC_AHBRSTR_2_TOUCHRST TOUCHRST
#define RCC_AHBRSTR_2_RNGRST RNGRST
#define RCC_AHBSMENR_0_CRYPSMEN CRYPSMEN
#define RCC_AHBSMENR_1_TOUCHSMEN TOUCHSMEN
#define RCC_AHBSMENR_1_RNGSMEN RNGSMEN
#define RCC_APB1SMENR_USBSMEN USBSMEN
#define RCC_APB1SMENR_DACSMEN DACSMEN
#else
#define RCC_CIER_2_HSI48RDYIE
#define RCC_CIFR_2_HSI48RDYF
#define RCC_CICR_2_HSI48RDYC
#define RCC_APB2RSTR_1_TM12RST
#define RCC_APB2ENR_3_MIFIEN
#define RCC_CCIPR_1_HSI48MSEL
#define RCC_APB1RSTR_2_LPUART12RST
#define RCC_AHBENR_3_TOUCHEN
#define RCC_AHBENR_3_RNGEN
#define RCC_AHBRSTR_2_TOUCHRST
#define RCC_AHBRSTR_2_RNGRST
#define RCC_AHBSMENR_0_CRYPSMEN
#define RCC_AHBSMENR_1_TOUCHSMEN
#define RCC_AHBSMENR_1_RNGSMEN
#define RCC_APB1SMENR_USBSMEN
#define RCC_APB1SMENR_DACSMEN
#endif

#if	defined(STM32F2      ) || defined(STM32G0      ) || defined(STM32H7      )
#define RCC_CFGR_0
#endif

#if	defined(STM32G0      ) || defined(STM32H7      )
#define RCC_CFGR_0_SW SW
#define RCC_CFGR_0_SWS SWS
#else
#define RCC_CFGR_0_SW
#define RCC_CFGR_0_SWS
#endif

#if	defined(STM32F2      )
#define RCC_CFGR_0_RTCPRE0 RTCPRE0
#define RCC_CFGR_0_RTCPRE1 RTCPRE1
#define RCC_CFGR_1_PPRE21 PPRE21
#define RCC_CFGR_1_MCO2PRE0 MCO2PRE0
#define RCC_CFGR_1_MCO21 MCO21
#define RCC_CFGR_2_HPRE0 HPRE0
#define RCC_CFGR_2_HPRE1 HPRE1
#define RCC_CFGR_2_HPRE2 HPRE2
#define RCC_CFGR_2_HPRE3 HPRE3
#define RCC_CFGR_2_RTCPRE2 RTCPRE2
#define RCC_CFGR_2_RTCPRE3 RTCPRE3
#define RCC_CFGR_2_RTCPRE4 RTCPRE4
#define RCC_CFGR_2_MCO10 MCO10
#define RCC_CFGR_2_MCO11 MCO11
#define RCC_CFGR_3_PPRE10 PPRE10
#define RCC_CFGR_3_PPRE11 PPRE11
#define RCC_CFGR_3_PPRE12 PPRE12
#define RCC_CFGR_3_PPRE20 PPRE20
#define RCC_CFGR_3_PPRE22 PPRE22
#define RCC_CFGR_3_MCO2PRE1 MCO2PRE1
#define RCC_CFGR_3_MCO2PRE2 MCO2PRE2
#define RCC_CFGR_3_MCO20 MCO20
#define RCC_CFGR_4_MCO1PRE0 MCO1PRE0
#define RCC_CFGR_4_MCO1PRE1 MCO1PRE1
#define RCC_CFGR_4_MCO1PRE2 MCO1PRE2
#define RCC_PLLI2SCFGR_2
#else
#define RCC_CFGR_0_RTCPRE0
#define RCC_CFGR_0_RTCPRE1
#define RCC_CFGR_1_PPRE21
#define RCC_CFGR_1_MCO2PRE0
#define RCC_CFGR_1_MCO21
#define RCC_CFGR_2_HPRE0
#define RCC_CFGR_2_HPRE1
#define RCC_CFGR_2_HPRE2
#define RCC_CFGR_2_HPRE3
#define RCC_CFGR_2_RTCPRE2
#define RCC_CFGR_2_RTCPRE3
#define RCC_CFGR_2_RTCPRE4
#define RCC_CFGR_2_MCO10
#define RCC_CFGR_2_MCO11
#define RCC_CFGR_3_PPRE10
#define RCC_CFGR_3_PPRE11
#define RCC_CFGR_3_PPRE12
#define RCC_CFGR_3_PPRE20
#define RCC_CFGR_3_PPRE22
#define RCC_CFGR_3_MCO2PRE1
#define RCC_CFGR_3_MCO2PRE2
#define RCC_CFGR_3_MCO20
#define RCC_CFGR_4_MCO1PRE0
#define RCC_CFGR_4_MCO1PRE1
#define RCC_CFGR_4_MCO1PRE2
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L0      ) || \
    defined(STM32L1      ) || defined(STM32L4      ) || defined(STM32WB      ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_CFGR_1_SW SW
#define RCC_CFGR_1_SWS SWS
#else
#define RCC_CFGR_1_SW
#define RCC_CFGR_1_SWS
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32F4      ) || defined(STM32F7      ) || defined(STM32G4      ) || \
    defined(STM32GB      ) || defined(STM32L0      ) || defined(STM32L1      ) || defined(STM32L4      ) || defined(STM32WB      )
#define RCC_CFGR_1_HPRE HPRE
#else
#define RCC_CFGR_1_HPRE
#endif

#if	defined(STM32F3      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L0      ) || defined(STM32L1      ) || \
    defined(STM32L4      ) || defined(STM32WB      )
#define RCC_CFGR_1_PPRE1 PPRE1
#define RCC_CFGR_1_PPRE2 PPRE2
#else
#define RCC_CFGR_1_PPRE1
#define RCC_CFGR_1_PPRE2
#endif

#if	defined(STM32L0      ) || defined(STM32L4      ) || defined(STM32WB      )
#define RCC_CFGR_1_STOPWUCK STOPWUCK
#else
#define RCC_CFGR_1_STOPWUCK
#endif

#if	defined(STM32F4      ) || defined(STM32F7      )
#define RCC_CFGR_1_RTCPRE RTCPRE
#define RCC_CFGR_1_MCO1 MCO1
#define RCC_CFGR_2_PPRE1 PPRE1
#define RCC_CFGR_2_PPRE2 PPRE2
#define RCC_CFGR_2_MCO1PRE MCO1PRE
#define RCC_CFGR_2_MCO2PRE MCO2PRE
#define RCC_CFGR_2_MCO2 MCO2
#else
#define RCC_CFGR_1_RTCPRE
#define RCC_CFGR_1_MCO1
#define RCC_CFGR_2_PPRE1
#define RCC_CFGR_2_PPRE2
#define RCC_CFGR_2_MCO1PRE
#define RCC_CFGR_2_MCO2PRE
#define RCC_CFGR_2_MCO2
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32F301x8  ) || defined(STM32F302x8  ) || defined(STM32F302xC  ) || \
    defined(STM32F302xE  ) || defined(STM32F303x8  ) || defined(STM32F303xC  ) || defined(STM32F303xE  ) || defined(STM32F318xx  ) || \
    defined(STM32F328xx  ) || defined(STM32F334x8  ) || defined(STM32F358xx  ) || defined(STM32F401xC  ) || defined(STM32F401xE  ) || \
    defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F411xE  ) || defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || \
    defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F427xx  ) || \
    defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || \
    defined(STM32F479xx  )
#define RCC_CFGR_1_I2SSRC I2SSRC
#else
#define RCC_CFGR_1_I2SSRC
#endif

#if	defined(STM32G0      ) || defined(STM32L0      ) || defined(STM32L1      ) || defined(STM32L4      )
#define RCC_CFGR_1_MCOSEL MCOSEL
#else
#define RCC_CFGR_1_MCOSEL
#endif

#if	defined(STM32F0      ) || defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L0      ) || \
    defined(STM32L1      ) || defined(STM32L4      ) || defined(STM32WB      ) || defined(STM32F303x8  ) || defined(STM32F334x8  )
#define RCC_CFGR_1_MCOPRE MCOPRE
#else
#define RCC_CFGR_1_MCOPRE
#endif

#if	defined(STM32F2      ) || defined(STM32F4      ) || defined(STM32F7      ) || defined(STM32WB      )
#define RCC_CFGR_2
#define RCC_PLLCFGR_2
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32F401xC  ) || defined(STM32F401xE  ) || defined(STM32F405xx  ) || \
    defined(STM32F407xx  ) || defined(STM32F410Cx  ) || defined(STM32F410Rx  ) || defined(STM32F410Tx  ) || defined(STM32F411xE  ) || \
    defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || \
    defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || \
    defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  )
#define RCC_CFGR_2_SW0 SW0
#define RCC_CFGR_2_SW1 SW1
#define RCC_CFGR_2_SWS0 SWS0
#define RCC_CFGR_2_SWS1 SWS1
#define RCC_PLLCFGR_0_PLLN6 PLLN6
#define RCC_PLLCFGR_0_PLLN7 PLLN7
#define RCC_PLLCFGR_0_PLLN8 PLLN8
#define RCC_PLLCFGR_1_PLLM2 PLLM2
#define RCC_PLLCFGR_1_PLLM3 PLLM3
#define RCC_PLLCFGR_1_PLLQ1 PLLQ1
#define RCC_PLLCFGR_1_PLLQ2 PLLQ2
#define RCC_PLLCFGR_1_PLLQ3 PLLQ3
#define RCC_PLLCFGR_2_PLLM0 PLLM0
#define RCC_PLLCFGR_2_PLLM1 PLLM1
#define RCC_PLLCFGR_2_PLLM4 PLLM4
#define RCC_PLLCFGR_2_PLLM5 PLLM5
#define RCC_PLLCFGR_2_PLLN0 PLLN0
#define RCC_PLLCFGR_2_PLLN1 PLLN1
#define RCC_PLLCFGR_2_PLLN2 PLLN2
#define RCC_PLLCFGR_2_PLLN3 PLLN3
#define RCC_PLLCFGR_2_PLLN4 PLLN4
#define RCC_PLLCFGR_2_PLLN5 PLLN5
#define RCC_PLLCFGR_2_PLLP0 PLLP0
#define RCC_PLLCFGR_2_PLLP1 PLLP1
#define RCC_PLLCFGR_2_PLLQ0 PLLQ0
#else
#define RCC_CFGR_2_SW0
#define RCC_CFGR_2_SW1
#define RCC_CFGR_2_SWS0
#define RCC_CFGR_2_SWS1
#define RCC_PLLCFGR_0_PLLN6
#define RCC_PLLCFGR_0_PLLN7
#define RCC_PLLCFGR_0_PLLN8
#define RCC_PLLCFGR_1_PLLM2
#define RCC_PLLCFGR_1_PLLM3
#define RCC_PLLCFGR_1_PLLQ1
#define RCC_PLLCFGR_1_PLLQ2
#define RCC_PLLCFGR_1_PLLQ3
#define RCC_PLLCFGR_2_PLLM0
#define RCC_PLLCFGR_2_PLLM1
#define RCC_PLLCFGR_2_PLLM4
#define RCC_PLLCFGR_2_PLLM5
#define RCC_PLLCFGR_2_PLLN0
#define RCC_PLLCFGR_2_PLLN1
#define RCC_PLLCFGR_2_PLLN2
#define RCC_PLLCFGR_2_PLLN3
#define RCC_PLLCFGR_2_PLLN4
#define RCC_PLLCFGR_2_PLLN5
#define RCC_PLLCFGR_2_PLLP0
#define RCC_PLLCFGR_2_PLLP1
#define RCC_PLLCFGR_2_PLLQ0
#endif

#if	defined(STM32F410Cx  ) || defined(STM32F410Rx  ) || defined(STM32F410Tx  )
#define RCC_CFGR_2_MCO1EN MCO1EN
#define RCC_CFGR_2_MCO2EN MCO2EN
#define RCC_PLLCFGR_3_PLLR1 PLLR1
#define RCC_PLLCFGR_3_PLLR2 PLLR2
#define RCC_PLLCFGR_3_PLLR3 PLLR3
#define RCC_AHB1RSTR_0_RNGRST RNGRST
#define RCC_AHB1ENR_0_RNGEN RNGEN
#define RCC_APB2ENR_0_EXTITEN EXTITEN
#define RCC_AHB1LPENR_0_RNGLPEN RNGLPEN
#define RCC_APB2LPENR_1_EXTITLPEN EXTITLPEN
#define RCC_APB1LPENR_1_RTCAPBLPEN RTCAPBLPEN
#define RCC_DCKCFGR_1_I2SSRC I2SSRC
#define RCC_DCKCFGR2_1_LPTIM1SEL LPTIM1SEL
#define RCC_DCKCFGR2_2_I2C4SEL I2C4SEL
#else
#define RCC_CFGR_2_MCO1EN
#define RCC_CFGR_2_MCO2EN
#define RCC_PLLCFGR_3_PLLR1
#define RCC_PLLCFGR_3_PLLR2
#define RCC_PLLCFGR_3_PLLR3
#define RCC_AHB1RSTR_0_RNGRST
#define RCC_AHB1ENR_0_RNGEN
#define RCC_APB2ENR_0_EXTITEN
#define RCC_AHB1LPENR_0_RNGLPEN
#define RCC_APB2LPENR_1_EXTITLPEN
#define RCC_APB1LPENR_1_RTCAPBLPEN
#define RCC_DCKCFGR_1_I2SSRC
#define RCC_DCKCFGR2_1_LPTIM1SEL
#define RCC_DCKCFGR2_2_I2C4SEL
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32G4      ) || defined(STM32GB      ) || \
    defined(STM32L0      ) || defined(STM32L1      ) || defined(STM32WB      )
#define RCC_CFGR_3
#endif

#if	defined(STM32F0      )
#define RCC_CFGR_3_ADCPRE ADCPRE
#define RCC_CFGR_4_PPRE PPRE
#define RCC_APB2RSTR_2_DBGMCURST DBGMCURST
#define RCC_CIR_1
#define RCC_APB1ENR_2_USBRST USBRST
#define RCC_AHBENR_1_DMA1EN DMA1EN
#define RCC_CFGR3_0_USBSW USBSW
#define RCC_CFGR3_1_ADCSW ADCSW
#define RCC_CR2
#define RCC_MAP5_CR2 CR2_t CR2
#else
#define RCC_CFGR_3_ADCPRE
#define RCC_CFGR_4_PPRE
#define RCC_APB2RSTR_2_DBGMCURST
#define RCC_APB1ENR_2_USBRST
#define RCC_AHBENR_1_DMA1EN
#define RCC_CFGR3_0_USBSW
#define RCC_CFGR3_1_ADCSW
#define RCC_MAP5_CR2 __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32L0      ) || defined(STM32L1      ) || defined(STM32F301x8  ) || defined(STM32F302x8  ) || defined(STM32F302xC  ) || \
    defined(STM32F303x8  ) || defined(STM32F303xC  ) || defined(STM32F318xx  ) || defined(STM32F328xx  ) || defined(STM32F334x8  ) || \
    defined(STM32F358xx  ) || defined(STM32F373xC  ) || defined(STM32F378xx  ) || defined(STM32F398xx  )
#define RCC_CFGR_3_PLLSRC PLLSRC
#else
#define RCC_CFGR_3_PLLSRC
#endif

#if	defined(STM32F0      ) || defined(STM32F3      )
#define RCC_CFGR_3_PLLXTPRE PLLXTPRE
#define RCC_CFGR_5_MCO MCO
#define RCC_AHBENR_0_SRAMEN SRAMEN
#define RCC_AHBENR_0_FLITFEN FLITFEN
#define RCC_AHBENR_0_CRCEN CRCEN
#define RCC_AHBENR_0_IOPAEN IOPAEN
#define RCC_AHBENR_0_IOPBEN IOPBEN
#define RCC_AHBENR_0_IOPCEN IOPCEN
#define RCC_AHBENR_0_IOPFEN IOPFEN
#define RCC_AHBENR_1_GPIOAEN GPIOAEN
#define RCC_AHBENR_1_GPIOBEN GPIOBEN
#define RCC_AHBENR_1_GPIOCEN GPIOCEN
#define RCC_AHBENR_1_GPIOFEN GPIOFEN
#define RCC_AHBRSTR_0_IOPARST IOPARST
#define RCC_AHBRSTR_0_IOPBRST IOPBRST
#define RCC_AHBRSTR_0_IOPCRST IOPCRST
#define RCC_AHBRSTR_0_IOPDRST IOPDRST
#define RCC_AHBRSTR_0_IOPFRST IOPFRST
#define RCC_CFGR2
#define RCC_CFGR3
#define RCC_MAP4_CSR CSR_t CSR
#define RCC_MAP5_CFGR CFGR_t CFGR
#define RCC_MAP5_CIR CIR_t CIR
#define RCC_MAP5_APB2RSTR APB2RSTR_t APB2RSTR
#define RCC_MAP5_APB1RSTR APB1RSTR_t APB1RSTR
#define RCC_MAP5_AHBENR AHBENR_t AHBENR
#define RCC_MAP5_APB2ENR APB2ENR_t APB2ENR
#define RCC_MAP5_APB1ENR APB1ENR_t APB1ENR
#define RCC_MAP5_BDCR BDCR_t BDCR
#define RCC_MAP5_CFGR2 CFGR2_t CFGR2
#define RCC_MAP5_CFGR3 CFGR3_t CFGR3
#else
#define RCC_CFGR_3_PLLXTPRE
#define RCC_CFGR_5_MCO
#define RCC_AHBENR_0_SRAMEN
#define RCC_AHBENR_0_FLITFEN
#define RCC_AHBENR_0_CRCEN
#define RCC_AHBENR_0_IOPAEN
#define RCC_AHBENR_0_IOPBEN
#define RCC_AHBENR_0_IOPCEN
#define RCC_AHBENR_0_IOPFEN
#define RCC_AHBENR_1_GPIOAEN
#define RCC_AHBENR_1_GPIOBEN
#define RCC_AHBENR_1_GPIOCEN
#define RCC_AHBENR_1_GPIOFEN
#define RCC_AHBRSTR_0_IOPARST
#define RCC_AHBRSTR_0_IOPBRST
#define RCC_AHBRSTR_0_IOPCRST
#define RCC_AHBRSTR_0_IOPDRST
#define RCC_AHBRSTR_0_IOPFRST
#define RCC_MAP4_CSR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_CFGR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_CIR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_APB2RSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_APB1RSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_AHBENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_APB2ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_APB1ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_BDCR __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_CFGR2 __SOOL_PERIPH_PADDING_4
#define RCC_MAP5_CFGR3 __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32F301x8  ) || defined(STM32F302x8  ) || defined(STM32F302xC  ) || defined(STM32F302xE  ) || defined(STM32F303x8  ) || \
    defined(STM32F303xC  ) || defined(STM32F303xE  ) || defined(STM32F318xx  ) || defined(STM32F328xx  ) || defined(STM32F334x8  ) || \
    defined(STM32F358xx  )
#define RCC_CFGR_3_USBPRES USBPRES
#define RCC_AHBENR_0_ADC12EN ADC12EN
#define RCC_AHBRSTR_0_ADC12RST ADC12RST
#define RCC_CFGR2_ADC12PRES ADC12PRES
#define RCC_CFGR3_0_TIM1SW TIM1SW
#else
#define RCC_CFGR_3_USBPRES
#define RCC_AHBENR_0_ADC12EN
#define RCC_AHBRSTR_0_ADC12RST
#define RCC_CFGR2_ADC12PRES
#define RCC_CFGR3_0_TIM1SW
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32WB      )
#define RCC_CFGR_3_MCOSEL MCOSEL
#define RCC_CIFR_2_HSECSSF HSECSSF
#define RCC_CICR_2_HSECSSC HSECSSC
#define RCC_AHB1RSTR_2
#define RCC_AHB1ENR_2_DMAMUXEN DMAMUXEN
#else
#define RCC_CFGR_3_MCOSEL
#define RCC_CIFR_2_HSECSSF
#define RCC_CICR_2_HSECSSC
#define RCC_AHB1ENR_2_DMAMUXEN
#endif

#if	defined(STM32F0      ) || defined(STM32F303x8  ) || defined(STM32F334x8  )
#define RCC_CFGR_3_PLLNODIV PLLNODIV
#else
#define RCC_CFGR_3_PLLNODIV
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32L0      ) || defined(STM32L1      )
#define RCC_CFGR_4
#endif

#if	defined(STM32F373xC  ) || defined(STM32F378xx  ) || defined(STM32F398xx  )
#define RCC_CFGR_4_ADCPRE ADCPRE
#define RCC_CFGR_4_USBPRE USBPRE
#define RCC_CFGR_5_SDPRE SDPRE
#define RCC_APB2RSTR_0_TIM19RST TIM19RST
#define RCC_APB2RSTR_1_SDAD2RST SDAD2RST
#define RCC_APB2RSTR_2_SDAD3RST SDAD3RST
#define RCC_APB2RSTR_3_SDAD1RST SDAD1RST
#define RCC_APB2ENR_0_TIM19EN TIM19EN
#define RCC_APB2ENR_1_SDAD2EN SDAD2EN
#define RCC_APB2ENR_2_SDAD3EN SDAD3EN
#define RCC_APB2ENR_3_SDAD1EN SDAD1EN
#define RCC_APB1RSTR_2_TIM18RST TIM18RST
#define RCC_APB1RSTR_2_DAC3RST DAC3RST
#define RCC_APB1ENR_2_DAC3EN DAC3EN
#define RCC_APB1ENR_3_TIM18EN TIM18EN
#else
#define RCC_CFGR_4_ADCPRE
#define RCC_CFGR_4_USBPRE
#define RCC_CFGR_5_SDPRE
#define RCC_APB2RSTR_0_TIM19RST
#define RCC_APB2RSTR_1_SDAD2RST
#define RCC_APB2RSTR_2_SDAD3RST
#define RCC_APB2RSTR_3_SDAD1RST
#define RCC_APB2ENR_0_TIM19EN
#define RCC_APB2ENR_1_SDAD2EN
#define RCC_APB2ENR_2_SDAD3EN
#define RCC_APB2ENR_3_SDAD1EN
#define RCC_APB1RSTR_2_TIM18RST
#define RCC_APB1RSTR_2_DAC3RST
#define RCC_APB1ENR_2_DAC3EN
#define RCC_APB1ENR_3_TIM18EN
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32L0      ) || defined(STM32L1      )
#define RCC_CFGR_4_PLLMUL PLLMUL
#else
#define RCC_CFGR_4_PLLMUL
#endif

#if	defined(STM32F301x8  ) || defined(STM32F302x8  ) || defined(STM32F302xC  ) || defined(STM32F302xE  ) || defined(STM32F303xC  ) || \
    defined(STM32F303xE  ) || defined(STM32F318xx  ) || defined(STM32F328xx  ) || defined(STM32F358xx  )
#define RCC_CFGR_4_MCOF MCOF
#define RCC_CFGR3_0_TIM8SW TIM8SW
#define RCC_CFGR3_0_UART4SW UART4SW
#define RCC_CFGR3_0_UART5SW UART5SW
#else
#define RCC_CFGR_4_MCOF
#define RCC_CFGR3_0_TIM8SW
#define RCC_CFGR3_0_UART4SW
#define RCC_CFGR3_0_UART5SW
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32G0      ) || defined(STM32L0      ) || defined(STM32L1      )
#define RCC_CFGR_5
#define RCC_AHBENR
#define RCC_AHBRSTR
#endif

#if	defined(STM32F0      ) || defined(STM32F302xE  ) || defined(STM32F303xE  )
#define RCC_CFGR_5_PLLSRC PLLSRC
#else
#define RCC_CFGR_5_PLLSRC
#endif

#if	defined(STM32F2      ) || defined(STM32F4      ) || defined(STM32F7      ) || defined(STM32H7      ) || defined(STM32L4      ) || \
    defined(STM32WB      )
#define RCC_PLLCFGR
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32H7      ) || defined(STM32L4      ) || defined(STM32F401xC  ) || \
    defined(STM32F401xE  ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F410Cx  ) || defined(STM32F410Rx  ) || \
    defined(STM32F410Tx  ) || defined(STM32F411xE  ) || defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || \
    defined(STM32F412Zx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || \
    defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  )
#define RCC_PLLCFGR_0
#endif

#if	defined(STM32L412xx  ) || defined(STM32L422xx  ) || defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L442xx  ) || \
    defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  ) || defined(STM32L476xx  ) || \
    defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || \
    defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || \
    defined(STM32L4S9xx  )
#define RCC_PLLCFGR_0_PLLPDIV PLLPDIV
#else
#define RCC_PLLCFGR_0_PLLPDIV
#endif

#if	defined(STM32F2      ) || defined(STM32F4      ) || defined(STM32F7      ) || defined(STM32L4      ) || defined(STM32WB      )
#define RCC_PLLCFGR_1
#endif

#if	defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || \
    defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_PLLCFGR_1_PLLM PLLM
#define RCC_AHB3RSTR_0_OSPI2RST OSPI2RST
#define RCC_AHB1RSTR_0_GFXMMURST GFXMMURST
#define RCC_AHB2RSTR_0_OSPIMRST OSPIMRST
#define RCC_AHB2RSTR_0_SDMMC1RST SDMMC1RST
#define RCC_AHB2RSTR_1_HASHRST HASHRST
#define RCC_APB2RSTR_1_DFSDM1RST DFSDM1RST
#define RCC_AHB1ENR_0_DMAMUX1EN DMAMUX1EN
#define RCC_AHB1ENR_1_GFXMMUEN GFXMMUEN
#define RCC_AHB2ENR_0_OSPIMEN OSPIMEN
#define RCC_AHB2ENR_0_SDMMC1EN SDMMC1EN
#define RCC_AHB2ENR_1_HASHEN HASHEN
#define RCC_APB2ENR_1_DFSDM1EN DFSDM1EN
#define RCC_AHB3ENR_0_OSPI2EN OSPI2EN
#define RCC_PLLSAI1CFGR_0_PLLSAI1M PLLSAI1M
#define RCC_PLLSAI2CFGR_PLLSAI2M PLLSAI2M
#define RCC_PLLSAI2CFGR_PLLSAI2QEN PLLSAI2QEN
#define RCC_PLLSAI2CFGR_PLLSAI2Q PLLSAI2Q
#define RCC_AHB1SMENR_0_GFXMMUSMEN GFXMMUSMEN
#define RCC_AHB2SMENR_0_HASHSMEN HASHSMEN
#define RCC_AHB2SMENR_0_OSPIMSMEN OSPIMSMEN
#define RCC_AHB2SMENR_0_SDMMC1SMEN SDMMC1SMEN
#define RCC_AHB3SMENR_0_OCTOSPI2 OCTOSPI2
#define RCC_APB2SMENR_0_DFSDM1SMEN DFSDM1SMEN
#define RCC_APB2SMENR_0_LTDCSMEN LTDCSMEN
#define RCC_APB2SMENR_0_DSISMEN DSISMEN
#define RCC_CCIPR2_0_DFSDMSEL DFSDMSEL
#define RCC_CCIPR2_0_ADFSDMSEL ADFSDMSEL
#define RCC_CCIPR2_0_SAI1SEL SAI1SEL
#define RCC_CCIPR2_0_SAI2SEL SAI2SEL
#define RCC_CCIPR2_0_DSISEL DSISEL
#define RCC_CCIPR2_0_SDMMCSEL SDMMCSEL
#define RCC_CCIPR2_0_PLLSAI2DIVR PLLSAI2DIVR
#define RCC_CCIPR2_0_OSPISEL OSPISEL
#else
#define RCC_PLLCFGR_1_PLLM
#define RCC_AHB3RSTR_0_OSPI2RST
#define RCC_AHB1RSTR_0_GFXMMURST
#define RCC_AHB2RSTR_0_OSPIMRST
#define RCC_AHB2RSTR_0_SDMMC1RST
#define RCC_AHB2RSTR_1_HASHRST
#define RCC_APB2RSTR_1_DFSDM1RST
#define RCC_AHB1ENR_0_DMAMUX1EN
#define RCC_AHB1ENR_1_GFXMMUEN
#define RCC_AHB2ENR_0_OSPIMEN
#define RCC_AHB2ENR_0_SDMMC1EN
#define RCC_AHB2ENR_1_HASHEN
#define RCC_APB2ENR_1_DFSDM1EN
#define RCC_AHB3ENR_0_OSPI2EN
#define RCC_PLLSAI1CFGR_0_PLLSAI1M
#define RCC_PLLSAI2CFGR_PLLSAI2M
#define RCC_PLLSAI2CFGR_PLLSAI2QEN
#define RCC_PLLSAI2CFGR_PLLSAI2Q
#define RCC_AHB1SMENR_0_GFXMMUSMEN
#define RCC_AHB2SMENR_0_HASHSMEN
#define RCC_AHB2SMENR_0_OSPIMSMEN
#define RCC_AHB2SMENR_0_SDMMC1SMEN
#define RCC_AHB3SMENR_0_OCTOSPI2
#define RCC_APB2SMENR_0_DFSDM1SMEN
#define RCC_APB2SMENR_0_LTDCSMEN
#define RCC_APB2SMENR_0_DSISMEN
#define RCC_CCIPR2_0_DFSDMSEL
#define RCC_CCIPR2_0_ADFSDMSEL
#define RCC_CCIPR2_0_SAI1SEL
#define RCC_CCIPR2_0_SAI2SEL
#define RCC_CCIPR2_0_DSISEL
#define RCC_CCIPR2_0_SDMMCSEL
#define RCC_CCIPR2_0_PLLSAI2DIVR
#define RCC_CCIPR2_0_OSPISEL
#endif

#if	defined(STM32F413xx  ) || defined(STM32F423xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_PLLCFGR_1_PLLR PLLR
#else
#define RCC_PLLCFGR_1_PLLR
#endif

#if	defined(STM32F2      ) || defined(STM32F4      ) || defined(STM32F7      )
#define RCC_PLLCFGR_2_PLLSRC PLLSRC
#define RCC_CSR_1_BORRSTF BORRSTF
#define RCC_AHB1RSTR_0_GPIOHRST GPIOHRST
#define RCC_AHB1RSTR_1_GPIOARST GPIOARST
#define RCC_AHB1RSTR_1_GPIOBRST GPIOBRST
#define RCC_AHB1RSTR_1_GPIOCRST GPIOCRST
#define RCC_AHB1RSTR_1_DMA1RST DMA1RST
#define RCC_AHB1RSTR_1_DMA2RST DMA2RST
#define RCC_APB2RSTR_0_ADCRST ADCRST
#define RCC_APB2RSTR_0_SYSCFGRST SYSCFGRST
#define RCC_APB2RSTR_1_TIM9RST TIM9RST
#define RCC_APB2RSTR_1_TIM11RST TIM11RST
#define RCC_AHB1ENR_0_GPIOHEN GPIOHEN
#define RCC_AHB1ENR_1_GPIOAEN GPIOAEN
#define RCC_AHB1ENR_1_GPIOBEN GPIOBEN
#define RCC_AHB1ENR_1_GPIOCEN GPIOCEN
#define RCC_AHB1ENR_1_DMA1EN DMA1EN
#define RCC_AHB1ENR_1_DMA2EN DMA2EN
#define RCC_APB2ENR_0_ADC1EN ADC1EN
#define RCC_APB2ENR_0_SYSCFGEN SYSCFGEN
#define RCC_APB2ENR_1_TIM9EN TIM9EN
#define RCC_APB2ENR_1_TIM11EN TIM11EN
#define RCC_AHB1LPENR_0_GPIOCLPEN GPIOCLPEN
#define RCC_AHB1LPENR_0_GPIOHLPEN GPIOHLPEN
#define RCC_AHB1LPENR_0_CRCLPEN CRCLPEN
#define RCC_AHB1LPENR_1_GPIOALPEN GPIOALPEN
#define RCC_AHB1LPENR_1_GPIOBLPEN GPIOBLPEN
#define RCC_AHB1LPENR_1_FLITFLPEN FLITFLPEN
#define RCC_AHB1LPENR_1_SRAM1LPEN SRAM1LPEN
#define RCC_AHB1LPENR_1_DMA1LPEN DMA1LPEN
#define RCC_AHB1LPENR_1_DMA2LPEN DMA2LPEN
#define RCC_APB2LPENR_0_ADC1LPEN ADC1LPEN
#define RCC_APB2LPENR_0_SYSCFGLPEN SYSCFGLPEN
#define RCC_APB2LPENR_1_TIM9LPEN TIM9LPEN
#define RCC_APB2LPENR_1_TIM11LPEN TIM11LPEN
#define RCC_CIR_0_PLLI2SRDYC PLLI2SRDYC
#define RCC_APB1RSTR_0_UART2RST UART2RST
#define RCC_APB1LPENR_0_TIM5LPEN TIM5LPEN
#define RCC_SSCGR
#define RCC_MAP3_PLLCFGR PLLCFGR_t PLLCFGR
#define RCC_MAP3_AHB1RSTR AHB1RSTR_t AHB1RSTR
#define RCC_MAP3_APB1RSTR APB1RSTR_t APB1RSTR
#define RCC_MAP3_AHB1ENR AHB1ENR_t AHB1ENR
#define RCC_MAP3_APB1ENR APB1ENR_t APB1ENR
#define RCC_MAP3_APB2ENR APB2ENR_t APB2ENR
#define RCC_MAP3_AHB1LPENR AHB1LPENR_t AHB1LPENR
#define RCC_MAP3_APB1LPENR APB1LPENR_t APB1LPENR
#define RCC_MAP3_APB2LPENR APB2LPENR_t APB2LPENR
#define RCC_MAP3_SSCGR SSCGR_t SSCGR
#else
#define RCC_PLLCFGR_2_PLLSRC
#define RCC_CSR_1_BORRSTF
#define RCC_AHB1RSTR_0_GPIOHRST
#define RCC_AHB1RSTR_1_GPIOARST
#define RCC_AHB1RSTR_1_GPIOBRST
#define RCC_AHB1RSTR_1_GPIOCRST
#define RCC_AHB1RSTR_1_DMA1RST
#define RCC_AHB1RSTR_1_DMA2RST
#define RCC_APB2RSTR_0_ADCRST
#define RCC_APB2RSTR_0_SYSCFGRST
#define RCC_APB2RSTR_1_TIM9RST
#define RCC_APB2RSTR_1_TIM11RST
#define RCC_AHB1ENR_0_GPIOHEN
#define RCC_AHB1ENR_1_GPIOAEN
#define RCC_AHB1ENR_1_GPIOBEN
#define RCC_AHB1ENR_1_GPIOCEN
#define RCC_AHB1ENR_1_DMA1EN
#define RCC_AHB1ENR_1_DMA2EN
#define RCC_APB2ENR_0_ADC1EN
#define RCC_APB2ENR_0_SYSCFGEN
#define RCC_APB2ENR_1_TIM9EN
#define RCC_APB2ENR_1_TIM11EN
#define RCC_AHB1LPENR_0_GPIOCLPEN
#define RCC_AHB1LPENR_0_GPIOHLPEN
#define RCC_AHB1LPENR_0_CRCLPEN
#define RCC_AHB1LPENR_1_GPIOALPEN
#define RCC_AHB1LPENR_1_GPIOBLPEN
#define RCC_AHB1LPENR_1_FLITFLPEN
#define RCC_AHB1LPENR_1_SRAM1LPEN
#define RCC_AHB1LPENR_1_DMA1LPEN
#define RCC_AHB1LPENR_1_DMA2LPEN
#define RCC_APB2LPENR_0_ADC1LPEN
#define RCC_APB2LPENR_0_SYSCFGLPEN
#define RCC_APB2LPENR_1_TIM9LPEN
#define RCC_APB2LPENR_1_TIM11LPEN
#define RCC_CIR_0_PLLI2SRDYC
#define RCC_APB1RSTR_0_UART2RST
#define RCC_APB1LPENR_0_TIM5LPEN
#define RCC_MAP3_PLLCFGR __SOOL_PERIPH_PADDING_4
#define RCC_MAP3_AHB1RSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP3_APB1RSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP3_AHB1ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP3_APB1ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP3_APB2ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP3_AHB1LPENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP3_APB1LPENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP3_APB2LPENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP3_SSCGR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32F410Cx  ) || defined(STM32F410Rx  ) || defined(STM32F410Tx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_PLLCFGR_3
#endif

#if	defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_PLLCFGR_3_PLLM PLLM
#define RCC_PLLCFGR_3_PLLN PLLN
#define RCC_PLLCFGR_3_PLLP PLLP
#define RCC_PLLCFGR_3_PLLQ PLLQ
#define RCC_APB2LPENR_0_DSILPEN DSILPEN
#define RCC_DCKCFGR_0_PLLIS2DIVQ PLLIS2DIVQ
#define RCC_DCKCFGR_0_MSEL MSEL
#define RCC_DCKCFGR_0_SDMMCSEL SDMMCSEL
#define RCC_DCKCFGR_0_DSISEL DSISEL
#else
#define RCC_PLLCFGR_3_PLLM
#define RCC_PLLCFGR_3_PLLN
#define RCC_PLLCFGR_3_PLLP
#define RCC_PLLCFGR_3_PLLQ
#define RCC_APB2LPENR_0_DSILPEN
#define RCC_DCKCFGR_0_PLLIS2DIVQ
#define RCC_DCKCFGR_0_MSEL
#define RCC_DCKCFGR_0_SDMMCSEL
#define RCC_DCKCFGR_0_DSISEL
#endif

#if	defined(STM32WB      ) || defined(STM32L412xx  ) || defined(STM32L422xx  ) || defined(STM32L431xx  ) || defined(STM32L432xx  ) || \
    defined(STM32L433xx  ) || defined(STM32L442xx  ) || defined(STM32L443xx  ) || defined(STM32L451xx  ) || defined(STM32L452xx  ) || \
    defined(STM32L462xx  ) || defined(STM32L471xx  ) || defined(STM32L475xx  ) || defined(STM32L476xx  ) || defined(STM32L485xx  ) || \
    defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  )
#define RCC_PLLCFGR_4
#define RCC_AHB3RSTR_2_QSPIRST QSPIRST
#define RCC_AHB3ENR_2_QSPIEN QSPIEN
#define RCC_AHB3SMENR_1
#else
#define RCC_AHB3RSTR_2_QSPIRST
#define RCC_AHB3ENR_2_QSPIEN
#endif

#if	defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32H7      ) || defined(STM32L0      ) || \
    defined(STM32L4      ) || defined(STM32WB      )
#define RCC_CIER
#define RCC_CIFR
#define RCC_CICR
#endif

#if	defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32H7      ) || defined(STM32L0      ) || \
    defined(STM32L4      )
#define RCC_CIER_0_LSIRDYIE LSIRDYIE
#define RCC_CIFR_0_LSIRDYF LSIRDYF
#define RCC_CICR_0_LSIRDYC LSIRDYC
#else
#define RCC_CIER_0_LSIRDYIE
#define RCC_CIFR_0_LSIRDYF
#define RCC_CICR_0_LSIRDYC
#endif

#if	defined(STM32H7      ) || defined(STM32L0      )
#define RCC_CIER_0_HSERDYIE HSERDYIE
#define RCC_CIFR_0_HSERDYF HSERDYF
#define RCC_CICR_0_HSERDYC HSERDYC
#else
#define RCC_CIER_0_HSERDYIE
#define RCC_CIFR_0_HSERDYF
#define RCC_CICR_0_HSERDYC
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32H7      ) || defined(STM32L4      ) || defined(STM32WB      )
#define RCC_CIER_0_LSECSSIE LSECSSIE
#define RCC_AHB1RSTR_0_DMA1RST DMA1RST
#define RCC_AHB1RSTR_0_DMA2RST DMA2RST
#define RCC_AHB1ENR_0_DMA1EN DMA1EN
#define RCC_AHB1ENR_0_DMA2EN DMA2EN
#else
#define RCC_CIER_0_LSECSSIE
#define RCC_AHB1RSTR_0_DMA1RST
#define RCC_AHB1RSTR_0_DMA2RST
#define RCC_AHB1ENR_0_DMA1EN
#define RCC_AHB1ENR_0_DMA2EN
#endif

#if	defined(STM32WB      ) || defined(STM32L412xx  ) || defined(STM32L422xx  ) || defined(STM32L431xx  ) || defined(STM32L432xx  ) || \
    defined(STM32L433xx  ) || defined(STM32L442xx  ) || defined(STM32L443xx  ) || defined(STM32L451xx  ) || defined(STM32L452xx  ) || \
    defined(STM32L462xx  ) || defined(STM32L471xx  ) || defined(STM32L476xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || \
    defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || \
    defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_CIER_0_HSI48RDYIE HSI48RDYIE
#define RCC_CIFR_1_HSI48RDYF HSI48RDYF
#define RCC_CICR_1_HSI48RDYC HSI48RDYC
#define RCC_APB1ENR1_0_CRSEN CRSEN
#else
#define RCC_CIER_0_HSI48RDYIE
#define RCC_CIFR_1_HSI48RDYF
#define RCC_CICR_1_HSI48RDYC
#define RCC_APB1ENR1_0_CRSEN
#endif

#if	defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L0      )
#define RCC_CIER_2
#endif

#if	defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      )
#define RCC_CIER_2_PLLSYSRDYIE PLLSYSRDYIE
#define RCC_CIFR_2_PLLSYSRDYF PLLSYSRDYF
#define RCC_CICR_2_PLLSYSRDYC PLLSYSRDYC
#define RCC_PLLSYSCFGR
#define RCC_MAP4_PLLSYSCFGR PLLSYSCFGR_t PLLSYSCFGR
#else
#define RCC_CIER_2_PLLSYSRDYIE
#define RCC_CIFR_2_PLLSYSRDYF
#define RCC_CICR_2_PLLSYSRDYC
#define RCC_MAP4_PLLSYSCFGR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32G0      ) || defined(STM32L4      )
#define RCC_CIFR_1_CSSF CSSF
#define RCC_CICR_1_CSSC CSSC
#else
#define RCC_CIFR_1_CSSF
#define RCC_CICR_1_CSSC
#endif

#if	defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L0      ) || defined(STM32WB      )
#define RCC_CIFR_2
#define RCC_CICR_2
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F4      ) || defined(STM32F7      ) || \
    defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32H7      ) || defined(STM32L0      ) || \
    defined(STM32L1      ) || defined(STM32L4      )
#define RCC_CSR_0_LSION LSION
#define RCC_CSR_0_LSIRDY LSIRDY
#else
#define RCC_CSR_0_LSION
#define RCC_CSR_0_LSIRDY
#endif

#if	defined(STM32L151xBA ) || defined(STM32L151xC  ) || defined(STM32L151xCA ) || defined(STM32L152xBA ) || defined(STM32L152xCA )
#define RCC_CSR_0_LSECSSD LSECSSD
#define RCC_CSR_3
#define RCC_CIR_2_LSECSSF LSECSSF
#define RCC_CIR_2_LSECSSIE LSECSSIE
#define RCC_CIR_2_LSECSSC LSECSSC
#else
#define RCC_CSR_0_LSECSSD
#define RCC_CIR_2_LSECSSF
#define RCC_CIR_2_LSECSSIE
#define RCC_CIR_2_LSECSSC
#endif

#if	defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L4      ) || defined(STM32WB      ) || \
    defined(STM32L010x4  ) || defined(STM32L010x6  ) || defined(STM32L010x8  ) || defined(STM32L010xB  ) || defined(STM32L011xx  ) || \
    defined(STM32L021xx  ) || defined(STM32L031xx  ) || defined(STM32L041xx  ) || defined(STM32L071xx  ) || defined(STM32L081xx  )
#define RCC_CSR_0_RMVF RMVF
#else
#define RCC_CSR_0_RMVF
#endif

#if	defined(STM32L010x4  ) || defined(STM32L010x6  ) || defined(STM32L010x8  ) || defined(STM32L010xB  ) || defined(STM32L011xx  ) || \
    defined(STM32L021xx  ) || defined(STM32L031xx  ) || defined(STM32L041xx  ) || defined(STM32L071xx  ) || defined(STM32L081xx  ) || \
    defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || \
    defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_CSR_0_FWRSTF FWRSTF
#define RCC_APB2ENR_0_FWEN FWEN
#else
#define RCC_CSR_0_FWRSTF
#define RCC_APB2ENR_0_FWEN
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || \
    defined(STM32L0      ) || defined(STM32L4      ) || defined(STM32WB      ) || defined(STM32L151xBA ) || defined(STM32L151xC  ) || \
    defined(STM32L151xCA ) || defined(STM32L152xBA ) || defined(STM32L152xCA )
#define RCC_CSR_0_OBLRSTF OBLRSTF
#else
#define RCC_CSR_0_OBLRSTF
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32G0      ) || defined(STM32L0      ) || defined(STM32L1      ) || \
    defined(STM32L4      ) || defined(STM32WB      ) || defined(STM32F205xx  ) || defined(STM32F207xx  )
#define RCC_CSR_0_PINRSTF PINRSTF
#else
#define RCC_CSR_0_PINRSTF
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L4      ) || defined(STM32WB      )
#define RCC_CSR_0_BORRSTF BORRSTF
#define RCC_AHB2RSTR_0_GPIOBRST GPIOBRST
#define RCC_AHB2RSTR_0_GPIOCRST GPIOCRST
#define RCC_AHB2RSTR_1_GPIOARST GPIOARST
#define RCC_AHB2ENR_0_GPIOBEN GPIOBEN
#define RCC_AHB2ENR_0_GPIOCEN GPIOCEN
#define RCC_AHB2ENR_1_GPIOAEN GPIOAEN
#define RCC_ICSCR_1
#define RCC_APB1RSTR1
#define RCC_APB1RSTR2
#define RCC_APB1ENR1
#define RCC_APB1ENR2
#define RCC_AHB1SMENR
#define RCC_AHB2SMENR
#define RCC_AHB3SMENR
#define RCC_APB1SMENR1
#define RCC_APB1SMENR2
#define RCC_APB2SMENR_0_TIM1SMEN TIM1SMEN
#define RCC_APB2SMENR_0_TIM16SMEN TIM16SMEN
#define RCC_MAP0_AHB3ENR AHB3ENR_t AHB3ENR
#define RCC_MAP2_AHB1RSTR AHB1RSTR_t AHB1RSTR
#define RCC_MAP2_AHB2RSTR AHB2RSTR_t AHB2RSTR
#define RCC_MAP2_AHB3RSTR AHB3RSTR_t AHB3RSTR
#define RCC_MAP2_APB1RSTR1 APB1RSTR1_t APB1RSTR1
#define RCC_MAP2_APB1RSTR2 APB1RSTR2_t APB1RSTR2
#define RCC_MAP2_APB2RSTR APB2RSTR_t APB2RSTR
#define RCC_MAP2_AHB1ENR AHB1ENR_t AHB1ENR
#define RCC_MAP2_AHB2ENR AHB2ENR_t AHB2ENR
#define RCC_MAP2_APB1ENR1 APB1ENR1_t APB1ENR1
#define RCC_MAP2_APB1ENR2 APB1ENR2_t APB1ENR2
#define RCC_MAP2_APB2ENR APB2ENR_t APB2ENR
#define RCC_MAP2_AHB1SMENR AHB1SMENR_t AHB1SMENR
#define RCC_MAP2_AHB2SMENR AHB2SMENR_t AHB2SMENR
#define RCC_MAP2_AHB3SMENR AHB3SMENR_t AHB3SMENR
#define RCC_MAP2_APB1SMENR1 APB1SMENR1_t APB1SMENR1
#define RCC_MAP2_APB1SMENR2 APB1SMENR2_t APB1SMENR2
#define RCC_MAP2_APB2SMENR APB2SMENR_t APB2SMENR
#define RCC_MAP2_BDCR BDCR_t BDCR
#define RCC_MAP2_CSR CSR_t CSR
#else
#define RCC_CSR_0_BORRSTF
#define RCC_AHB2RSTR_0_GPIOBRST
#define RCC_AHB2RSTR_0_GPIOCRST
#define RCC_AHB2RSTR_1_GPIOARST
#define RCC_AHB2ENR_0_GPIOBEN
#define RCC_AHB2ENR_0_GPIOCEN
#define RCC_AHB2ENR_1_GPIOAEN
#define RCC_APB2SMENR_0_TIM1SMEN
#define RCC_APB2SMENR_0_TIM16SMEN
#define RCC_MAP0_AHB3ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_AHB1RSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_AHB2RSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_AHB3RSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_APB1RSTR1 __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_APB1RSTR2 __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_APB2RSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_AHB1ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_AHB2ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_APB1ENR1 __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_APB1ENR2 __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_APB2ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_AHB1SMENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_AHB2SMENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_AHB3SMENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_APB1SMENR1 __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_APB1SMENR2 __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_APB2SMENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_BDCR __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_CSR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32G0      ) || defined(STM32L0      ) || defined(STM32L1      ) || \
    defined(STM32L4      ) || defined(STM32WB      )
#define RCC_CSR_0_IWDGRSTF IWDGRSTF
#else
#define RCC_CSR_0_IWDGRSTF
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L0      ) || defined(STM32L1      ) || defined(STM32L4      )
#define RCC_CSR_0_LPWRSTF LPWRSTF
#else
#define RCC_CSR_0_LPWRSTF
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F4      ) || defined(STM32F7      ) || \
    defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L0      ) || defined(STM32L1      ) || \
    defined(STM32WB      )
#define RCC_CSR_1
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F4      ) || defined(STM32F7      ) || \
    defined(STM32L1      ) || defined(STM32L051xx  ) || defined(STM32L052xx  ) || defined(STM32L053xx  ) || defined(STM32L062xx  ) || \
    defined(STM32L063xx  ) || defined(STM32L072xx  ) || defined(STM32L073xx  ) || defined(STM32L082xx  ) || defined(STM32L083xx  )
#define RCC_CSR_1_RMVF RMVF
#else
#define RCC_CSR_1_RMVF
#endif

#if	defined(STM32F4      ) || defined(STM32F7      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32F215xx  ) || \
    defined(STM32F217xx  )
#define RCC_CSR_1_PADRSTF PADRSTF
#else
#define RCC_CSR_1_PADRSTF
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F4      ) || defined(STM32F7      ) || \
    defined(STM32L0      ) || defined(STM32L1      )
#define RCC_CSR_1_PORRSTF PORRSTF
#define RCC_APB1RSTR
#define RCC_APB1ENR
#else
#define RCC_CSR_1_PORRSTF
#endif

#if	defined(STM32F2      ) || defined(STM32F4      ) || defined(STM32F7      ) || defined(STM32G4      ) || defined(STM32GB      )
#define RCC_CSR_1_WDGRSTF WDGRSTF
#else
#define RCC_CSR_1_WDGRSTF
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F4      ) || defined(STM32F7      ) || \
    defined(STM32G0      ) || defined(STM32WB      )
#define RCC_CSR_1_LPWRRSTF LPWRRSTF
#else
#define RCC_CSR_1_LPWRRSTF
#endif

#if	defined(STM32G0      ) || defined(STM32L0      ) || defined(STM32L1      ) || defined(STM32L412xx  ) || defined(STM32L422xx  ) || \
    defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L433xx  ) || defined(STM32L442xx  ) || defined(STM32L443xx  ) || \
    defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  ) || defined(STM32L475xx  ) || \
    defined(STM32L476xx  ) || defined(STM32L485xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  )
#define RCC_CSR_2
#endif

#if	defined(STM32L412xx  ) || defined(STM32L422xx  ) || defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L433xx  ) || \
    defined(STM32L442xx  ) || defined(STM32L443xx  ) || defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || \
    defined(STM32L471xx  ) || defined(STM32L475xx  ) || defined(STM32L476xx  ) || defined(STM32L485xx  ) || defined(STM32L486xx  ) || \
    defined(STM32L496xx  ) || defined(STM32L4A6xx  )
#define RCC_CSR_2_FIREWALLRSTF FIREWALLRSTF
#define RCC_APB2ENR_1_FIREWALLEN FIREWALLEN
#else
#define RCC_CSR_2_FIREWALLRSTF
#define RCC_APB2ENR_1_FIREWALLEN
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32H7      ) || \
    defined(STM32L4      ) || defined(STM32WB      ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F413xx  ) || \
    defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || \
    defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_AHB3RSTR
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32H7      ) || defined(STM32WB      ) || defined(STM32L4P5xx  ) || \
    defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || \
    defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_AHB3RSTR_0
#endif

#if	defined(STM32F7      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32WB      ) || defined(STM32F413xx  ) || \
    defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || \
    defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  ) || defined(STM32L475xx  ) || defined(STM32L476xx  ) || \
    defined(STM32L485xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || \
    defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || \
    defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_AHB3RSTR_1
#define RCC_AHB3ENR_1
#endif

#if	defined(STM32F7      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || \
    defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  ) || \
    defined(STM32L475xx  ) || defined(STM32L476xx  ) || defined(STM32L485xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || \
    defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || \
    defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_AHB3RSTR_1_FMCRST FMCRST
#define RCC_AHB3ENR_1_FMCEN FMCEN
#else
#define RCC_AHB3RSTR_1_FMCRST
#define RCC_AHB3ENR_1_FMCEN
#endif

#if	defined(STM32F7      ) || defined(STM32F413xx  ) || defined(STM32F423xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || \
    defined(STM32F479xx  )
#define RCC_AHB3RSTR_1_QSPIRST QSPIRST
#define RCC_AHB3LPENR_1_QSPILPEN QSPILPEN
#define RCC_AHB3ENR_1_QSPIEN QSPIEN
#else
#define RCC_AHB3RSTR_1_QSPIRST
#define RCC_AHB3LPENR_1_QSPILPEN
#define RCC_AHB3ENR_1_QSPIEN
#endif

#if	defined(STM32F2      ) || defined(STM32WB      ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F413xx  ) || \
    defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || defined(STM32L412xx  ) || defined(STM32L422xx  ) || \
    defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L433xx  ) || defined(STM32L442xx  ) || defined(STM32L443xx  ) || \
    defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  ) || defined(STM32L475xx  ) || \
    defined(STM32L476xx  ) || defined(STM32L485xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  )
#define RCC_AHB3RSTR_2
#define RCC_AHB3ENR_2
#endif

#if	defined(STM32F2      ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || \
    defined(STM32F417xx  ) || defined(STM32F423xx  )
#define RCC_AHB3RSTR_2_FSMCRST FSMCRST
#define RCC_AHB3LPENR_2
#define RCC_AHB3ENR_2_FSMCEN FSMCEN
#else
#define RCC_AHB3RSTR_2_FSMCRST
#define RCC_AHB3ENR_2_FSMCEN
#endif

#if	defined(STM32F2      ) || defined(STM32F4      ) || defined(STM32F7      ) || defined(STM32G4      ) || defined(STM32GB      ) || \
    defined(STM32H7      ) || defined(STM32L4      ) || defined(STM32WB      )
#define RCC_AHB1RSTR
#define RCC_AHB1ENR
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || \
    defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_AHB1RSTR_0_DMAMUX1RST DMAMUX1RST
#define RCC_AHB1SMENR_0_DMAMUX1SMEN DMAMUX1SMEN
#define RCC_AHB2SMENR_0_SRAM3SMEN SRAM3SMEN
#define RCC_CCIPR2_0
#else
#define RCC_AHB1RSTR_0_DMAMUX1RST
#define RCC_AHB1SMENR_0_DMAMUX1SMEN
#define RCC_AHB2SMENR_0_SRAM3SMEN
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F412Cx  ) || \
    defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || \
    defined(STM32F417xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || \
    defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_AHB1RSTR_0_GPIOGRST GPIOGRST
#define RCC_AHB1RSTR_1_GPIOFRST GPIOFRST
#define RCC_AHB1ENR_0_GPIOGEN GPIOGEN
#define RCC_AHB1ENR_1_GPIOFEN GPIOFEN
#define RCC_AHB1LPENR_0_GPIOGLPEN GPIOGLPEN
#define RCC_AHB1LPENR_1_GPIOFLPEN GPIOFLPEN
#define RCC_APB1RSTR_0_CAN1RST CAN1RST
#define RCC_APB1ENR_0_CAN1EN CAN1EN
#define RCC_APB1LPENR_0_TIM12LPEN TIM12LPEN
#define RCC_APB1LPENR_0_TIM13LPEN TIM13LPEN
#define RCC_APB1LPENR_0_TIM14LPEN TIM14LPEN
#define RCC_APB1LPENR_0_CAN1LPEN CAN1LPEN
#define RCC_APB1LPENR_0_CAN2LPEN CAN2LPEN
#else
#define RCC_AHB1RSTR_0_GPIOGRST
#define RCC_AHB1RSTR_1_GPIOFRST
#define RCC_AHB1ENR_0_GPIOGEN
#define RCC_AHB1ENR_1_GPIOFEN
#define RCC_AHB1LPENR_0_GPIOGLPEN
#define RCC_AHB1LPENR_1_GPIOFLPEN
#define RCC_APB1RSTR_0_CAN1RST
#define RCC_APB1ENR_0_CAN1EN
#define RCC_APB1LPENR_0_TIM12LPEN
#define RCC_APB1LPENR_0_TIM13LPEN
#define RCC_APB1LPENR_0_TIM14LPEN
#define RCC_APB1LPENR_0_CAN1LPEN
#define RCC_APB1LPENR_0_CAN2LPEN
#endif

#if	defined(STM32F429xx  ) || defined(STM32F439xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  ) || defined(STM32F745xx  ) || \
    defined(STM32F746xx  ) || defined(STM32F750xx  ) || defined(STM32F756xx  ) || defined(STM32F765xx  ) || defined(STM32F767xx  ) || \
    defined(STM32F769xx  ) || defined(STM32F777xx  ) || defined(STM32F779xx  )
#define RCC_AHB1RSTR_0_GPIOJRST GPIOJRST
#define RCC_AHB1RSTR_0_GPIOKRST GPIOKRST
#define RCC_AHB1RSTR_1_DMA2DRST DMA2DRST
#define RCC_AHB1ENR_0_GPIOJEN GPIOJEN
#define RCC_AHB1ENR_0_GPIOKEN GPIOKEN
#define RCC_AHB1ENR_0_CCMDATARAMEN CCMDATARAMEN
#define RCC_AHB1ENR_0_DMA2DEN DMA2DEN
#define RCC_APB2LPENR_0_LTDCLPEN LTDCLPEN
#else
#define RCC_AHB1RSTR_0_GPIOJRST
#define RCC_AHB1RSTR_0_GPIOKRST
#define RCC_AHB1RSTR_1_DMA2DRST
#define RCC_AHB1ENR_0_GPIOJEN
#define RCC_AHB1ENR_0_GPIOKEN
#define RCC_AHB1ENR_0_CCMDATARAMEN
#define RCC_AHB1ENR_0_DMA2DEN
#define RCC_APB2LPENR_0_LTDCLPEN
#endif

#if	defined(STM32F2      ) || defined(STM32F4      ) || defined(STM32F7      ) || defined(STM32G4      ) || defined(STM32GB      ) || \
    defined(STM32WB      ) || defined(STM32L412xx  ) || defined(STM32L422xx  ) || defined(STM32L476xx  ) || defined(STM32L486xx  ) || \
    defined(STM32L496xx  ) || defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || \
    defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_AHB1RSTR_0_CRCRST CRCRST
#else
#define RCC_AHB1RSTR_0_CRCRST
#endif

#if	defined(STM32L476xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || \
    defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || \
    defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_AHB1RSTR_0_DMA2DRST DMA2DRST
#define RCC_AHB2RSTR_0_GPIOIRST GPIOIRST
#define RCC_AHB2RSTR_0_DCMIRST DCMIRST
#define RCC_AHB1ENR_1_DMA2DEN DMA2DEN
#define RCC_AHB2ENR_0_GPIOIEN GPIOIEN
#define RCC_AHB2ENR_0_DCMIEN DCMIEN
#define RCC_PLLSAI2CFGR_PLLSAI2PDIV PLLSAI2PDIV
#define RCC_AHB1SMENR_0_DMA2DSMEN DMA2DSMEN
#define RCC_AHB2SMENR_0_GPIOISMEN GPIOISMEN
#define RCC_AHB2SMENR_0_DCMISMEN DCMISMEN
#else
#define RCC_AHB1RSTR_0_DMA2DRST
#define RCC_AHB2RSTR_0_GPIOIRST
#define RCC_AHB2RSTR_0_DCMIRST
#define RCC_AHB1ENR_1_DMA2DEN
#define RCC_AHB2ENR_0_GPIOIEN
#define RCC_AHB2ENR_0_DCMIEN
#define RCC_PLLSAI2CFGR_PLLSAI2PDIV
#define RCC_AHB1SMENR_0_DMA2DSMEN
#define RCC_AHB2SMENR_0_GPIOISMEN
#define RCC_AHB2SMENR_0_DCMISMEN
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F415xx  ) || \
    defined(STM32F417xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || \
    defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_AHB1RSTR_0_OTGHSRST OTGHSRST
#define RCC_AHB1ENR_0_OTGHSEN OTGHSEN
#define RCC_AHB1ENR_0_OTGHSULPIEN OTGHSULPIEN
#define RCC_AHB1ENR_2_BKPSRAMEN BKPSRAMEN
#define RCC_APB2ENR_0_ADC2EN ADC2EN
#define RCC_APB2ENR_0_ADC3EN ADC3EN
#define RCC_AHB1LPENR_0_BKPSRAMLPEN BKPSRAMLPEN
#define RCC_AHB1LPENR_0_OTGHSLPEN OTGHSLPEN
#define RCC_AHB1LPENR_0_OTGHSULPILPEN OTGHSULPILPEN
#define RCC_APB2LPENR_0_ADC2LPEN ADC2LPEN
#define RCC_APB2LPENR_0_ADC3LPEN ADC3LPEN
#define RCC_APB1RSTR_0_UART3RST UART3RST
#define RCC_APB1LPENR_0_UART4LPEN UART4LPEN
#define RCC_APB1LPENR_0_UART5LPEN UART5LPEN
#else
#define RCC_AHB1RSTR_0_OTGHSRST
#define RCC_AHB1ENR_0_OTGHSEN
#define RCC_AHB1ENR_0_OTGHSULPIEN
#define RCC_AHB1ENR_2_BKPSRAMEN
#define RCC_APB2ENR_0_ADC2EN
#define RCC_APB2ENR_0_ADC3EN
#define RCC_AHB1LPENR_0_BKPSRAMLPEN
#define RCC_AHB1LPENR_0_OTGHSLPEN
#define RCC_AHB1LPENR_0_OTGHSULPILPEN
#define RCC_APB2LPENR_0_ADC2LPEN
#define RCC_APB2LPENR_0_ADC3LPEN
#define RCC_APB1RSTR_0_UART3RST
#define RCC_APB1LPENR_0_UART4LPEN
#define RCC_APB1LPENR_0_UART5LPEN
#endif

#if	defined(STM32F2      ) || defined(STM32F4      ) || defined(STM32F7      ) || defined(STM32G4      ) || defined(STM32GB      ) || \
    defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L433xx  ) || defined(STM32L442xx  ) || defined(STM32L443xx  ) || \
    defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  ) || defined(STM32L475xx  ) || \
    defined(STM32L485xx  )
#define RCC_AHB1RSTR_1
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F415xx  ) || \
    defined(STM32F417xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || \
    defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_AHB1RSTR_1_GPIOIRST GPIOIRST
#define RCC_AHB1ENR_1_GPIOIEN GPIOIEN
#define RCC_AHB1LPENR_0_GPIOILPEN GPIOILPEN
#define RCC_AHB1LPENR_2
#else
#define RCC_AHB1RSTR_1_GPIOIRST
#define RCC_AHB1ENR_1_GPIOIEN
#define RCC_AHB1LPENR_0_GPIOILPEN
#endif

#if	defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L433xx  ) || defined(STM32L442xx  ) || defined(STM32L443xx  ) || \
    defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  ) || defined(STM32L475xx  ) || \
    defined(STM32L485xx  )
#define RCC_AHB1RSTR_1_CRCRST CRCRST
#else
#define RCC_AHB1RSTR_1_CRCRST
#endif

#if	defined(STM32F2      ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || \
    defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F469xx  ) || \
    defined(STM32F479xx  ) || defined(STM32F745xx  ) || defined(STM32F746xx  ) || defined(STM32F750xx  ) || defined(STM32F756xx  ) || \
    defined(STM32F765xx  ) || defined(STM32F767xx  ) || defined(STM32F769xx  ) || defined(STM32F777xx  ) || defined(STM32F779xx  )
#define RCC_AHB1RSTR_1_ETHMACRST ETHMACRST
#define RCC_AHB1ENR_1_ETHMACPTPEN ETHMACPTPEN
#define RCC_AHB1ENR_2_ETHMACEN ETHMACEN
#define RCC_AHB1ENR_2_ETHMACTXEN ETHMACTXEN
#define RCC_AHB1ENR_2_ETHMACRXEN ETHMACRXEN
#else
#define RCC_AHB1RSTR_1_ETHMACRST
#define RCC_AHB1ENR_1_ETHMACPTPEN
#define RCC_AHB1ENR_2_ETHMACEN
#define RCC_AHB1ENR_2_ETHMACTXEN
#define RCC_AHB1ENR_2_ETHMACRXEN
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32H7      ) || \
    defined(STM32L4      ) || defined(STM32WB      ) || defined(STM32F401xC  ) || defined(STM32F401xE  ) || defined(STM32F405xx  ) || \
    defined(STM32F407xx  ) || defined(STM32F411xE  ) || defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || \
    defined(STM32F412Zx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || \
    defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || \
    defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_AHB2RSTR
#define RCC_AHB2ENR
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32H7      ) || \
    defined(STM32L4      ) || defined(STM32WB      ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F412Cx  ) || \
    defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || \
    defined(STM32F417xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || \
    defined(STM32F439xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_AHB2RSTR_0
#define RCC_AHB2ENR_0
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32WB      ) || defined(STM32L431xx  ) || defined(STM32L432xx  ) || \
    defined(STM32L433xx  ) || defined(STM32L442xx  ) || defined(STM32L443xx  ) || defined(STM32L451xx  ) || defined(STM32L452xx  ) || \
    defined(STM32L462xx  ) || defined(STM32L471xx  ) || defined(STM32L475xx  ) || defined(STM32L476xx  ) || defined(STM32L485xx  ) || \
    defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || \
    defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || \
    defined(STM32L4S9xx  )
#define RCC_AHB2RSTR_0_GPIODRST GPIODRST
#define RCC_AHB2RSTR_1_GPIOERST GPIOERST
#define RCC_APB2RSTR_1_SAI1RST SAI1RST
#define RCC_AHB2ENR_0_GPIODEN GPIODEN
#define RCC_AHB2ENR_1_GPIOEEN GPIOEEN
#define RCC_APB2ENR_1_SAI1EN SAI1EN
#define RCC_AHB2SMENR_0_GPIOESMEN GPIOESMEN
#define RCC_APB2SMENR_0_SAI1SMEN SAI1SMEN
#else
#define RCC_AHB2RSTR_0_GPIODRST
#define RCC_AHB2RSTR_1_GPIOERST
#define RCC_APB2RSTR_1_SAI1RST
#define RCC_AHB2ENR_0_GPIODEN
#define RCC_AHB2ENR_1_GPIOEEN
#define RCC_APB2ENR_1_SAI1EN
#define RCC_AHB2SMENR_0_GPIOESMEN
#define RCC_APB2SMENR_0_SAI1SMEN
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32H7      ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || \
    defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || \
    defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || \
    defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_AHB2RSTR_0_RNGRST RNGRST
#define RCC_AHB2ENR_0_RNGEN RNGEN
#define RCC_AHB2LPENR_0_RNGLPEN RNGLPEN
#else
#define RCC_AHB2RSTR_0_RNGRST
#define RCC_AHB2ENR_0_RNGEN
#define RCC_AHB2LPENR_0_RNGLPEN
#endif

#if	defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L433xx  ) || defined(STM32L442xx  ) || defined(STM32L443xx  ) || \
    defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  ) || defined(STM32L475xx  ) || \
    defined(STM32L476xx  ) || defined(STM32L485xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  ) || \
    defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || \
    defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_AHB2RSTR_0_AESRST AESRST
#define RCC_AHB2ENR_0_AESEN AESEN
#define RCC_PLLSAI1CFGR_0
#define RCC_APB1RSTR1_0_CAN1RST CAN1RST
#define RCC_APB1RSTR1_0_DAC1RST DAC1RST
#define RCC_APB1ENR1_0_CAN1EN CAN1EN
#define RCC_APB1ENR1_0_DAC1EN DAC1EN
#define RCC_AHB2SMENR_0_AESSMEN AESSMEN
#define RCC_APB1SMENR1_0_CAN1SMEN CAN1SMEN
#define RCC_APB1SMENR1_0_DAC1SMEN DAC1SMEN
#else
#define RCC_AHB2RSTR_0_AESRST
#define RCC_AHB2ENR_0_AESEN
#define RCC_APB1RSTR1_0_CAN1RST
#define RCC_APB1RSTR1_0_DAC1RST
#define RCC_APB1ENR1_0_CAN1EN
#define RCC_APB1ENR1_0_DAC1EN
#define RCC_AHB2SMENR_0_AESSMEN
#define RCC_APB1SMENR1_0_CAN1SMEN
#define RCC_APB1SMENR1_0_DAC1SMEN
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L4      ) || \
    defined(STM32WB      ) || defined(STM32F401xC  ) || defined(STM32F401xE  ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || \
    defined(STM32F411xE  ) || defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || \
    defined(STM32F413xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || \
    defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || \
    defined(STM32F479xx  )
#define RCC_AHB2RSTR_1
#define RCC_AHB2ENR_1
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L475xx  ) || defined(STM32L476xx  ) || defined(STM32L485xx  ) || \
    defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || \
    defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || \
    defined(STM32L4S9xx  )
#define RCC_AHB2RSTR_1_GPIOFRST GPIOFRST
#define RCC_AHB2RSTR_1_GPIOGRST GPIOGRST
#define RCC_AHB2ENR_1_GPIOFEN GPIOFEN
#define RCC_AHB2ENR_1_GPIOGEN GPIOGEN
#define RCC_APB1RSTR1_0_TIM3RST TIM3RST
#define RCC_APB1RSTR1_0_TIM4RST TIM4RST
#define RCC_APB1RSTR1_0_TIM5RST TIM5RST
#define RCC_APB1ENR1_0_TIM4EN TIM4EN
#define RCC_APB1ENR1_0_TIM5EN TIM5EN
#define RCC_APB1ENR1_0_UART5EN UART5EN
#define RCC_AHB2SMENR_0_GPIOFSMEN GPIOFSMEN
#define RCC_AHB2SMENR_0_GPIOGSMEN GPIOGSMEN
#define RCC_AHB3SMENR_0_FMCSMEN FMCSMEN
#define RCC_APB1SMENR1_0_TIM3SMEN TIM3SMEN
#define RCC_APB1SMENR1_0_TIM4SMEN TIM4SMEN
#define RCC_APB1SMENR1_0_TIM5SMEN TIM5SMEN
#define RCC_APB1SMENR1_0_UART4SMEN UART4SMEN
#define RCC_APB1SMENR1_0_UART5SMEN UART5SMEN
#define RCC_APB2SMENR_0_TIM8SMEN TIM8SMEN
#else
#define RCC_AHB2RSTR_1_GPIOFRST
#define RCC_AHB2RSTR_1_GPIOGRST
#define RCC_AHB2ENR_1_GPIOFEN
#define RCC_AHB2ENR_1_GPIOGEN
#define RCC_APB1RSTR1_0_TIM3RST
#define RCC_APB1RSTR1_0_TIM4RST
#define RCC_APB1RSTR1_0_TIM5RST
#define RCC_APB1ENR1_0_TIM4EN
#define RCC_APB1ENR1_0_TIM5EN
#define RCC_APB1ENR1_0_UART5EN
#define RCC_AHB2SMENR_0_GPIOFSMEN
#define RCC_AHB2SMENR_0_GPIOGSMEN
#define RCC_AHB3SMENR_0_FMCSMEN
#define RCC_APB1SMENR1_0_TIM3SMEN
#define RCC_APB1SMENR1_0_TIM4SMEN
#define RCC_APB1SMENR1_0_TIM5SMEN
#define RCC_APB1SMENR1_0_UART4SMEN
#define RCC_APB1SMENR1_0_UART5SMEN
#define RCC_APB2SMENR_0_TIM8SMEN
#endif

#if	defined(STM32F2      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32WB      ) || defined(STM32F405xx  ) || \
    defined(STM32F407xx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || \
    defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || \
    defined(STM32F469xx  ) || defined(STM32F479xx  ) || defined(STM32F745xx  ) || defined(STM32F746xx  ) || defined(STM32F750xx  ) || \
    defined(STM32F756xx  ) || defined(STM32F765xx  ) || defined(STM32F767xx  ) || defined(STM32F769xx  ) || defined(STM32F777xx  ) || \
    defined(STM32F779xx  ) || defined(STM32L476xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  )
#define RCC_AHB2RSTR_2
#define RCC_AHB2ENR_2
#endif

#if	defined(STM32F2      ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || \
    defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || \
    defined(STM32F469xx  ) || defined(STM32F479xx  ) || defined(STM32F745xx  ) || defined(STM32F746xx  ) || defined(STM32F750xx  ) || \
    defined(STM32F756xx  ) || defined(STM32F765xx  ) || defined(STM32F767xx  ) || defined(STM32F769xx  ) || defined(STM32F777xx  ) || \
    defined(STM32F779xx  )
#define RCC_AHB2RSTR_2_DCMIRST DCMIRST
#define RCC_AHB2ENR_2_DCMIEN DCMIEN
#define RCC_AHB2LPENR_1
#else
#define RCC_AHB2RSTR_2_DCMIRST
#define RCC_AHB2ENR_2_DCMIEN
#endif

#if	defined(STM32F215xx  ) || defined(STM32F217xx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || \
    defined(STM32F423xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  ) || \
    defined(STM32F745xx  ) || defined(STM32F746xx  ) || defined(STM32F750xx  ) || defined(STM32F756xx  ) || defined(STM32F765xx  ) || \
    defined(STM32F767xx  ) || defined(STM32F769xx  ) || defined(STM32F777xx  ) || defined(STM32F779xx  )
#define RCC_AHB2RSTR_2_CRYPRST CRYPRST
#define RCC_AHB2ENR_2_CRYPEN CRYPEN
#else
#define RCC_AHB2RSTR_2_CRYPRST
#define RCC_AHB2ENR_2_CRYPEN
#endif

#if	defined(STM32F215xx  ) || defined(STM32F217xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F437xx  ) || \
    defined(STM32F439xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  ) || defined(STM32F745xx  ) || defined(STM32F746xx  ) || \
    defined(STM32F750xx  ) || defined(STM32F756xx  ) || defined(STM32F765xx  ) || defined(STM32F767xx  ) || defined(STM32F769xx  ) || \
    defined(STM32F777xx  ) || defined(STM32F779xx  )
#define RCC_AHB2RSTR_2_HSAHRST HSAHRST
#define RCC_AHB2LPENR_1_CRYPLPEN CRYPLPEN
#else
#define RCC_AHB2RSTR_2_HSAHRST
#define RCC_AHB2LPENR_1_CRYPLPEN
#endif

#if	defined(STM32L476xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  )
#define RCC_AHB2RSTR_2_HASH1RST HASH1RST
#define RCC_AHB2ENR_2_HASH1EN HASH1EN
#define RCC_APB1RSTR1_0_CAN2RST CAN2RST
#define RCC_APB1ENR1_0_CAN2EN CAN2EN
#define RCC_AHB2SMENR_2_HASH1SMEN HASH1SMEN
#define RCC_APB1SMENR1_0_CAN2SMEN CAN2SMEN
#else
#define RCC_AHB2RSTR_2_HASH1RST
#define RCC_AHB2ENR_2_HASH1EN
#define RCC_APB1RSTR1_0_CAN2RST
#define RCC_APB1ENR1_0_CAN2EN
#define RCC_AHB2SMENR_2_HASH1SMEN
#define RCC_APB1SMENR1_0_CAN2SMEN
#endif

#if	defined(STM32F722xx  ) || defined(STM32F723xx  ) || defined(STM32F730xx  ) || defined(STM32F732xx  ) || defined(STM32F733xx  )
#define RCC_AHB2RSTR_3
#define RCC_APB2RSTR_0_SDMMC2RST SDMMC2RST
#define RCC_APB2RSTR_0_USBPHYCRST USBPHYCRST
#define RCC_AHB1ENR_1_DTCMRAMEN DTCMRAMEN
#define RCC_AHB2ENR_3
#define RCC_APB2ENR_0_USBPHYCEN USBPHYCEN
#define RCC_APB2ENR_2_SDMMC2EN SDMMC2EN
#define RCC_AHB1LPENR_0_AXILPEN AXILPEN
#define RCC_AHB1LPENR_0_DTCMLPEN DTCMLPEN
#define RCC_AHB2LPENR_2_AESLPEN AESLPEN
#define RCC_APB2LPENR_0_SDMMC2LPEN SDMMC2LPEN
#define RCC_DCKCFGR1
#define RCC_DCKCFGR2_0_UART1SEL UART1SEL
#define RCC_DCKCFGR2_0_UART2SEL UART2SEL
#define RCC_DCKCFGR2_0_UART3SEL UART3SEL
#define RCC_DCKCFGR2_0_UART4SEL UART4SEL
#define RCC_DCKCFGR2_0_UART5SEL UART5SEL
#define RCC_DCKCFGR2_0_UART6SEL UART6SEL
#define RCC_DCKCFGR2_0_UART7SEL UART7SEL
#define RCC_DCKCFGR2_0_UART8SEL UART8SEL
#define RCC_DCKCFGR2_0_I2C1SEL I2C1SEL
#define RCC_DCKCFGR2_0_I2C2SEL I2C2SEL
#define RCC_DCKCFGR2_0_I2C3SEL I2C3SEL
#define RCC_DCKCFGR2_0_LPTIM1SEL LPTIM1SEL
#define RCC_DCKCFGR2_0_SDMMC1SEL SDMMC1SEL
#define RCC_DCKCFGR2_0_SDMMC2SEL SDMMC2SEL
#define RCC_MAP2_DCKCFGR1 DCKCFGR1_t DCKCFGR1
#define RCC_MAP4_DCKCFGR2 DCKCFGR2_t DCKCFGR2
#else
#define RCC_APB2RSTR_0_SDMMC2RST
#define RCC_APB2RSTR_0_USBPHYCRST
#define RCC_AHB1ENR_1_DTCMRAMEN
#define RCC_APB2ENR_0_USBPHYCEN
#define RCC_APB2ENR_2_SDMMC2EN
#define RCC_AHB1LPENR_0_AXILPEN
#define RCC_AHB1LPENR_0_DTCMLPEN
#define RCC_AHB2LPENR_2_AESLPEN
#define RCC_APB2LPENR_0_SDMMC2LPEN
#define RCC_DCKCFGR2_0_UART1SEL
#define RCC_DCKCFGR2_0_UART2SEL
#define RCC_DCKCFGR2_0_UART3SEL
#define RCC_DCKCFGR2_0_UART4SEL
#define RCC_DCKCFGR2_0_UART5SEL
#define RCC_DCKCFGR2_0_UART6SEL
#define RCC_DCKCFGR2_0_UART7SEL
#define RCC_DCKCFGR2_0_UART8SEL
#define RCC_DCKCFGR2_0_I2C1SEL
#define RCC_DCKCFGR2_0_I2C2SEL
#define RCC_DCKCFGR2_0_I2C3SEL
#define RCC_DCKCFGR2_0_LPTIM1SEL
#define RCC_DCKCFGR2_0_SDMMC1SEL
#define RCC_DCKCFGR2_0_SDMMC2SEL
#define RCC_MAP2_DCKCFGR1 __SOOL_PERIPH_PADDING_4
#define RCC_MAP4_DCKCFGR2 __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32H7      ) || defined(STM32WB      )
#define RCC_APB3RSTR
#endif

#if	defined(STM32H745xx_CORE_CM4) || defined(STM32H745xx_CORE_CM7) || defined(STM32H747xx_CORE_CM4) || defined(STM32H747xx_CORE_CM7) || defined(STM32H750xx  ) || \
    defined(STM32H755xx_CORE_CM4) || defined(STM32H755xx_CORE_CM7) || defined(STM32H757xx_CORE_CM4) || defined(STM32H757xx_CORE_CM7)
#define RCC_APB1LRSTR_0_HDMICECRST HDMICECRST
#define RCC_D3AMR_0_BKPSRAMAMEN BKPSRAMAMEN
#define RCC_APB1LENR_0_HDMICECEN HDMICECEN
#define RCC_AHB3LPENR_0_FLITFLPEN FLITFLPEN
#define RCC_MAP1_C1_AHB3LPENR AHB3LPENR_t C1_AHB3LPENR
#define RCC_MAP1_C1_AHB1LPENR AHB1LPENR_t C1_AHB1LPENR
#else
#define RCC_APB1LRSTR_0_HDMICECRST
#define RCC_D3AMR_0_BKPSRAMAMEN
#define RCC_APB1LENR_0_HDMICECEN
#define RCC_AHB3LPENR_0_FLITFLPEN
#define RCC_MAP1_C1_AHB3LPENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_C1_AHB1LPENR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32H742xx  ) || defined(STM32H743xx  ) || defined(STM32H753xx  )
#define RCC_APB1LRSTR_1
#define RCC_D3AMR_1
#define RCC_AHB1ENR_0_USB2OTGHSULPIEN USB2OTGHSULPIEN
#define RCC_C1_AHB1ENR_0_USB2ULPIEN USB2ULPIEN
#define RCC_C1_AHB1ENR_1
#define RCC_APB1LENR_1
#define RCC_AHB3LPENR_1_FLASHLPEN FLASHLPEN
#define RCC_AHB1LPENR_1_USB2OTGHSULPILPEN USB2OTGHSULPILPEN
#define RCC_C1_AHB3LPENR
#define RCC_C1_AHB1LPENR
#define RCC_MAP2_C1_AHB3LPENR C1_AHB3LPENR_t C1_AHB3LPENR
#define RCC_MAP2_C1_AHB1LPENR C1_AHB1LPENR_t C1_AHB1LPENR
#else
#define RCC_AHB1ENR_0_USB2OTGHSULPIEN
#define RCC_C1_AHB1ENR_0_USB2ULPIEN
#define RCC_AHB3LPENR_1_FLASHLPEN
#define RCC_AHB1LPENR_1_USB2OTGHSULPILPEN
#define RCC_MAP2_C1_AHB3LPENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_C1_AHB1LPENR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F4      ) || defined(STM32F7      ) || \
    defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32H7      ) || defined(STM32L0      ) || defined(STM32L1      ) || \
    defined(STM32L4      ) || defined(STM32WB      )
#define RCC_APB2RSTR
#define RCC_APB2ENR
#endif

#if	defined(STM32F2      ) || defined(STM32F4      ) || defined(STM32F7      ) || defined(STM32H7      )
#define RCC_APB2RSTR_0_TIM1RST TIM1RST
#define RCC_APB2RSTR_0_USART1RST USART1RST
#define RCC_APB2RSTR_0_USART6RST USART6RST
#define RCC_APB2ENR_0_TIM1EN TIM1EN
#define RCC_APB2ENR_0_USART1EN USART1EN
#define RCC_APB2ENR_0_USART6EN USART6EN
#define RCC_AHB1LPENR
#define RCC_APB2LPENR_0_TIM1LPEN TIM1LPEN
#define RCC_APB2LPENR_0_USART1LPEN USART1LPEN
#define RCC_APB2LPENR_0_USART6LPEN USART6LPEN
#define RCC_MAP1_BDCR BDCR_t BDCR
#define RCC_MAP1_CSR CSR_t CSR
#else
#define RCC_APB2RSTR_0_TIM1RST
#define RCC_APB2RSTR_0_USART1RST
#define RCC_APB2RSTR_0_USART6RST
#define RCC_APB2ENR_0_TIM1EN
#define RCC_APB2ENR_0_USART1EN
#define RCC_APB2ENR_0_USART6EN
#define RCC_APB2LPENR_0_TIM1LPEN
#define RCC_APB2LPENR_0_USART1LPEN
#define RCC_APB2LPENR_0_USART6LPEN
#define RCC_MAP1_BDCR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_CSR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32H7      ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || \
    defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || \
    defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || \
    defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_APB2RSTR_0_TIM8RST TIM8RST
#define RCC_APB2ENR_0_TIM8EN TIM8EN
#define RCC_APB2LPENR_0_TIM8LPEN TIM8LPEN
#else
#define RCC_APB2RSTR_0_TIM8RST
#define RCC_APB2ENR_0_TIM8EN
#define RCC_APB2LPENR_0_TIM8LPEN
#endif

#if	defined(STM32F413xx  ) || defined(STM32F423xx  )
#define RCC_APB2RSTR_0_USART9RST USART9RST
#define RCC_APB2RSTR_0_DFSDM2RST DFSDM2RST
#define RCC_APB2RSTR_1_SART10RST SART10RST
#define RCC_APB2ENR_0_DFSDM2EN DFSDM2EN
#define RCC_AHB2LPENR_0_QSPILPEN QSPILPEN
#define RCC_AHB2LPENR_2_FSMCLPEN FSMCLPEN
#define RCC_APB2LPENR_0_USART9LPEN USART9LPEN
#define RCC_APB2LPENR_0_EXTITEN EXTITEN
#define RCC_APB2LPENR_0_DFSDM2LPEN DFSDM2LPEN
#define RCC_APB2LPENR_1_USART10LPEN USART10LPEN
#define RCC_APB1RSTR_1_LPTIMER1RST LPTIMER1RST
#define RCC_APB1RSTR_1_CAN3RST CAN3RST
#define RCC_APB1ENR_1_RTCAPB RTCAPB
#define RCC_APB1ENR_2_LPTIMER1EN LPTIMER1EN
#define RCC_APB1ENR_2_CAN3EN CAN3EN
#define RCC_APB1LPENR_0_RTCAPBEN RTCAPBEN
#define RCC_APB1LPENR_1_LPTIMER1LPEN LPTIMER1LPEN
#define RCC_APB1LPENR_1_USART4LPEN USART4LPEN
#define RCC_APB1LPENR_1_USART5LPEN USART5LPEN
#define RCC_APB1LPENR_1_CAN3LPEN CAN3LPEN
#define RCC_PLLI2SCFGR_0_PLLI2SSRC PLLI2SSRC
#define RCC_DCKCFGR_0_CKDFSDM1ASEL CKDFSDM1ASEL
#define RCC_DCKCFGR_0_LPTIMER1SEL LPTIMER1SEL
#define RCC_DCKCFGR2_1_I2CFMP1SEL I2CFMP1SEL
#define RCC_DCKCFGR2_2_CKSDIOSEL CKSDIOSEL
#define RCC_CKGATENR_EVTCL_CKEN EVTCL_CKEN
#else
#define RCC_APB2RSTR_0_USART9RST
#define RCC_APB2RSTR_0_DFSDM2RST
#define RCC_APB2RSTR_1_SART10RST
#define RCC_APB2ENR_0_DFSDM2EN
#define RCC_AHB2LPENR_0_QSPILPEN
#define RCC_AHB2LPENR_2_FSMCLPEN
#define RCC_APB2LPENR_0_USART9LPEN
#define RCC_APB2LPENR_0_EXTITEN
#define RCC_APB2LPENR_0_DFSDM2LPEN
#define RCC_APB2LPENR_1_USART10LPEN
#define RCC_APB1RSTR_1_LPTIMER1RST
#define RCC_APB1RSTR_1_CAN3RST
#define RCC_APB1ENR_1_RTCAPB
#define RCC_APB1ENR_2_LPTIMER1EN
#define RCC_APB1ENR_2_CAN3EN
#define RCC_APB1LPENR_0_RTCAPBEN
#define RCC_APB1LPENR_1_LPTIMER1LPEN
#define RCC_APB1LPENR_1_USART4LPEN
#define RCC_APB1LPENR_1_USART5LPEN
#define RCC_APB1LPENR_1_CAN3LPEN
#define RCC_PLLI2SCFGR_0_PLLI2SSRC
#define RCC_DCKCFGR_0_CKDFSDM1ASEL
#define RCC_DCKCFGR_0_LPTIMER1SEL
#define RCC_DCKCFGR2_1_I2CFMP1SEL
#define RCC_DCKCFGR2_2_CKSDIOSEL
#define RCC_CKGATENR_EVTCL_CKEN
#endif

#if	defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L433xx  ) || defined(STM32L442xx  ) || defined(STM32L443xx  ) || \
    defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  ) || defined(STM32L475xx  ) || \
    defined(STM32L476xx  ) || defined(STM32L485xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  )
#define RCC_APB2RSTR_0_SDMMCRST SDMMCRST
#define RCC_APB2ENR_1_SDMMCEN SDMMCEN
#define RCC_APB1RSTR2_SWPMI1RST SWPMI1RST
#define RCC_APB1ENR2_SWPMI1EN SWPMI1EN
#define RCC_APB1SMENR2_SWPMI1SMEN SWPMI1SMEN
#define RCC_APB2SMENR_0_SDMMCSMEN SDMMCSMEN
#define RCC_CCIPR_0_SWPMI1SEL SWPMI1SEL
#else
#define RCC_APB2RSTR_0_SDMMCRST
#define RCC_APB2ENR_1_SDMMCEN
#define RCC_APB1RSTR2_SWPMI1RST
#define RCC_APB1ENR2_SWPMI1EN
#define RCC_APB1SMENR2_SWPMI1SMEN
#define RCC_APB2SMENR_0_SDMMCSMEN
#define RCC_CCIPR_0_SWPMI1SEL
#endif

#if	defined(STM32F7      )
#define RCC_APB2RSTR_0_SDMMC1RST SDMMC1RST
#define RCC_APB2ENR_0_SDMMC1EN SDMMC1EN
#define RCC_APB2LPENR_0_SDMMC1LPEN SDMMC1LPEN
#define RCC_APB1RSTR_0_CECRST CECRST
#else
#define RCC_APB2RSTR_0_SDMMC1RST
#define RCC_APB2ENR_0_SDMMC1EN
#define RCC_APB2LPENR_0_SDMMC1LPEN
#define RCC_APB1RSTR_0_CECRST
#endif

#if	defined(STM32F7      ) || defined(STM32H7      ) || defined(STM32F401xC  ) || defined(STM32F401xE  ) || defined(STM32F411xE  ) || \
    defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || \
    defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || \
    defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_APB2RSTR_0_SPI4RST SPI4RST
#else
#define RCC_APB2RSTR_0_SPI4RST
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32H7      ) || \
    defined(STM32L4      )
#define RCC_APB2RSTR_0_TIM15RST TIM15RST
#define RCC_APB2ENR_0_TIM15EN TIM15EN
#else
#define RCC_APB2RSTR_0_TIM15RST
#define RCC_APB2ENR_0_TIM15EN
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32H7      ) || \
    defined(STM32L4      ) || defined(STM32WB      )
#define RCC_APB2RSTR_0_TIM16RST TIM16RST
#define RCC_APB2ENR_0_TIM16EN TIM16EN
#else
#define RCC_APB2RSTR_0_TIM16RST
#define RCC_APB2ENR_0_TIM16EN
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32H7      ) || \
    defined(STM32WB      ) || defined(STM32L475xx  ) || defined(STM32L476xx  ) || defined(STM32L485xx  ) || defined(STM32L486xx  ) || \
    defined(STM32L496xx  ) || defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || \
    defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_APB2RSTR_0_TIM17RST TIM17RST
#define RCC_APB2ENR_0_TIM17EN TIM17EN
#else
#define RCC_APB2RSTR_0_TIM17RST
#define RCC_APB2ENR_0_TIM17EN
#endif

#if	defined(STM32F7      ) || defined(STM32H7      ) || defined(STM32F413xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || \
    defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_APB2RSTR_0_SPI5RST SPI5RST
#define RCC_APB2LPENR_0_SPI5LPEN SPI5LPEN
#else
#define RCC_APB2RSTR_0_SPI5RST
#define RCC_APB2LPENR_0_SPI5LPEN
#endif

#if	defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F469xx  ) || \
    defined(STM32F479xx  ) || defined(STM32F745xx  ) || defined(STM32F746xx  ) || defined(STM32F750xx  ) || defined(STM32F756xx  ) || \
    defined(STM32F765xx  ) || defined(STM32F767xx  ) || defined(STM32F769xx  ) || defined(STM32F777xx  ) || defined(STM32F779xx  )
#define RCC_APB2RSTR_0_SPI6RST SPI6RST
#define RCC_APB2ENR_0_SPI6ENR SPI6ENR
#define RCC_APB2ENR_1_SPI5ENR SPI5ENR
#define RCC_APB2LPENR_0_SPI6LPEN SPI6LPEN
#define RCC_APB1ENR_0_UART7ENR UART7ENR
#define RCC_APB1ENR_0_UART8ENR UART8ENR
#else
#define RCC_APB2RSTR_0_SPI6RST
#define RCC_APB2ENR_0_SPI6ENR
#define RCC_APB2ENR_1_SPI5ENR
#define RCC_APB2LPENR_0_SPI6LPEN
#define RCC_APB1ENR_0_UART7ENR
#define RCC_APB1ENR_0_UART8ENR
#endif

#if	defined(STM32F7      ) || defined(STM32H7      ) || defined(STM32F413xx  ) || defined(STM32F423xx  ) || defined(STM32F429xx  ) || \
    defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_APB2RSTR_0_SAI1RST SAI1RST
#define RCC_APB2ENR_0_SAI1EN SAI1EN
#define RCC_APB2LPENR_0_SAI1LPEN SAI1LPEN
#else
#define RCC_APB2RSTR_0_SAI1RST
#define RCC_APB2ENR_0_SAI1EN
#define RCC_APB2LPENR_0_SAI1LPEN
#endif

#if	defined(STM32F7      ) || defined(STM32H7      ) || defined(STM32F446xx  )
#define RCC_APB2RSTR_0_SAI2RST SAI2RST
#define RCC_APB2ENR_0_SAI2EN SAI2EN
#define RCC_APB2LPENR_0_SAI2LPEN SAI2LPEN
#else
#define RCC_APB2RSTR_0_SAI2RST
#define RCC_APB2ENR_0_SAI2EN
#define RCC_APB2LPENR_0_SAI2LPEN
#endif

#if	defined(STM32F429xx  ) || defined(STM32F439xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  ) || defined(STM32F745xx  ) || \
    defined(STM32F746xx  ) || defined(STM32F750xx  ) || defined(STM32F756xx  ) || defined(STM32F765xx  ) || defined(STM32F767xx  ) || \
    defined(STM32F769xx  ) || defined(STM32F777xx  ) || defined(STM32F779xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || \
    defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || \
    defined(STM32L4S9xx  )
#define RCC_APB2RSTR_0_LTDCRST LTDCRST
#define RCC_APB2ENR_0_LTDCEN LTDCEN
#else
#define RCC_APB2RSTR_0_LTDCRST
#define RCC_APB2ENR_0_LTDCEN
#endif

#if	defined(STM32F469xx  ) || defined(STM32F479xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || \
    defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_APB2RSTR_0_DSIRST DSIRST
#define RCC_APB2ENR_0_DSIEN DSIEN
#else
#define RCC_APB2RSTR_0_DSIRST
#define RCC_APB2ENR_0_DSIEN
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F4      ) || defined(STM32F7      ) || \
    defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L0      ) || defined(STM32L1      ) || defined(STM32L4      ) || \
    defined(STM32WB      )
#define RCC_APB2RSTR_1
#define RCC_APB2ENR_1
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L0      ) || \
    defined(STM32L1      ) || defined(STM32L4      )
#define RCC_APB2RSTR_1_SYSCFGRST SYSCFGRST
#define RCC_APB2ENR_1_SYSCFGEN SYSCFGEN
#else
#define RCC_APB2RSTR_1_SYSCFGRST
#define RCC_APB2ENR_1_SYSCFGEN
#endif

#if	defined(STM32F0      ) || defined(STM32L0      ) || defined(STM32F373xC  ) || defined(STM32F378xx  ) || defined(STM32F398xx  )
#define RCC_APB2RSTR_1_ADCRST ADCRST
#define RCC_APB2ENR_1_ADCEN ADCEN
#else
#define RCC_APB2RSTR_1_ADCRST
#define RCC_APB2ENR_1_ADCEN
#endif

#if	defined(STM32F0      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L4      ) || defined(STM32WB      ) || \
    defined(STM32F301x8  ) || defined(STM32F302x8  ) || defined(STM32F302xC  ) || defined(STM32F302xE  ) || defined(STM32F303x8  ) || \
    defined(STM32F303xC  ) || defined(STM32F303xE  ) || defined(STM32F318xx  ) || defined(STM32F328xx  ) || defined(STM32F334x8  ) || \
    defined(STM32F358xx  )
#define RCC_APB2RSTR_1_TIM1RST TIM1RST
#else
#define RCC_APB2RSTR_1_TIM1RST
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32F301x8  ) || defined(STM32F302x8  ) || defined(STM32F302xC  ) || \
    defined(STM32F302xE  ) || defined(STM32F303xC  ) || defined(STM32F303xE  ) || defined(STM32F318xx  ) || defined(STM32F328xx  ) || \
    defined(STM32F358xx  ) || defined(STM32L475xx  ) || defined(STM32L476xx  ) || defined(STM32L485xx  ) || defined(STM32L486xx  ) || \
    defined(STM32L496xx  ) || defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || \
    defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_APB2RSTR_1_TIM8RST TIM8RST
#define RCC_APB2ENR_1_TIM8EN TIM8EN
#else
#define RCC_APB2RSTR_1_TIM8RST
#define RCC_APB2ENR_1_TIM8EN
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L0      ) || \
    defined(STM32L1      ) || defined(STM32L4      ) || defined(STM32WB      )
#define RCC_APB2RSTR_1_USART1RST USART1RST
#define RCC_APB2ENR_1_USART1EN USART1EN
#else
#define RCC_APB2RSTR_1_USART1RST
#define RCC_APB2ENR_1_USART1EN
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32L1      ) || defined(STM32F303x8  ) || defined(STM32F334x8  ) || \
    defined(STM32F373xC  ) || defined(STM32F378xx  ) || defined(STM32F398xx  ) || defined(STM32F401xC  ) || defined(STM32F401xE  ) || \
    defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F411xE  ) || defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || \
    defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || \
    defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || \
    defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  ) || defined(STM32L010x4  ) || defined(STM32L010x6  ) || \
    defined(STM32L010x8  ) || defined(STM32L010xB  ) || defined(STM32L011xx  ) || defined(STM32L021xx  ) || defined(STM32L031xx  ) || \
    defined(STM32L041xx  ) || defined(STM32L071xx  ) || defined(STM32L081xx  ) || defined(STM32L431xx  ) || defined(STM32L432xx  ) || \
    defined(STM32L442xx  ) || defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  ) || \
    defined(STM32L475xx  ) || defined(STM32L476xx  ) || defined(STM32L485xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || \
    defined(STM32L4A6xx  )
#define RCC_APB2RSTR_2
#endif

#if	defined(STM32F2      ) || defined(STM32F401xC  ) || defined(STM32F401xE  ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || \
    defined(STM32F411xE  ) || defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || \
    defined(STM32F413xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || \
    defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || \
    defined(STM32F479xx  ) || defined(STM32L151xB  ) || defined(STM32L151xD  ) || defined(STM32L151xE  ) || defined(STM32L152xB  ) || \
    defined(STM32L152xC  ) || defined(STM32L152xD  ) || defined(STM32L152xE  )
#define RCC_APB2RSTR_2_SDIORST SDIORST
#define RCC_APB2ENR_2_SDIOEN SDIOEN
#else
#define RCC_APB2RSTR_2_SDIORST
#define RCC_APB2ENR_2_SDIOEN
#endif

#if	defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || \
    defined(STM32F423xx  ) || defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L442xx  ) || defined(STM32L451xx  ) || \
    defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  ) || defined(STM32L475xx  ) || defined(STM32L476xx  ) || \
    defined(STM32L485xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  )
#define RCC_APB2RSTR_2_DFSDMRST DFSDMRST
#else
#define RCC_APB2RSTR_2_DFSDMRST
#endif

#if	defined(STM32F303x8  ) || defined(STM32F334x8  )
#define RCC_APB2RSTR_2_HRTIM1RST HRTIM1RST
#define RCC_APB2ENR_1_HRTIM1EN HRTIM1EN
#define RCC_APB1RSTR_1_DAC2RST DAC2RST
#define RCC_APB1RSTR_1_DAC1RST DAC1RST
#define RCC_APB1ENR_1_DAC2EN DAC2EN
#define RCC_APB1ENR_1_DAC1EN DAC1EN
#define RCC_CFGR3_0_HRTIM1SW HRTIM1SW
#else
#define RCC_APB2RSTR_2_HRTIM1RST
#define RCC_APB2ENR_1_HRTIM1EN
#define RCC_APB1RSTR_1_DAC2RST
#define RCC_APB1RSTR_1_DAC1RST
#define RCC_APB1ENR_1_DAC2EN
#define RCC_APB1ENR_1_DAC1EN
#define RCC_CFGR3_0_HRTIM1SW
#endif

#if	defined(STM32L0      ) || defined(STM32F373xC  ) || defined(STM32F378xx  ) || defined(STM32F398xx  )
#define RCC_APB2RSTR_3
#define RCC_APB2ENR_3
#endif

#if	defined(STM32F2      ) || defined(STM32F4      ) || defined(STM32F7      ) || defined(STM32G4      ) || defined(STM32GB      ) || \
    defined(STM32WB      ) || defined(STM32L412xx  ) || defined(STM32L422xx  ) || defined(STM32L431xx  ) || defined(STM32L432xx  ) || \
    defined(STM32L442xx  ) || defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  ) || \
    defined(STM32L476xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || \
    defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || \
    defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_AHB1ENR_0_CRCEN CRCEN
#else
#define RCC_AHB1ENR_0_CRCEN
#endif

#if	defined(STM32F2      ) || defined(STM32F4      ) || defined(STM32F7      ) || defined(STM32G4      ) || defined(STM32GB      ) || \
    defined(STM32L4      ) || defined(STM32WB      ) || defined(STM32H742xx  ) || defined(STM32H743xx  ) || defined(STM32H745xx_CORE_CM4) || \
    defined(STM32H745xx_CORE_CM7) || defined(STM32H750xx  ) || defined(STM32H753xx  ) || defined(STM32H755xx_CORE_CM4) || defined(STM32H755xx_CORE_CM7)
#define RCC_AHB1ENR_1
#endif

#if	defined(STM32L433xx  ) || defined(STM32L443xx  ) || defined(STM32L475xx  ) || defined(STM32L485xx  )
#define RCC_AHB1ENR_1_CRCEN CRCEN
#define RCC_AHB1SMENR_1_CRCSMEN CRCSMEN
#else
#define RCC_AHB1ENR_1_CRCEN
#define RCC_AHB1SMENR_1_CRCSMEN
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32WB      ) || \
    defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F427xx  ) || \
    defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || \
    defined(STM32F479xx  )
#define RCC_AHB1ENR_2
#endif

#if	defined(STM32H742xx  ) || defined(STM32H743xx  ) || defined(STM32H747xx_CORE_CM4) || defined(STM32H747xx_CORE_CM7) || defined(STM32H753xx  ) || \
    defined(STM32H757xx_CORE_CM4) || defined(STM32H757xx_CORE_CM7)
#define RCC_C1_AHB1ENR
#define RCC_C1_APB1LENR
#define RCC_AHB1LPENR_0_USB1OTGHSLPEN USB1OTGHSLPEN
#define RCC_AHB1LPENR_0_USB1OTGHSULPILPEN USB1OTGHSULPILPEN
#define RCC_AHB1LPENR_0_USB2OTGHSLPEN USB2OTGHSLPEN
#define RCC_MAP1_C1_AHB1ENR C1_AHB1ENR_t C1_AHB1ENR
#define RCC_MAP1_C1_APB1LENR C1_APB1LENR_t C1_APB1LENR
#else
#define RCC_AHB1LPENR_0_USB1OTGHSLPEN
#define RCC_AHB1LPENR_0_USB1OTGHSULPILPEN
#define RCC_AHB1LPENR_0_USB2OTGHSLPEN
#define RCC_MAP1_C1_AHB1ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP1_C1_APB1LENR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32H7      ) || defined(STM32F215xx  ) || defined(STM32F217xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || \
    defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  ) || defined(STM32F745xx  ) || \
    defined(STM32F746xx  ) || defined(STM32F750xx  ) || defined(STM32F756xx  ) || defined(STM32F765xx  ) || defined(STM32F767xx  ) || \
    defined(STM32F769xx  ) || defined(STM32F777xx  ) || defined(STM32F779xx  )
#define RCC_AHB2ENR_0_HASHEN HASHEN
#define RCC_AHB2LPENR_0_HASHLPEN HASHLPEN
#else
#define RCC_AHB2ENR_0_HASHEN
#define RCC_AHB2LPENR_0_HASHLPEN
#endif

#if	defined(STM32H7      ) || defined(STM32F411xE  ) || defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || \
    defined(STM32F412Zx  ) || defined(STM32F413xx  ) || defined(STM32F423xx  ) || defined(STM32F722xx  ) || defined(STM32F723xx  ) || \
    defined(STM32F730xx  ) || defined(STM32F732xx  ) || defined(STM32F733xx  )
#define RCC_APB2ENR_0_SPI4EN SPI4EN
#else
#define RCC_APB2ENR_0_SPI4EN
#endif

#if	defined(STM32H7      ) || defined(STM32F410Cx  ) || defined(STM32F410Rx  ) || defined(STM32F410Tx  ) || defined(STM32F413xx  ) || \
    defined(STM32F423xx  ) || defined(STM32F722xx  ) || defined(STM32F723xx  ) || defined(STM32F730xx  ) || defined(STM32F732xx  ) || \
    defined(STM32F733xx  )
#define RCC_APB2ENR_0_SPI5EN SPI5EN
#else
#define RCC_APB2ENR_0_SPI5EN
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L4      ) || \
    defined(STM32WB      )
#define RCC_APB2ENR_1_TIM1EN TIM1EN
#else
#define RCC_APB2ENR_1_TIM1EN
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32G4      ) || defined(STM32GB      ) || \
    defined(STM32L1      ) || defined(STM32F373xC  ) || defined(STM32F378xx  ) || defined(STM32F398xx  ) || defined(STM32F401xC  ) || \
    defined(STM32F401xE  ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F411xE  ) || defined(STM32F412Cx  ) || \
    defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || \
    defined(STM32F417xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || \
    defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  ) || defined(STM32L475xx  ) || \
    defined(STM32L476xx  ) || defined(STM32L485xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  )
#define RCC_APB2ENR_2
#endif

#if	defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || \
    defined(STM32F469xx  ) || defined(STM32F479xx  ) || defined(STM32F745xx  ) || defined(STM32F746xx  ) || defined(STM32F750xx  ) || \
    defined(STM32F756xx  ) || defined(STM32F765xx  ) || defined(STM32F767xx  ) || defined(STM32F769xx  ) || defined(STM32F777xx  ) || \
    defined(STM32F779xx  )
#define RCC_APB2ENR_2_SPI4ENR SPI4ENR
#else
#define RCC_APB2ENR_2_SPI4ENR
#endif

#if	defined(STM32F0      ) || defined(STM32F373xC  ) || defined(STM32F378xx  ) || defined(STM32F398xx  )
#define RCC_APB2ENR_2_DBGMCUEN DBGMCUEN
#define RCC_CFGR3_1
#else
#define RCC_APB2ENR_2_DBGMCUEN
#endif

#if	defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || \
    defined(STM32F423xx  ) || defined(STM32L475xx  ) || defined(STM32L476xx  ) || defined(STM32L485xx  ) || defined(STM32L486xx  ) || \
    defined(STM32L496xx  ) || defined(STM32L4A6xx  )
#define RCC_APB2ENR_2_DFSDMEN DFSDMEN
#else
#define RCC_APB2ENR_2_DFSDMEN
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32H7      ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || \
    defined(STM32F413xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || \
    defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || \
    defined(STM32F479xx  )
#define RCC_AHB3LPENR
#endif

#if	defined(STM32F7      ) || defined(STM32F413xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || \
    defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  ) || \
    defined(STM32H742xx  ) || defined(STM32H743xx  ) || defined(STM32H753xx  )
#define RCC_AHB3LPENR_1
#endif

#if	defined(STM32F7      ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || \
    defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_AHB3LPENR_1_FMCLPEN FMCLPEN
#else
#define RCC_AHB3LPENR_1_FMCLPEN
#endif

#if	defined(STM32F7      ) || defined(STM32F429xx  ) || defined(STM32F439xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_AHB1LPENR_0_GPIOJLPEN GPIOJLPEN
#define RCC_AHB1LPENR_0_GPIOKLPEN GPIOKLPEN
#define RCC_AHB1LPENR_0_DMA2DLPEN DMA2DLPEN
#else
#define RCC_AHB1LPENR_0_GPIOJLPEN
#define RCC_AHB1LPENR_0_GPIOKLPEN
#define RCC_AHB1LPENR_0_DMA2DLPEN
#endif

#if	defined(STM32F7      ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || \
    defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_AHB1LPENR_0_SRAM3LPEN SRAM3LPEN
#else
#define RCC_AHB1LPENR_0_SRAM3LPEN
#endif

#if	defined(STM32H745xx_CORE_CM4) || defined(STM32H745xx_CORE_CM7) || defined(STM32H750xx  ) || defined(STM32H755xx_CORE_CM4) || defined(STM32H755xx_CORE_CM7)
#define RCC_AHB1LPENR_0_USB2ULPILPEN USB2ULPILPEN
#define RCC_AHB1LPENR_1_USB1OTGLPEN USB1OTGLPEN
#define RCC_AHB1LPENR_1_USB1ULPILPEN USB1ULPILPEN
#define RCC_AHB1LPENR_1_USB2OTGLPEN USB2OTGLPEN
#define RCC_MAP2_C1_AHB1ENR AHB1ENR_t C1_AHB1ENR
#define RCC_MAP2_C1_APB1LENR APB1LENR_t C1_APB1LENR
#else
#define RCC_AHB1LPENR_0_USB2ULPILPEN
#define RCC_AHB1LPENR_1_USB1OTGLPEN
#define RCC_AHB1LPENR_1_USB1ULPILPEN
#define RCC_AHB1LPENR_1_USB2OTGLPEN
#define RCC_MAP2_C1_AHB1ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP2_C1_APB1LENR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32F2      ) || defined(STM32F4      ) || defined(STM32F7      ) || defined(STM32H742xx  ) || defined(STM32H743xx  ) || \
    defined(STM32H745xx_CORE_CM4) || defined(STM32H745xx_CORE_CM7) || defined(STM32H750xx  ) || defined(STM32H753xx  ) || defined(STM32H755xx_CORE_CM4) || \
    defined(STM32H755xx_CORE_CM7)
#define RCC_AHB1LPENR_1
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F413xx  ) || \
    defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || \
    defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_AHB1LPENR_1_SRAM2LPEN SRAM2LPEN
#define RCC_MAP3_AHB3RSTR AHB3RSTR_t AHB3RSTR
#define RCC_MAP3_AHB3ENR AHB3ENR_t AHB3ENR
#define RCC_MAP3_AHB3LPENR AHB3LPENR_t AHB3LPENR
#else
#define RCC_AHB1LPENR_1_SRAM2LPEN
#define RCC_MAP3_AHB3RSTR __SOOL_PERIPH_PADDING_4
#define RCC_MAP3_AHB3ENR __SOOL_PERIPH_PADDING_4
#define RCC_MAP3_AHB3LPENR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32H7      ) || defined(STM32F401xC  ) || defined(STM32F401xE  ) || \
    defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F411xE  ) || defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || \
    defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || \
    defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || \
    defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_AHB2LPENR
#endif

#if	defined(STM32F413xx  ) || defined(STM32F423xx  ) || defined(STM32F722xx  ) || defined(STM32F723xx  ) || defined(STM32F730xx  ) || \
    defined(STM32F732xx  ) || defined(STM32F733xx  )
#define RCC_AHB2LPENR_2
#define RCC_APB1ENR_1_UART7EN UART7EN
#define RCC_APB1ENR_1_UART8EN UART8EN
#else
#define RCC_APB1ENR_1_UART7EN
#define RCC_APB1ENR_1_UART8EN
#endif

#if	defined(STM32F2      ) || defined(STM32F4      ) || defined(STM32F7      ) || defined(STM32H7      ) || defined(STM32L1      )
#define RCC_APB2LPENR
#endif

#if	defined(STM32F7      ) || defined(STM32H7      ) || defined(STM32F411xE  ) || defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || \
    defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || \
    defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || \
    defined(STM32F479xx  )
#define RCC_APB2LPENR_0_SPI4LPEN SPI4LPEN
#else
#define RCC_APB2LPENR_0_SPI4LPEN
#endif

#if	defined(STM32F2      ) || defined(STM32F4      ) || defined(STM32F7      ) || defined(STM32L1      )
#define RCC_APB2LPENR_1
#define RCC_APB1LPENR
#define RCC_MAP3_CIR CIR_t CIR
#else
#define RCC_MAP3_CIR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32F2      ) || defined(STM32F4      ) || defined(STM32L151xB  ) || defined(STM32L151xD  ) || defined(STM32L151xE  ) || \
    defined(STM32L152xB  ) || defined(STM32L152xC  ) || defined(STM32L152xD  ) || defined(STM32L152xE  )
#define RCC_APB2LPENR_1_SDIOLPEN SDIOLPEN
#else
#define RCC_APB2LPENR_1_SDIOLPEN
#endif

#if	defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || \
    defined(STM32F423xx  )
#define RCC_APB2LPENR_1_DFSDMLPEN DFSDMLPEN
#else
#define RCC_APB2LPENR_1_DFSDMLPEN
#endif

#if	defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L0      ) || defined(STM32L1      ) || \
    defined(STM32L4      ) || defined(STM32WB      ) || defined(STM32H742xx  ) || defined(STM32H743xx  ) || defined(STM32H745xx_CORE_CM4) || \
    defined(STM32H745xx_CORE_CM7) || defined(STM32H750xx  ) || defined(STM32H753xx  ) || defined(STM32H755xx_CORE_CM4) || defined(STM32H755xx_CORE_CM7)
#define RCC_ICSCR
#define RCC_MAP0_ICSCR ICSCR_t ICSCR
#else
#define RCC_MAP0_ICSCR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32WB      ) || defined(STM32L476xx  ) || defined(STM32L486xx  ) || \
    defined(STM32L496xx  ) || defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || \
    defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_ICSCR_1_HSITRIM HSITRIM
#else
#define RCC_ICSCR_1_HSITRIM
#endif

#if	defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L0      ) || defined(STM32L1      ) || \
    defined(STM32L412xx  ) || defined(STM32L422xx  ) || defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L433xx  ) || \
    defined(STM32L442xx  ) || defined(STM32L443xx  ) || defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || \
    defined(STM32L471xx  ) || defined(STM32L475xx  ) || defined(STM32L485xx  )
#define RCC_ICSCR_2
#endif

#if	defined(STM32G0      ) || defined(STM32L1      )
#define RCC_ICSCR_2_HSICAL HSICAL
#else
#define RCC_ICSCR_2_HSICAL
#endif

#if	defined(STM32L412xx  ) || defined(STM32L422xx  ) || defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L433xx  ) || \
    defined(STM32L442xx  ) || defined(STM32L443xx  ) || defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || \
    defined(STM32L471xx  ) || defined(STM32L475xx  ) || defined(STM32L485xx  )
#define RCC_ICSCR_2_HSITRIM HSITRIM
#else
#define RCC_ICSCR_2_HSITRIM
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L4      ) || \
    defined(STM32WB      ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || \
    defined(STM32F417xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || \
    defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  ) || defined(STM32H742xx  ) || \
    defined(STM32H743xx  ) || defined(STM32H745xx_CORE_CM4) || defined(STM32H745xx_CORE_CM7) || defined(STM32H750xx  ) || defined(STM32H753xx  ) || \
    defined(STM32H755xx_CORE_CM4) || defined(STM32H755xx_CORE_CM7)
#define RCC_AHB3ENR
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32WB      ) || defined(STM32H742xx  ) || defined(STM32H743xx  ) || \
    defined(STM32H745xx_CORE_CM4) || defined(STM32H745xx_CORE_CM7) || defined(STM32H750xx  ) || defined(STM32H753xx  ) || defined(STM32H755xx_CORE_CM4) || \
    defined(STM32H755xx_CORE_CM7) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || \
    defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_AHB3ENR_0
#endif

#if	defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L442xx  ) || defined(STM32L451xx  ) || defined(STM32L452xx  ) || \
    defined(STM32L462xx  ) || defined(STM32L471xx  ) || defined(STM32L476xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || \
    defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || \
    defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_PLLSAI1CFGR_0_PLLSAI1PDIV PLLSAI1PDIV
#else
#define RCC_PLLSAI1CFGR_0_PLLSAI1PDIV
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L4      )
#define RCC_APB1RSTR1_0_TIM6RST TIM6RST
#define RCC_APB1RSTR1_0_USART2RST USART2RST
#define RCC_APB1RSTR1_0_I2C2RST I2C2RST
#define RCC_APB1RSTR1_0_PWRRST PWRRST
#define RCC_APB1ENR1_0_TIM6EN TIM6EN
#define RCC_APB1ENR1_0_USART2EN USART2EN
#define RCC_APB1ENR1_0_I2C2EN I2C2EN
#define RCC_APB1ENR1_0_PWREN PWREN
#define RCC_AHB1SMENR_0_FLASHSMEN FLASHSMEN
#define RCC_AHB2SMENR_0_SRAM2SMEN SRAM2SMEN
#define RCC_APB1SMENR1_0_TIM6SMEN TIM6SMEN
#define RCC_APB1SMENR1_0_I2C2SMEN I2C2SMEN
#define RCC_APB1SMENR1_0_PWRSMEN PWRSMEN
#define RCC_APB2SMENR_0_TIM15SMEN TIM15SMEN
#else
#define RCC_APB1RSTR1_0_TIM6RST
#define RCC_APB1RSTR1_0_USART2RST
#define RCC_APB1RSTR1_0_I2C2RST
#define RCC_APB1RSTR1_0_PWRRST
#define RCC_APB1ENR1_0_TIM6EN
#define RCC_APB1ENR1_0_USART2EN
#define RCC_APB1ENR1_0_I2C2EN
#define RCC_APB1ENR1_0_PWREN
#define RCC_AHB1SMENR_0_FLASHSMEN
#define RCC_AHB2SMENR_0_SRAM2SMEN
#define RCC_APB1SMENR1_0_TIM6SMEN
#define RCC_APB1SMENR1_0_I2C2SMEN
#define RCC_APB1SMENR1_0_PWRSMEN
#define RCC_APB2SMENR_0_TIM15SMEN
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L433xx  ) || \
    defined(STM32L442xx  ) || defined(STM32L443xx  ) || defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || \
    defined(STM32L471xx  ) || defined(STM32L475xx  ) || defined(STM32L476xx  ) || defined(STM32L485xx  ) || defined(STM32L486xx  ) || \
    defined(STM32L496xx  ) || defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || \
    defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_APB1RSTR1_0_TIM7RST TIM7RST
#define RCC_APB1RSTR1_0_SPI3RST SPI3RST
#define RCC_APB1ENR1_0_TIM7EN TIM7EN
#define RCC_APB1SMENR1_0_TIM7SMEN TIM7SMEN
#define RCC_APB1SMENR1_0_SP3SMEN SP3SMEN
#else
#define RCC_APB1RSTR1_0_TIM7RST
#define RCC_APB1RSTR1_0_SPI3RST
#define RCC_APB1ENR1_0_TIM7EN
#define RCC_APB1SMENR1_0_TIM7SMEN
#define RCC_APB1SMENR1_0_SP3SMEN
#endif

#if	defined(STM32WB      ) || defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L433xx  ) || defined(STM32L442xx  ) || \
    defined(STM32L443xx  ) || defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  ) || \
    defined(STM32L475xx  ) || defined(STM32L476xx  ) || defined(STM32L485xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || \
    defined(STM32L4A6xx  )
#define RCC_APB1RSTR1_0_LCDRST LCDRST
#define RCC_APB1ENR1_0_LCDEN LCDEN
#define RCC_APB1SMENR1_0_LCDSMEN LCDSMEN
#else
#define RCC_APB1RSTR1_0_LCDRST
#define RCC_APB1ENR1_0_LCDEN
#define RCC_APB1SMENR1_0_LCDSMEN
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L412xx  ) || defined(STM32L422xx  ) || defined(STM32L433xx  ) || \
    defined(STM32L443xx  ) || defined(STM32L475xx  ) || defined(STM32L476xx  ) || defined(STM32L485xx  ) || defined(STM32L486xx  ) || \
    defined(STM32L496xx  ) || defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || \
    defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_APB1RSTR1_0_USART3RST USART3RST
#define RCC_APB1ENR1_0_USART3EN USART3EN
#define RCC_APB1SMENR1_0_USART2SMEN USART2SMEN
#define RCC_APB1SMENR1_0_USART3SMEN USART3SMEN
#else
#define RCC_APB1RSTR1_0_USART3RST
#define RCC_APB1ENR1_0_USART3EN
#define RCC_APB1SMENR1_0_USART2SMEN
#define RCC_APB1SMENR1_0_USART3SMEN
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L433xx  ) || defined(STM32L443xx  ) || defined(STM32L475xx  ) || \
    defined(STM32L476xx  ) || defined(STM32L485xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  ) || \
    defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || \
    defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_APB1RSTR1_0_UART4RST UART4RST
#define RCC_APB1RSTR1_0_UART5RST UART5RST
#define RCC_APB1ENR1_0_SP3EN SP3EN
#else
#define RCC_APB1RSTR1_0_UART4RST
#define RCC_APB1RSTR1_0_UART5RST
#define RCC_APB1ENR1_0_SP3EN
#endif

#if	defined(STM32WB      ) || defined(STM32L412xx  ) || defined(STM32L422xx  ) || defined(STM32L431xx  ) || defined(STM32L432xx  ) || \
    defined(STM32L442xx  ) || defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  ) || \
    defined(STM32L476xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || \
    defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || \
    defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_APB1RSTR1_0_CRSRST CRSRST
#else
#define RCC_APB1RSTR1_0_CRSRST
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32WB      ) || defined(STM32L412xx  ) || defined(STM32L422xx  ) || \
    defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L442xx  ) || defined(STM32L451xx  ) || defined(STM32L452xx  ) || \
    defined(STM32L462xx  ) || defined(STM32L471xx  )
#define RCC_APB1RSTR1_1
#endif

#if	defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L442xx  ) || defined(STM32L451xx  ) || defined(STM32L452xx  ) || \
    defined(STM32L462xx  ) || defined(STM32L471xx  )
#define RCC_APB1RSTR1_1_USART1RST USART1RST
#define RCC_APB1RSTR1_1_USART4RST USART4RST
#define RCC_APB1ENR1_1_SPI1EN SPI1EN
#define RCC_APB1ENR1_1_SPI3EN SPI3EN
#define RCC_APB1ENR1_1_USART1EN USART1EN
#define RCC_APB1ENR2_DFSDMEN DFSDMEN
#define RCC_APB1SMENR1_1_USART1SMEN USART1SMEN
#define RCC_APB1SMENR1_1_USART2SMEN USART2SMEN
#define RCC_CCIPR_1_USART4SEL USART4SEL
#else
#define RCC_APB1RSTR1_1_USART1RST
#define RCC_APB1RSTR1_1_USART4RST
#define RCC_APB1ENR1_1_SPI1EN
#define RCC_APB1ENR1_1_SPI3EN
#define RCC_APB1ENR1_1_USART1EN
#define RCC_APB1ENR2_DFSDMEN
#define RCC_APB1SMENR1_1_USART1SMEN
#define RCC_APB1SMENR1_1_USART2SMEN
#define RCC_CCIPR_1_USART4SEL
#endif

#if	defined(STM32WB      ) || defined(STM32L412xx  ) || defined(STM32L422xx  ) || defined(STM32L431xx  ) || defined(STM32L432xx  ) || \
    defined(STM32L442xx  ) || defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  )
#define RCC_APB1RSTR1_1_USBFSRST USBFSRST
#else
#define RCC_APB1RSTR1_1_USBFSRST
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L442xx  ) || \
    defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  ) || defined(STM32L476xx  ) || \
    defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || \
    defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || \
    defined(STM32L4S9xx  )
#define RCC_APB1RSTR2_I2C4RST I2C4RST
#define RCC_APB1ENR2_I2C4EN I2C4EN
#else
#define RCC_APB1RSTR2_I2C4RST
#define RCC_APB1ENR2_I2C4EN
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L442xx  ) || \
    defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  ) || defined(STM32L475xx  ) || \
    defined(STM32L476xx  ) || defined(STM32L485xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  ) || \
    defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || \
    defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_APB1ENR1_0_TIM3EN TIM3EN
#define RCC_APB1ENR1_0_UART4EN UART4EN
#else
#define RCC_APB1ENR1_0_TIM3EN
#define RCC_APB1ENR1_0_UART4EN
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32WB      ) || defined(STM32L412xx  ) || defined(STM32L422xx  ) || \
    defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L433xx  ) || defined(STM32L442xx  ) || defined(STM32L443xx  ) || \
    defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  ) || defined(STM32L476xx  ) || \
    defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || \
    defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || \
    defined(STM32L4S9xx  )
#define RCC_APB1ENR1_0_RTCAPBEN RTCAPBEN
#define RCC_APB1SMENR1_0_RTCAPBSMEN RTCAPBSMEN
#else
#define RCC_APB1ENR1_0_RTCAPBEN
#define RCC_APB1SMENR1_0_RTCAPBSMEN
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32WB      ) || defined(STM32L412xx  ) || defined(STM32L422xx  ) || \
    defined(STM32L433xx  ) || defined(STM32L443xx  ) || defined(STM32L475xx  ) || defined(STM32L476xx  ) || defined(STM32L485xx  ) || \
    defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || \
    defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || \
    defined(STM32L4S9xx  )
#define RCC_APB1ENR1_0_SPI2EN SPI2EN
#else
#define RCC_APB1ENR1_0_SPI2EN
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L412xx  ) || defined(STM32L422xx  ) || defined(STM32L431xx  ) || \
    defined(STM32L432xx  ) || defined(STM32L433xx  ) || defined(STM32L442xx  ) || defined(STM32L443xx  ) || defined(STM32L451xx  ) || \
    defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  )
#define RCC_APB1ENR1_1
#endif

#if	defined(STM32L412xx  ) || defined(STM32L422xx  ) || defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L433xx  ) || \
    defined(STM32L442xx  ) || defined(STM32L443xx  ) || defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || \
    defined(STM32L471xx  )
#define RCC_APB1ENR1_1_USBF USBF
#define RCC_APB1SMENR1_1_USBFSSMEN USBFSSMEN
#else
#define RCC_APB1ENR1_1_USBF
#define RCC_APB1SMENR1_1_USBFSSMEN
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32WB      ) || defined(STM32L412xx  ) || defined(STM32L422xx  ) || \
    defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L442xx  ) || defined(STM32L451xx  ) || defined(STM32L452xx  ) || \
    defined(STM32L462xx  ) || defined(STM32L471xx  ) || defined(STM32L476xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || \
    defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || \
    defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_AHB1SMENR_0_CRCSMEN CRCSMEN
#else
#define RCC_AHB1SMENR_0_CRCSMEN
#endif

#if	defined(STM32WB      ) || defined(STM32L433xx  ) || defined(STM32L443xx  ) || defined(STM32L475xx  ) || defined(STM32L485xx  )
#define RCC_AHB1SMENR_1
#endif

#if	defined(STM32WB      ) || defined(STM32L476xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  )
#define RCC_AHB2SMENR_2
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32WB      ) || defined(STM32L475xx  ) || defined(STM32L476xx  ) || \
    defined(STM32L485xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || \
    defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || \
    defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_AHB3SMENR_0
#define RCC_APB2SMENR_0_TIM17SMEN TIM17SMEN
#else
#define RCC_APB2SMENR_0_TIM17SMEN
#endif

#if	defined(STM32L412xx  ) || defined(STM32L422xx  ) || defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L442xx  ) || \
    defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  ) || defined(STM32L4P5xx  ) || \
    defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || \
    defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_APB1SMENR1_0_CRSSMEN CRSSMEN
#else
#define RCC_APB1SMENR1_0_CRSSMEN
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32WB      ) || defined(STM32L412xx  ) || defined(STM32L422xx  ) || \
    defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L433xx  ) || defined(STM32L442xx  ) || defined(STM32L443xx  ) || \
    defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  )
#define RCC_APB1SMENR1_1
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L476xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || \
    defined(STM32L4A6xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || \
    defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_APB1SMENR2_I2C4SMEN I2C4SMEN
#else
#define RCC_APB1SMENR2_I2C4SMEN
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L0      ) || defined(STM32L4      ) || defined(STM32WB      )
#define RCC_APB2SMENR
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L0      ) || defined(STM32L4      )
#define RCC_APB2SMENR_0_SYSCFGSMEN SYSCFGSMEN
#else
#define RCC_APB2SMENR_0_SYSCFGSMEN
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L0      ) || defined(STM32L475xx  ) || defined(STM32L476xx  ) || \
    defined(STM32L485xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || defined(STM32L4A6xx  )
#define RCC_APB2SMENR_1
#endif

#if	defined(STM32L475xx  ) || defined(STM32L476xx  ) || defined(STM32L485xx  ) || defined(STM32L486xx  ) || defined(STM32L496xx  ) || \
    defined(STM32L4A6xx  )
#define RCC_APB2SMENR_1_DFSDMSMEN DFSDMSMEN
#define RCC_CCIPR_0_DFSDMSEL DFSDMSEL
#else
#define RCC_APB2SMENR_1_DFSDMSMEN
#define RCC_CCIPR_0_DFSDMSEL
#endif

#if	defined(STM32G0      ) || defined(STM32L0      ) || defined(STM32L4      ) || defined(STM32WB      )
#define RCC_CCIPR
#endif

#if	defined(STM32L4      ) || defined(STM32G070xx  ) || defined(STM32G071xx  ) || defined(STM32G081xx  )
#define RCC_CCIPR_0_USART2SEL USART2SEL
#else
#define RCC_CCIPR_0_USART2SEL
#endif

#if	defined(STM32G0      ) || defined(STM32L0      ) || defined(STM32WB      ) || defined(STM32L431xx  ) || defined(STM32L432xx  ) || \
    defined(STM32L442xx  ) || defined(STM32L451xx  ) || defined(STM32L452xx  ) || defined(STM32L462xx  ) || defined(STM32L471xx  )
#define RCC_CCIPR_1
#endif

#if	defined(STM32G070xx  ) || defined(STM32G071xx  ) || defined(STM32G081xx  )
#define RCC_CCIPR_1_TIM15SEL TIM15SEL
#define RCC_CCIPR_2_CECSEL CECSEL
#define RCC_APBRSTR1_TIM6RST TIM6RST
#define RCC_APBRSTR1_TIM7RST TIM7RST
#define RCC_APBRSTR1_USART3RST USART3RST
#define RCC_APBRSTR1_USART4RST USART4RST
#define RCC_APBRSTR1_CECRST CECRST
#define RCC_APBRSTR1_UCPD1RST UCPD1RST
#define RCC_APBRSTR1_UCPD2RST UCPD2RST
#define RCC_APBRSTR1_DAC1RST DAC1RST
#define RCC_APBRSTR2_TIM15RST TIM15RST
#define RCC_APBENR1_TIM6EN TIM6EN
#define RCC_APBENR1_TIM7EN TIM7EN
#define RCC_APBENR1_USART3EN USART3EN
#define RCC_APBENR1_USART4EN USART4EN
#define RCC_APBENR1_CECEN CECEN
#define RCC_APBENR1_UCPD1EN UCPD1EN
#define RCC_APBENR1_UCPD2EN UCPD2EN
#define RCC_APBENR1_DAC1EN DAC1EN
#define RCC_APBENR2_TIM15EN TIM15EN
#define RCC_APBSMENR1_TIM6SMEN TIM6SMEN
#define RCC_APBSMENR1_TIM7SMEN TIM7SMEN
#define RCC_APBSMENR1_USART3SMEN USART3SMEN
#define RCC_APBSMENR1_USART4SMEN USART4SMEN
#define RCC_APBSMENR1_CECSMEN CECSMEN
#define RCC_APBSMENR1_UCPD1SMEN UCPD1SMEN
#define RCC_APBSMENR1_UCPD2SMEN UCPD2SMEN
#define RCC_APBSMENR1_DAC1SMEN DAC1SMEN
#define RCC_APBSMENR2_TIM15SMEN TIM15SMEN
#else
#define RCC_CCIPR_1_TIM15SEL
#define RCC_CCIPR_2_CECSEL
#define RCC_APBRSTR1_TIM6RST
#define RCC_APBRSTR1_TIM7RST
#define RCC_APBRSTR1_USART3RST
#define RCC_APBRSTR1_USART4RST
#define RCC_APBRSTR1_CECRST
#define RCC_APBRSTR1_UCPD1RST
#define RCC_APBRSTR1_UCPD2RST
#define RCC_APBRSTR1_DAC1RST
#define RCC_APBRSTR2_TIM15RST
#define RCC_APBENR1_TIM6EN
#define RCC_APBENR1_TIM7EN
#define RCC_APBENR1_USART3EN
#define RCC_APBENR1_USART4EN
#define RCC_APBENR1_CECEN
#define RCC_APBENR1_UCPD1EN
#define RCC_APBENR1_UCPD2EN
#define RCC_APBENR1_DAC1EN
#define RCC_APBENR2_TIM15EN
#define RCC_APBSMENR1_TIM6SMEN
#define RCC_APBSMENR1_TIM7SMEN
#define RCC_APBSMENR1_USART3SMEN
#define RCC_APBSMENR1_USART4SMEN
#define RCC_APBSMENR1_CECSMEN
#define RCC_APBSMENR1_UCPD1SMEN
#define RCC_APBSMENR1_UCPD2SMEN
#define RCC_APBSMENR1_DAC1SMEN
#define RCC_APBSMENR2_TIM15SMEN
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L412xx  ) || defined(STM32L422xx  ) || defined(STM32L4P5xx  ) || \
    defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || \
    defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_CCIPR2
#define RCC_MAP2_CCIPR2 CCIPR2_t CCIPR2
#else
#define RCC_MAP2_CCIPR2 __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L412xx  ) || defined(STM32L422xx  )
#define RCC_CCIPR2_1
#endif

#if	defined(STM32L412xx  ) || defined(STM32L422xx  )
#define RCC_CCIPR2_1_I2C4SEL_0 I2C4SEL_0
#define RCC_CCIPR2_1_I2C4SEL_1 I2C4SEL_1
#else
#define RCC_CCIPR2_1_I2C4SEL_0
#define RCC_CCIPR2_1_I2C4SEL_1
#endif

#if	defined(STM32F7      ) || defined(STM32F429xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || \
    defined(STM32F479xx  )
#define RCC_CIR_0_PLLSAIRDYF PLLSAIRDYF
#define RCC_CIR_0_PLLSAIRDYIE PLLSAIRDYIE
#define RCC_CIR_0_PLLSAIRDYC PLLSAIRDYC
#else
#define RCC_CIR_0_PLLSAIRDYF
#define RCC_CIR_0_PLLSAIRDYIE
#define RCC_CIR_0_PLLSAIRDYC
#endif

#if	defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F7      ) || defined(STM32L0      ) || defined(STM32L1      ) || \
    defined(STM32F031x6  ) || defined(STM32F038xx  ) || defined(STM32F042x6  ) || defined(STM32F048xx  ) || defined(STM32F051x8  ) || \
    defined(STM32F058xx  ) || defined(STM32F071xB  ) || defined(STM32F072xB  ) || defined(STM32F078xx  ) || defined(STM32F091xC  ) || \
    defined(STM32F098xx  ) || defined(STM32F401xC  ) || defined(STM32F401xE  ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || \
    defined(STM32F411xE  ) || defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || \
    defined(STM32F413xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || \
    defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || \
    defined(STM32F479xx  )
#define RCC_APB1RSTR_0_TIM2RST TIM2RST
#define RCC_APB1ENR_0_TIM2EN TIM2EN
#else
#define RCC_APB1RSTR_0_TIM2RST
#define RCC_APB1ENR_0_TIM2EN
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F7      ) || defined(STM32L1      ) || \
    defined(STM32F401xC  ) || defined(STM32F401xE  ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F411xE  ) || \
    defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || \
    defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || \
    defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  ) || \
    defined(STM32L010x4  ) || defined(STM32L010x6  ) || defined(STM32L010x8  ) || defined(STM32L010xB  ) || defined(STM32L011xx  ) || \
    defined(STM32L021xx  ) || defined(STM32L031xx  ) || defined(STM32L041xx  ) || defined(STM32L071xx  ) || defined(STM32L081xx  )
#define RCC_APB1RSTR_0_TIM3RST TIM3RST
#else
#define RCC_APB1RSTR_0_TIM3RST
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32L1      ) || defined(STM32F301x8  ) || defined(STM32F302x8  ) || \
    defined(STM32F302xC  ) || defined(STM32F302xE  ) || defined(STM32F303xC  ) || defined(STM32F303xE  ) || defined(STM32F318xx  ) || \
    defined(STM32F328xx  ) || defined(STM32F358xx  ) || defined(STM32F373xC  ) || defined(STM32F378xx  ) || defined(STM32F398xx  ) || \
    defined(STM32F401xC  ) || defined(STM32F401xE  ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F411xE  ) || \
    defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || \
    defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || \
    defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_APB1RSTR_0_TIM4RST TIM4RST
#define RCC_APB1ENR_0_TIM4EN TIM4EN
#else
#define RCC_APB1RSTR_0_TIM4RST
#define RCC_APB1ENR_0_TIM4EN
#endif

#if	defined(STM32F2      ) || defined(STM32F4      ) || defined(STM32F7      ) || defined(STM32F373xC  ) || defined(STM32F378xx  ) || \
    defined(STM32F398xx  ) || defined(STM32L151xB  ) || defined(STM32L151xBA ) || defined(STM32L151xC  ) || defined(STM32L151xCA ) || \
    defined(STM32L151xD  ) || defined(STM32L151xE  ) || defined(STM32L152xB  ) || defined(STM32L152xBA ) || defined(STM32L152xC  ) || \
    defined(STM32L152xCA ) || defined(STM32L152xD  ) || defined(STM32L152xE  )
#define RCC_APB1RSTR_0_TIM5RST TIM5RST
#define RCC_APB1ENR_0_TIM5EN TIM5EN
#else
#define RCC_APB1RSTR_0_TIM5RST
#define RCC_APB1ENR_0_TIM5EN
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F7      ) || defined(STM32L0      ) || \
    defined(STM32L1      ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F410Cx  ) || defined(STM32F410Rx  ) || \
    defined(STM32F410Tx  ) || defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || \
    defined(STM32F413xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || \
    defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || \
    defined(STM32F479xx  )
#define RCC_APB1RSTR_0_TIM6RST TIM6RST
#define RCC_APB1ENR_0_TIM6EN TIM6EN
#else
#define RCC_APB1RSTR_0_TIM6RST
#define RCC_APB1ENR_0_TIM6EN
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F7      ) || defined(STM32L1      ) || \
    defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || \
    defined(STM32F412Zx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || \
    defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || \
    defined(STM32F469xx  ) || defined(STM32F479xx  ) || defined(STM32L010x4  ) || defined(STM32L010x6  ) || defined(STM32L010x8  ) || \
    defined(STM32L010xB  ) || defined(STM32L011xx  ) || defined(STM32L021xx  ) || defined(STM32L031xx  ) || defined(STM32L041xx  ) || \
    defined(STM32L071xx  ) || defined(STM32L081xx  )
#define RCC_APB1RSTR_0_TIM7RST TIM7RST
#define RCC_APB1ENR_0_TIM7EN TIM7EN
#else
#define RCC_APB1RSTR_0_TIM7RST
#define RCC_APB1ENR_0_TIM7EN
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32F373xC  ) || defined(STM32F378xx  ) || defined(STM32F398xx  ) || \
    defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || \
    defined(STM32F412Zx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || \
    defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || \
    defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_APB1RSTR_0_TIM12RST TIM12RST
#define RCC_APB1RSTR_0_TIM13RST TIM13RST
#define RCC_APB1ENR_0_TIM12EN TIM12EN
#define RCC_APB1ENR_0_TIM13EN TIM13EN
#else
#define RCC_APB1RSTR_0_TIM12RST
#define RCC_APB1RSTR_0_TIM13RST
#define RCC_APB1ENR_0_TIM12EN
#define RCC_APB1ENR_0_TIM13EN
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32F373xC  ) || defined(STM32F378xx  ) || \
    defined(STM32F398xx  ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || \
    defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || \
    defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || \
    defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_APB1RSTR_0_TIM14RST TIM14RST
#define RCC_APB1ENR_0_TIM14EN TIM14EN
#else
#define RCC_APB1RSTR_0_TIM14RST
#define RCC_APB1ENR_0_TIM14EN
#endif

#if	defined(STM32F7      ) || defined(STM32F410Cx  ) || defined(STM32F410Rx  ) || defined(STM32F410Tx  )
#define RCC_APB1RSTR_0_LPTIM1RST LPTIM1RST
#define RCC_APB1LPENR_0_LPTIM1LPEN LPTIM1LPEN
#else
#define RCC_APB1RSTR_0_LPTIM1RST
#define RCC_APB1LPENR_0_LPTIM1LPEN
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F4      ) || defined(STM32F7      ) || \
    defined(STM32L010x4  ) || defined(STM32L010x6  ) || defined(STM32L010x8  ) || defined(STM32L010xB  ) || defined(STM32L011xx  ) || \
    defined(STM32L021xx  ) || defined(STM32L031xx  ) || defined(STM32L041xx  ) || defined(STM32L071xx  ) || defined(STM32L081xx  )
#define RCC_APB1RSTR_0_WWDGRST WWDGRST
#else
#define RCC_APB1RSTR_0_WWDGRST
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F4      ) || defined(STM32F7      ) || defined(STM32L0      ) || \
    defined(STM32L1      ) || defined(STM32F301x8  ) || defined(STM32F302x8  ) || defined(STM32F302xC  ) || defined(STM32F302xE  ) || \
    defined(STM32F303xC  ) || defined(STM32F303xE  ) || defined(STM32F318xx  ) || defined(STM32F328xx  ) || defined(STM32F358xx  ) || \
    defined(STM32F373xC  ) || defined(STM32F378xx  ) || defined(STM32F398xx  )
#define RCC_APB1RSTR_0_SPI2RST SPI2RST
#define RCC_APB1RSTR_0_I2C2RST I2C2RST
#define RCC_APB1ENR_0_SPI2EN SPI2EN
#define RCC_APB1ENR_0_I2C2EN I2C2EN
#else
#define RCC_APB1RSTR_0_SPI2RST
#define RCC_APB1RSTR_0_I2C2RST
#define RCC_APB1ENR_0_SPI2EN
#define RCC_APB1ENR_0_I2C2EN
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32F301x8  ) || defined(STM32F302x8  ) || defined(STM32F302xC  ) || \
    defined(STM32F302xE  ) || defined(STM32F303xC  ) || defined(STM32F303xE  ) || defined(STM32F318xx  ) || defined(STM32F328xx  ) || \
    defined(STM32F358xx  ) || defined(STM32F373xC  ) || defined(STM32F378xx  ) || defined(STM32F398xx  ) || defined(STM32F401xC  ) || \
    defined(STM32F401xE  ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F411xE  ) || defined(STM32F412Cx  ) || \
    defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || \
    defined(STM32F417xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || \
    defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  ) || defined(STM32L151xB  ) || \
    defined(STM32L151xBA ) || defined(STM32L151xC  ) || defined(STM32L151xCA ) || defined(STM32L151xD  ) || defined(STM32L151xE  ) || \
    defined(STM32L152xB  ) || defined(STM32L152xBA ) || defined(STM32L152xC  ) || defined(STM32L152xCA ) || defined(STM32L152xD  ) || \
    defined(STM32L152xE  )
#define RCC_APB1RSTR_0_SPI3RST SPI3RST
#define RCC_APB1ENR_0_SPI3EN SPI3EN
#else
#define RCC_APB1RSTR_0_SPI3RST
#define RCC_APB1ENR_0_SPI3EN
#endif

#if	defined(STM32F745xx  ) || defined(STM32F746xx  ) || defined(STM32F750xx  ) || defined(STM32F756xx  ) || defined(STM32F765xx  ) || \
    defined(STM32F767xx  ) || defined(STM32F769xx  ) || defined(STM32F777xx  ) || defined(STM32F779xx  )
#define RCC_APB1RSTR_0_SPDIFRXRST SPDIFRXRST
#define RCC_APB1ENR_0_LPTMI1EN LPTMI1EN
#define RCC_APB1ENR_0_SPDIFRXEN SPDIFRXEN
#define RCC_APB1ENR_0_CECEN CECEN
#define RCC_APB1LPENR_0_SPDIFRXLPEN SPDIFRXLPEN
#define RCC_DKCFGR1
#define RCC_DKCFGR2
#define RCC_MAP3_DKCFGR1 DKCFGR1_t DKCFGR1
#define RCC_MAP3_DKCFGR2 DKCFGR2_t DKCFGR2
#else
#define RCC_APB1RSTR_0_SPDIFRXRST
#define RCC_APB1ENR_0_LPTMI1EN
#define RCC_APB1ENR_0_SPDIFRXEN
#define RCC_APB1ENR_0_CECEN
#define RCC_APB1LPENR_0_SPDIFRXLPEN
#define RCC_MAP3_DKCFGR1 __SOOL_PERIPH_PADDING_4
#define RCC_MAP3_DKCFGR2 __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32F301x8  ) || defined(STM32F302x8  ) || defined(STM32F302xC  ) || \
    defined(STM32F302xE  ) || defined(STM32F303xC  ) || defined(STM32F303xE  ) || defined(STM32F318xx  ) || defined(STM32F328xx  ) || \
    defined(STM32F358xx  ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || \
    defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || \
    defined(STM32F469xx  ) || defined(STM32F479xx  ) || defined(STM32L151xB  ) || defined(STM32L151xD  ) || defined(STM32L151xE  ) || \
    defined(STM32L152xB  ) || defined(STM32L152xC  ) || defined(STM32L152xD  ) || defined(STM32L152xE  )
#define RCC_APB1RSTR_0_UART4RST UART4RST
#define RCC_APB1RSTR_0_UART5RST UART5RST
#else
#define RCC_APB1RSTR_0_UART4RST
#define RCC_APB1RSTR_0_UART5RST
#endif

#if	defined(STM32F410Cx  ) || defined(STM32F410Rx  ) || defined(STM32F410Tx  ) || defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || \
    defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || defined(STM32F423xx  ) || defined(STM32F745xx  ) || \
    defined(STM32F746xx  ) || defined(STM32F750xx  ) || defined(STM32F756xx  ) || defined(STM32F765xx  ) || defined(STM32F767xx  ) || \
    defined(STM32F769xx  ) || defined(STM32F777xx  ) || defined(STM32F779xx  )
#define RCC_APB1RSTR_0_I2C4RST I2C4RST
#define RCC_APB1ENR_0_I2C4EN I2C4EN
#define RCC_APB1LPENR_0_I2C4LPEN I2C4LPEN
#else
#define RCC_APB1RSTR_0_I2C4RST
#define RCC_APB1ENR_0_I2C4EN
#define RCC_APB1LPENR_0_I2C4LPEN
#endif

#if	defined(STM32F2      ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || \
    defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || \
    defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || \
    defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  ) || defined(STM32F745xx  ) || defined(STM32F746xx  ) || \
    defined(STM32F750xx  ) || defined(STM32F756xx  ) || defined(STM32F765xx  ) || defined(STM32F767xx  ) || defined(STM32F769xx  ) || \
    defined(STM32F777xx  ) || defined(STM32F779xx  )
#define RCC_APB1RSTR_0_CAN2RST CAN2RST
#define RCC_APB1ENR_0_CAN2EN CAN2EN
#else
#define RCC_APB1RSTR_0_CAN2RST
#define RCC_APB1ENR_0_CAN2EN
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32L1      ) || defined(STM32F031x6  ) || defined(STM32F038xx  ) || \
    defined(STM32F042x6  ) || defined(STM32F048xx  ) || defined(STM32F051x8  ) || defined(STM32F058xx  ) || defined(STM32F071xB  ) || \
    defined(STM32F072xB  ) || defined(STM32F078xx  ) || defined(STM32F091xC  ) || defined(STM32F098xx  ) || defined(STM32F301x8  ) || \
    defined(STM32F302x8  ) || defined(STM32F302xC  ) || defined(STM32F302xE  ) || defined(STM32F303xC  ) || defined(STM32F303xE  ) || \
    defined(STM32F318xx  ) || defined(STM32F328xx  ) || defined(STM32F358xx  ) || defined(STM32F373xC  ) || defined(STM32F378xx  ) || \
    defined(STM32F398xx  ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F410Cx  ) || defined(STM32F410Rx  ) || \
    defined(STM32F410Tx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || \
    defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || \
    defined(STM32F469xx  ) || defined(STM32F479xx  ) || defined(STM32L051xx  ) || defined(STM32L052xx  ) || defined(STM32L053xx  ) || \
    defined(STM32L062xx  ) || defined(STM32L063xx  ) || defined(STM32L072xx  ) || defined(STM32L073xx  ) || defined(STM32L082xx  ) || \
    defined(STM32L083xx  )
#define RCC_APB1RSTR_0_DACRST DACRST
#define RCC_APB1ENR_0_DACEN DACEN
#else
#define RCC_APB1RSTR_0_DACRST
#define RCC_APB1ENR_0_DACEN
#endif

#if	defined(STM32F7      ) || defined(STM32F413xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || \
    defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_APB1RSTR_0_UART7RST UART7RST
#define RCC_APB1RSTR_0_UART8RST UART8RST
#define RCC_APB1LPENR_0_UART7LPEN UART7LPEN
#define RCC_APB1LPENR_0_UART8LPEN UART8LPEN
#else
#define RCC_APB1RSTR_0_UART7RST
#define RCC_APB1RSTR_0_UART8RST
#define RCC_APB1LPENR_0_UART7LPEN
#define RCC_APB1LPENR_0_UART8LPEN
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32L0      ) || defined(STM32L1      ) || defined(STM32F412Cx  ) || \
    defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || defined(STM32F423xx  ) || \
    defined(STM32F446xx  )
#define RCC_APB1RSTR_1
#endif

#if	defined(STM32L1      ) || defined(STM32L051xx  ) || defined(STM32L052xx  ) || defined(STM32L053xx  ) || defined(STM32L062xx  ) || \
    defined(STM32L063xx  ) || defined(STM32L072xx  ) || defined(STM32L073xx  ) || defined(STM32L082xx  ) || defined(STM32L083xx  )
#define RCC_APB1RSTR_1_WWDRST WWDRST
#else
#define RCC_APB1RSTR_1_WWDRST
#endif

#if	defined(STM32F446xx  )
#define RCC_APB1RSTR_1_SPDIFRST SPDIFRST
#define RCC_APB1RSTR_1_I2CFMP1RST I2CFMP1RST
#define RCC_APB1ENR_1_SPDIFEN SPDIFEN
#define RCC_APB1ENR_1_I2CFMP1EN I2CFMP1EN
#define RCC_APB1ENR_1_CEC CEC
#define RCC_APB1LPENR_1_SPDIFLPEN SPDIFLPEN
#define RCC_APB1LPENR_1_I2CFMP1LPEN I2CFMP1LPEN
#define RCC_PLLI2SCFGR_0_PLLI2SP PLLI2SP
#define RCC_PLLSAICFGR_PLLSAIM PLLSAIM
#define RCC_DCKCFGR_1_SAI1SRC SAI1SRC
#define RCC_DCKCFGR_1_SAI2SRC SAI2SRC
#define RCC_DCKCFGR2_0_FMPI2C1SEL FMPI2C1SEL
#define RCC_DCKCFGR2_0_CECSEL CECSEL
#define RCC_DCKCFGR2_1_SDIOSEL SDIOSEL
#define RCC_DCKCFGR2_1_SPDIFSEL SPDIFSEL
#else
#define RCC_APB1RSTR_1_SPDIFRST
#define RCC_APB1RSTR_1_I2CFMP1RST
#define RCC_APB1ENR_1_SPDIFEN
#define RCC_APB1ENR_1_I2CFMP1EN
#define RCC_APB1ENR_1_CEC
#define RCC_APB1LPENR_1_SPDIFLPEN
#define RCC_APB1LPENR_1_I2CFMP1LPEN
#define RCC_PLLI2SCFGR_0_PLLI2SP
#define RCC_PLLSAICFGR_PLLSAIM
#define RCC_DCKCFGR_1_SAI1SRC
#define RCC_DCKCFGR_1_SAI2SRC
#define RCC_DCKCFGR2_0_FMPI2C1SEL
#define RCC_DCKCFGR2_0_CECSEL
#define RCC_DCKCFGR2_1_SDIOSEL
#define RCC_DCKCFGR2_1_SPDIFSEL
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32L1      ) || defined(STM32L010x4  ) || defined(STM32L010x6  ) || \
    defined(STM32L010x8  ) || defined(STM32L010xB  ) || defined(STM32L011xx  ) || defined(STM32L021xx  ) || defined(STM32L031xx  ) || \
    defined(STM32L041xx  ) || defined(STM32L071xx  ) || defined(STM32L081xx  )
#define RCC_APB1RSTR_1_USART2RST USART2RST
#else
#define RCC_APB1RSTR_1_USART2RST
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32L1      ) || defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || \
    defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || defined(STM32F423xx  )
#define RCC_APB1RSTR_1_USART3RST USART3RST
#else
#define RCC_APB1RSTR_1_USART3RST
#endif

#if	defined(STM32F0      ) || defined(STM32F413xx  ) || defined(STM32F423xx  ) || defined(STM32L010x4  ) || defined(STM32L010x6  ) || \
    defined(STM32L010x8  ) || defined(STM32L010xB  ) || defined(STM32L011xx  ) || defined(STM32L021xx  ) || defined(STM32L031xx  ) || \
    defined(STM32L041xx  ) || defined(STM32L071xx  ) || defined(STM32L081xx  )
#define RCC_APB1RSTR_1_USART4RST USART4RST
#else
#define RCC_APB1RSTR_1_USART4RST
#endif

#if	defined(STM32F030x6  ) || defined(STM32F030x8  ) || defined(STM32F030xC  ) || defined(STM32F031x6  ) || defined(STM32F038xx  ) || \
    defined(STM32F048xx  ) || defined(STM32F051x8  ) || defined(STM32F058xx  ) || defined(STM32F070x6  ) || defined(STM32F070xB  ) || \
    defined(STM32F071xB  ) || defined(STM32F078xx  ) || defined(STM32F091xC  ) || defined(STM32F098xx  ) || defined(STM32F413xx  ) || \
    defined(STM32F423xx  ) || defined(STM32L010x4  ) || defined(STM32L010x6  ) || defined(STM32L010x8  ) || defined(STM32L010xB  ) || \
    defined(STM32L011xx  ) || defined(STM32L021xx  ) || defined(STM32L031xx  ) || defined(STM32L041xx  ) || defined(STM32L071xx  ) || \
    defined(STM32L081xx  )
#define RCC_APB1RSTR_1_USART5RST USART5RST
#else
#define RCC_APB1RSTR_1_USART5RST
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32L1      ) || defined(STM32L051xx  ) || defined(STM32L052xx  ) || \
    defined(STM32L053xx  ) || defined(STM32L062xx  ) || defined(STM32L063xx  ) || defined(STM32L072xx  ) || defined(STM32L073xx  ) || \
    defined(STM32L082xx  ) || defined(STM32L083xx  )
#define RCC_APB1RSTR_1_USBRST USBRST
#else
#define RCC_APB1RSTR_1_USBRST
#endif

#if	defined(STM32F3      ) || defined(STM32F031x6  ) || defined(STM32F038xx  ) || defined(STM32F042x6  ) || defined(STM32F048xx  ) || \
    defined(STM32F051x8  ) || defined(STM32F058xx  ) || defined(STM32F071xB  ) || defined(STM32F072xB  ) || defined(STM32F078xx  ) || \
    defined(STM32F091xC  ) || defined(STM32F098xx  )
#define RCC_APB1RSTR_1_CANRST CANRST
#define RCC_APB1ENR_1_CANEN CANEN
#define RCC_AHBENR_0_IOPDEN IOPDEN
#define RCC_AHBENR_0_TSCEN TSCEN
#define RCC_AHBENR_1_GPIODEN GPIODEN
#define RCC_AHBRSTR_0_TSCRST TSCRST
#else
#define RCC_APB1RSTR_1_CANRST
#define RCC_APB1ENR_1_CANEN
#define RCC_AHBENR_0_IOPDEN
#define RCC_AHBENR_0_TSCEN
#define RCC_AHBENR_1_GPIODEN
#define RCC_AHBRSTR_0_TSCRST
#endif

#if	defined(STM32F301x8  ) || defined(STM32F302x8  ) || defined(STM32F302xE  ) || defined(STM32F303xE  ) || defined(STM32F318xx  ) || \
    defined(STM32F328xx  )
#define RCC_APB1RSTR_1_I2C3RST I2C3RST
#define RCC_CFGR3_0_I2C3SW I2C3SW
#else
#define RCC_APB1RSTR_1_I2C3RST
#define RCC_CFGR3_0_I2C3SW
#endif

#if	defined(STM32L0      ) || defined(STM32L1      ) || defined(STM32F031x6  ) || defined(STM32F038xx  ) || defined(STM32F042x6  ) || \
    defined(STM32F048xx  ) || defined(STM32F051x8  ) || defined(STM32F058xx  ) || defined(STM32F071xB  ) || defined(STM32F072xB  ) || \
    defined(STM32F078xx  ) || defined(STM32F091xC  ) || defined(STM32F098xx  ) || defined(STM32F373xC  ) || defined(STM32F378xx  ) || \
    defined(STM32F398xx  )
#define RCC_APB1RSTR_2
#endif

#if	defined(STM32F031x6  ) || defined(STM32F038xx  ) || defined(STM32F042x6  ) || defined(STM32F048xx  ) || defined(STM32F051x8  ) || \
    defined(STM32F058xx  ) || defined(STM32F071xB  ) || defined(STM32F072xB  ) || defined(STM32F078xx  ) || defined(STM32F091xC  ) || \
    defined(STM32F098xx  ) || defined(STM32L051xx  ) || defined(STM32L052xx  ) || defined(STM32L053xx  ) || defined(STM32L062xx  ) || \
    defined(STM32L063xx  ) || defined(STM32L072xx  ) || defined(STM32L073xx  ) || defined(STM32L082xx  ) || defined(STM32L083xx  )
#define RCC_APB1RSTR_2_CRSRST CRSRST
#define RCC_APB1ENR_3_CRSEN CRSEN
#else
#define RCC_APB1RSTR_2_CRSRST
#define RCC_APB1ENR_3_CRSEN
#endif

#if	defined(STM32F031x6  ) || defined(STM32F038xx  ) || defined(STM32F042x6  ) || defined(STM32F048xx  ) || defined(STM32F051x8  ) || \
    defined(STM32F058xx  ) || defined(STM32F071xB  ) || defined(STM32F072xB  ) || defined(STM32F078xx  ) || defined(STM32F091xC  ) || \
    defined(STM32F098xx  ) || defined(STM32F373xC  ) || defined(STM32F378xx  ) || defined(STM32F398xx  )
#define RCC_APB1RSTR_2_CECRST CECRST
#define RCC_APB1ENR_3_CECEN CECEN
#else
#define RCC_APB1RSTR_2_CECRST
#define RCC_APB1ENR_3_CECEN
#endif

#if	defined(STM32L1      ) || defined(STM32L010x4  ) || defined(STM32L010x6  ) || defined(STM32L010x8  ) || defined(STM32L010xB  ) || \
    defined(STM32L011xx  ) || defined(STM32L021xx  ) || defined(STM32L031xx  ) || defined(STM32L041xx  ) || defined(STM32L053xx  ) || \
    defined(STM32L063xx  ) || defined(STM32L071xx  ) || defined(STM32L072xx  ) || defined(STM32L073xx  ) || defined(STM32L081xx  ) || \
    defined(STM32L082xx  ) || defined(STM32L083xx  )
#define RCC_APB1RSTR_3
#endif

#if	defined(STM32L1      ) || defined(STM32L053xx  ) || defined(STM32L063xx  ) || defined(STM32L072xx  ) || defined(STM32L073xx  ) || \
    defined(STM32L082xx  ) || defined(STM32L083xx  )
#define RCC_APB1RSTR_3_LCDRST LCDRST
#define RCC_APB1ENR_4
#else
#define RCC_APB1RSTR_3_LCDRST
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F3      ) || defined(STM32F7      ) || defined(STM32L1      ) || \
    defined(STM32F401xC  ) || defined(STM32F401xE  ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F411xE  ) || \
    defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || \
    defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || \
    defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_APB1ENR_0_TIM3EN TIM3EN
#else
#define RCC_APB1ENR_0_TIM3EN
#endif

#if	defined(STM32F410Cx  ) || defined(STM32F410Rx  ) || defined(STM32F410Tx  ) || defined(STM32F722xx  ) || defined(STM32F723xx  ) || \
    defined(STM32F730xx  ) || defined(STM32F732xx  ) || defined(STM32F733xx  )
#define RCC_APB1ENR_0_RTCAPBEN RTCAPBEN
#define RCC_APB1ENR_1_LPTIM1EN LPTIM1EN
#else
#define RCC_APB1ENR_0_RTCAPBEN
#define RCC_APB1ENR_1_LPTIM1EN
#endif

#if	defined(STM32F0      ) || defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32L1      ) || defined(STM32F301x8  ) || \
    defined(STM32F302x8  ) || defined(STM32F302xE  ) || defined(STM32F303x8  ) || defined(STM32F303xE  ) || defined(STM32F318xx  ) || \
    defined(STM32F328xx  ) || defined(STM32F334x8  ) || defined(STM32F373xC  ) || defined(STM32F378xx  ) || defined(STM32F398xx  ) || \
    defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || \
    defined(STM32F412Zx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || \
    defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || \
    defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_APB1ENR_0_USART3EN USART3EN
#else
#define RCC_APB1ENR_0_USART3EN
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32F302x8  ) || defined(STM32F302xE  ) || defined(STM32F303xE  ) || \
    defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || \
    defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || \
    defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_APB1ENR_0_UART4EN UART4EN
#define RCC_APB1ENR_0_UART5EN UART5EN
#else
#define RCC_APB1ENR_0_UART4EN
#define RCC_APB1ENR_0_UART5EN
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32L0      ) || defined(STM32L1      ) || defined(STM32F410Cx  ) || \
    defined(STM32F410Rx  ) || defined(STM32F410Tx  ) || defined(STM32F413xx  ) || defined(STM32F423xx  ) || defined(STM32F446xx  ) || \
    defined(STM32F722xx  ) || defined(STM32F723xx  ) || defined(STM32F730xx  ) || defined(STM32F732xx  ) || defined(STM32F733xx  )
#define RCC_APB1ENR_1
#endif

#if	defined(STM32F0      ) || defined(STM32L010x4  ) || defined(STM32L010x6  ) || defined(STM32L010x8  ) || defined(STM32L010xB  ) || \
    defined(STM32L011xx  ) || defined(STM32L021xx  ) || defined(STM32L031xx  ) || defined(STM32L041xx  ) || defined(STM32L071xx  ) || \
    defined(STM32L081xx  ) || defined(STM32L151xB  ) || defined(STM32L151xD  ) || defined(STM32L151xE  ) || defined(STM32L152xB  ) || \
    defined(STM32L152xC  ) || defined(STM32L152xD  ) || defined(STM32L152xE  )
#define RCC_APB1ENR_1_USART4EN USART4EN
#else
#define RCC_APB1ENR_1_USART4EN
#endif

#if	defined(STM32F030x6  ) || defined(STM32F030x8  ) || defined(STM32F030xC  ) || defined(STM32F031x6  ) || defined(STM32F038xx  ) || \
    defined(STM32F048xx  ) || defined(STM32F051x8  ) || defined(STM32F058xx  ) || defined(STM32F070x6  ) || defined(STM32F070xB  ) || \
    defined(STM32F071xB  ) || defined(STM32F078xx  ) || defined(STM32F091xC  ) || defined(STM32F098xx  ) || defined(STM32L010x4  ) || \
    defined(STM32L010x6  ) || defined(STM32L010x8  ) || defined(STM32L010xB  ) || defined(STM32L011xx  ) || defined(STM32L021xx  ) || \
    defined(STM32L031xx  ) || defined(STM32L041xx  ) || defined(STM32L071xx  ) || defined(STM32L081xx  ) || defined(STM32L151xB  ) || \
    defined(STM32L151xD  ) || defined(STM32L151xE  ) || defined(STM32L152xB  ) || defined(STM32L152xC  ) || defined(STM32L152xD  ) || \
    defined(STM32L152xE  )
#define RCC_APB1ENR_1_USART5EN USART5EN
#else
#define RCC_APB1ENR_1_USART5EN
#endif

#if	defined(STM32L1      ) || defined(STM32F301x8  ) || defined(STM32F302x8  ) || defined(STM32F302xC  ) || defined(STM32F302xE  ) || \
    defined(STM32F303xC  ) || defined(STM32F303xE  ) || defined(STM32F318xx  ) || defined(STM32F328xx  ) || defined(STM32F358xx  ) || \
    defined(STM32F373xC  ) || defined(STM32F378xx  ) || defined(STM32F398xx  ) || defined(STM32L051xx  ) || defined(STM32L052xx  ) || \
    defined(STM32L053xx  ) || defined(STM32L062xx  ) || defined(STM32L063xx  ) || defined(STM32L072xx  ) || defined(STM32L073xx  ) || \
    defined(STM32L082xx  ) || defined(STM32L083xx  )
#define RCC_APB1ENR_1_USBEN USBEN
#else
#define RCC_APB1ENR_1_USBEN
#endif

#if	defined(STM32F0      ) || defined(STM32L0      ) || defined(STM32F301x8  ) || defined(STM32F302x8  ) || defined(STM32F302xE  ) || \
    defined(STM32F303xE  ) || defined(STM32F318xx  ) || defined(STM32F328xx  ) || defined(STM32F373xC  ) || defined(STM32F378xx  ) || \
    defined(STM32F398xx  ) || defined(STM32F413xx  ) || defined(STM32F423xx  )
#define RCC_APB1ENR_2
#endif

#if	defined(STM32F301x8  ) || defined(STM32F302x8  ) || defined(STM32F302xE  ) || defined(STM32F303xE  ) || defined(STM32F318xx  ) || \
    defined(STM32F328xx  ) || defined(STM32L010x4  ) || defined(STM32L010x6  ) || defined(STM32L010x8  ) || defined(STM32L010xB  ) || \
    defined(STM32L011xx  ) || defined(STM32L021xx  ) || defined(STM32L031xx  ) || defined(STM32L041xx  ) || defined(STM32L071xx  ) || \
    defined(STM32L081xx  )
#define RCC_APB1ENR_2_I2C3EN I2C3EN
#else
#define RCC_APB1ENR_2_I2C3EN
#endif

#if	defined(STM32L1      ) || defined(STM32F031x6  ) || defined(STM32F038xx  ) || defined(STM32F042x6  ) || defined(STM32F048xx  ) || \
    defined(STM32F051x8  ) || defined(STM32F058xx  ) || defined(STM32F071xB  ) || defined(STM32F072xB  ) || defined(STM32F078xx  ) || \
    defined(STM32F091xC  ) || defined(STM32F098xx  ) || defined(STM32F373xC  ) || defined(STM32F378xx  ) || defined(STM32F398xx  ) || \
    defined(STM32L051xx  ) || defined(STM32L052xx  ) || defined(STM32L053xx  ) || defined(STM32L062xx  ) || defined(STM32L063xx  ) || \
    defined(STM32L072xx  ) || defined(STM32L073xx  ) || defined(STM32L082xx  ) || defined(STM32L083xx  )
#define RCC_APB1ENR_3
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32L1      ) || defined(STM32F401xC  ) || defined(STM32F401xE  ) || \
    defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F411xE  ) || defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || \
    defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || \
    defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || \
    defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_APB1LPENR_0_TIM2LPEN TIM2LPEN
#define RCC_APB1LPENR_0_TIM3LPEN TIM3LPEN
#define RCC_APB1LPENR_0_TIM4LPEN TIM4LPEN
#else
#define RCC_APB1LPENR_0_TIM2LPEN
#define RCC_APB1LPENR_0_TIM3LPEN
#define RCC_APB1LPENR_0_TIM4LPEN
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32L1      ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || \
    defined(STM32F410Cx  ) || defined(STM32F410Rx  ) || defined(STM32F410Tx  ) || defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || \
    defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || defined(STM32F417xx  ) || \
    defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || defined(STM32F439xx  ) || \
    defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_APB1LPENR_0_TIM6LPEN TIM6LPEN
#else
#define RCC_APB1LPENR_0_TIM6LPEN
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32L1      ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || \
    defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F413xx  ) || \
    defined(STM32F415xx  ) || defined(STM32F417xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || \
    defined(STM32F437xx  ) || defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_APB1LPENR_0_TIM7LPEN TIM7LPEN
#define RCC_APB1LPENR_0_USART3LPEN USART3LPEN
#else
#define RCC_APB1LPENR_0_TIM7LPEN
#define RCC_APB1LPENR_0_USART3LPEN
#endif

#if	defined(STM32F446xx  ) || defined(STM32F745xx  ) || defined(STM32F746xx  ) || defined(STM32F750xx  ) || defined(STM32F756xx  ) || \
    defined(STM32F765xx  ) || defined(STM32F767xx  ) || defined(STM32F769xx  ) || defined(STM32F777xx  ) || defined(STM32F779xx  )
#define RCC_APB1LPENR_0_CECLPEN CECLPEN
#else
#define RCC_APB1LPENR_0_CECLPEN
#endif

#if	defined(STM32F2      ) || defined(STM32F7      ) || defined(STM32L1      ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || \
    defined(STM32F410Cx  ) || defined(STM32F410Rx  ) || defined(STM32F410Tx  ) || defined(STM32F413xx  ) || defined(STM32F415xx  ) || \
    defined(STM32F417xx  ) || defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F437xx  ) || \
    defined(STM32F439xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_APB1LPENR_0_DACLPEN DACLPEN
#else
#define RCC_APB1LPENR_0_DACLPEN
#endif

#if	defined(STM32L1      ) || defined(STM32F410Cx  ) || defined(STM32F410Rx  ) || defined(STM32F410Tx  ) || defined(STM32F413xx  ) || \
    defined(STM32F423xx  ) || defined(STM32F446xx  )
#define RCC_APB1LPENR_1
#endif

#if	defined(STM32F7      ) || defined(STM32F413xx  ) || defined(STM32F423xx  ) || defined(STM32F429xx  ) || defined(STM32F439xx  ) || \
    defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_PLLI2SCFGR_0
#endif

#if	defined(STM32F413xx  ) || defined(STM32F423xx  ) || defined(STM32F446xx  )
#define RCC_PLLI2SCFGR_0_PLLI2SM PLLI2SM
#define RCC_DCKCFGR_0_I2S1SRC I2S1SRC
#define RCC_DCKCFGR_1_I2S2SRC I2S2SRC
#define RCC_CKGATENR
#define RCC_MAP5_CKGATENR CKGATENR_t CKGATENR
#else
#define RCC_PLLI2SCFGR_0_PLLI2SM
#define RCC_DCKCFGR_0_I2S1SRC
#define RCC_DCKCFGR_1_I2S2SRC
#define RCC_MAP5_CKGATENR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32F401xC  ) || defined(STM32F401xE  ) || defined(STM32F405xx  ) || defined(STM32F407xx  ) || defined(STM32F411xE  ) || \
    defined(STM32F412Cx  ) || defined(STM32F412Rx  ) || defined(STM32F412Vx  ) || defined(STM32F412Zx  ) || defined(STM32F415xx  ) || \
    defined(STM32F417xx  ) || defined(STM32F427xx  ) || defined(STM32F437xx  )
#define RCC_PLLI2SCFGR_1
#endif

#if	defined(STM32F7      ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || \
    defined(STM32F479xx  )
#define RCC_PLLSAICFGR
#define RCC_MAP3_PLLSAICFGR PLLSAICFGR_t PLLSAICFGR
#else
#define RCC_MAP3_PLLSAICFGR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32F7      ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_PLLSAICFGR_PLLSAIP PLLSAIP
#else
#define RCC_PLLSAICFGR_PLLSAIP
#endif

#if	defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  ) || defined(STM32F745xx  ) || \
    defined(STM32F746xx  ) || defined(STM32F750xx  ) || defined(STM32F756xx  ) || defined(STM32F765xx  ) || defined(STM32F767xx  ) || \
    defined(STM32F769xx  ) || defined(STM32F777xx  ) || defined(STM32F779xx  )
#define RCC_PLLSAICFGR_PLLSAIR PLLSAIR
#else
#define RCC_PLLSAICFGR_PLLSAIR
#endif

#if	defined(STM32F410Cx  ) || defined(STM32F410Rx  ) || defined(STM32F410Tx  ) || defined(STM32F413xx  ) || defined(STM32F423xx  ) || \
    defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_DCKCFGR
#define RCC_MAP4_DCKCFGR DCKCFGR_t DCKCFGR
#else
#define RCC_MAP4_DCKCFGR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_DCKCFGR_0_PLLSAIDIVQ PLLSAIDIVQ
#else
#define RCC_DCKCFGR_0_PLLSAIDIVQ
#endif

#if	defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F469xx  ) || defined(STM32F479xx  )
#define RCC_DCKCFGR_0_PLLSAIDIVR PLLSAIDIVR
#define RCC_DCKCFGR_0_SAI1ASRC SAI1ASRC
#define RCC_DCKCFGR_0_SAI1BSRC SAI1BSRC
#else
#define RCC_DCKCFGR_0_PLLSAIDIVR
#define RCC_DCKCFGR_0_SAI1ASRC
#define RCC_DCKCFGR_0_SAI1BSRC
#endif

#if	defined(STM32F410Cx  ) || defined(STM32F410Rx  ) || defined(STM32F410Tx  ) || defined(STM32F413xx  ) || defined(STM32F423xx  ) || \
    defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F446xx  )
#define RCC_DCKCFGR_1
#endif

#if	defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F446xx  )
#define RCC_DCKCFGR_1_PLLI2SDIVQ PLLI2SDIVQ
#else
#define RCC_DCKCFGR_1_PLLI2SDIVQ
#endif

#if	defined(STM32F410Cx  ) || defined(STM32F410Rx  ) || defined(STM32F410Tx  ) || defined(STM32F413xx  ) || defined(STM32F423xx  ) || \
    defined(STM32F446xx  ) || defined(STM32F722xx  ) || defined(STM32F723xx  ) || defined(STM32F730xx  ) || defined(STM32F732xx  ) || \
    defined(STM32F733xx  )
#define RCC_DCKCFGR2
#endif

#if	defined(STM32F413xx  ) || defined(STM32F423xx  ) || defined(STM32F446xx  ) || defined(STM32F722xx  ) || defined(STM32F723xx  ) || \
    defined(STM32F730xx  ) || defined(STM32F732xx  ) || defined(STM32F733xx  )
#define RCC_DCKCFGR2_0
#endif

#if	defined(STM32F410Cx  ) || defined(STM32F410Rx  ) || defined(STM32F410Tx  ) || defined(STM32F413xx  ) || defined(STM32F423xx  ) || \
    defined(STM32F446xx  )
#define RCC_DCKCFGR2_1
#define RCC_MAP5_DCKCFGR2 DCKCFGR2_t DCKCFGR2
#else
#define RCC_MAP5_DCKCFGR2 __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32F410Cx  ) || defined(STM32F410Rx  ) || defined(STM32F410Tx  ) || defined(STM32F413xx  ) || defined(STM32F423xx  )
#define RCC_DCKCFGR2_2
#endif

#if	defined(STM32F3      ) || defined(STM32G0      ) || defined(STM32L0      )
#define RCC_AHBENR_0_DMAEN DMAEN
#else
#define RCC_AHBENR_0_DMAEN
#endif

#if	defined(STM32F031x6  ) || defined(STM32F038xx  ) || defined(STM32F048xx  ) || defined(STM32F051x8  ) || defined(STM32F058xx  ) || \
    defined(STM32F071xB  ) || defined(STM32F078xx  ) || defined(STM32F091xC  ) || defined(STM32F098xx  ) || defined(STM32F301x8  ) || \
    defined(STM32F302x8  ) || defined(STM32F302xC  ) || defined(STM32F302xE  ) || defined(STM32F303xC  ) || defined(STM32F303xE  ) || \
    defined(STM32F318xx  ) || defined(STM32F328xx  ) || defined(STM32F358xx  ) || defined(STM32F373xC  ) || defined(STM32F378xx  ) || \
    defined(STM32F398xx  )
#define RCC_AHBENR_0_DMA2EN DMA2EN
#else
#define RCC_AHBENR_0_DMA2EN
#endif

#if	defined(STM32L151xB  ) || defined(STM32L151xBA ) || defined(STM32L151xC  ) || defined(STM32L151xCA ) || defined(STM32L151xD  ) || \
    defined(STM32L151xE  ) || defined(STM32L152xB  ) || defined(STM32L152xBA ) || defined(STM32L152xC  ) || defined(STM32L152xCA ) || \
    defined(STM32L152xD  ) || defined(STM32L152xE  )
#define RCC_AHBENR_0_GPIOHEN GPIOHEN
#define RCC_AHBENR_0_GPIOGEN GPIOGEN
#define RCC_AHBENR_1_DMA2EN DMA2EN
#define RCC_AHBENR_2_GPIOEEN GPIOEEN
#define RCC_AHBENR_2_GPIOFEN GPIOFEN
#define RCC_AHBENR_2_DMA1EN DMA1EN
#define RCC_AHBRSTR_0_GPIOERST GPIOERST
#define RCC_AHBRSTR_0_GPIOHRST GPIOHRST
#define RCC_AHBRSTR_0_GPIOFRST GPIOFRST
#define RCC_AHBRSTR_0_GPIOGRST GPIOGRST
#define RCC_AHBRSTR_0_DMA2RST DMA2RST
#define RCC_AHBRSTR_2_DMA1RST DMA1RST
#define RCC_AHBLPENR_0_GPIOELPEN GPIOELPEN
#define RCC_AHBLPENR_0_GPIOHLPEN GPIOHLPEN
#define RCC_AHBLPENR_0_GPIOFLPEN GPIOFLPEN
#define RCC_AHBLPENR_0_GPIOGLPEN GPIOGLPEN
#define RCC_AHBLPENR_0_DMA1LPEN DMA1LPEN
#define RCC_AHBLPENR_0_DMA2LPEN DMA2LPEN
#else
#define RCC_AHBENR_0_GPIOHEN
#define RCC_AHBENR_0_GPIOGEN
#define RCC_AHBENR_1_DMA2EN
#define RCC_AHBENR_2_GPIOEEN
#define RCC_AHBENR_2_GPIOFEN
#define RCC_AHBENR_2_DMA1EN
#define RCC_AHBRSTR_0_GPIOERST
#define RCC_AHBRSTR_0_GPIOHRST
#define RCC_AHBRSTR_0_GPIOFRST
#define RCC_AHBRSTR_0_GPIOGRST
#define RCC_AHBRSTR_0_DMA2RST
#define RCC_AHBRSTR_2_DMA1RST
#define RCC_AHBLPENR_0_GPIOELPEN
#define RCC_AHBLPENR_0_GPIOHLPEN
#define RCC_AHBLPENR_0_GPIOFLPEN
#define RCC_AHBLPENR_0_GPIOGLPEN
#define RCC_AHBLPENR_0_DMA1LPEN
#define RCC_AHBLPENR_0_DMA2LPEN
#endif

#if	defined(STM32F301x8  ) || defined(STM32F302x8  ) || defined(STM32F302xC  ) || defined(STM32F302xE  ) || defined(STM32F303xC  ) || \
    defined(STM32F303xE  ) || defined(STM32F318xx  ) || defined(STM32F328xx  ) || defined(STM32F358xx  ) || defined(STM32F373xC  ) || \
    defined(STM32F378xx  ) || defined(STM32F398xx  )
#define RCC_AHBENR_0_IOPEEN IOPEEN
#define RCC_AHBENR_1_GPIOEEN GPIOEEN
#define RCC_AHBRSTR_0_IOPERST IOPERST
#define RCC_CFGR3_0_I2C2SW I2C2SW
#define RCC_CFGR3_0_USART3SW USART3SW
#else
#define RCC_AHBENR_0_IOPEEN
#define RCC_AHBENR_1_GPIOEEN
#define RCC_AHBRSTR_0_IOPERST
#define RCC_CFGR3_0_I2C2SW
#define RCC_CFGR3_0_USART3SW
#endif

#if	defined(STM32F302xE  ) || defined(STM32F303xE  )
#define RCC_AHBENR_0_IOPGEN IOPGEN
#define RCC_AHBENR_1_IOPHEN IOPHEN
#define RCC_AHBENR_1_GPIOGEN GPIOGEN
#define RCC_AHBENR_2_GPIOHEN GPIOHEN
#define RCC_AHBRSTR_0_IOPGRST IOPGRST
#define RCC_AHBRSTR_1_IOPHRST IOPHRST
#else
#define RCC_AHBENR_0_IOPGEN
#define RCC_AHBENR_1_IOPHEN
#define RCC_AHBENR_1_GPIOGEN
#define RCC_AHBENR_2_GPIOHEN
#define RCC_AHBRSTR_0_IOPGRST
#define RCC_AHBRSTR_1_IOPHRST
#endif

#if	defined(STM32F301x8  ) || defined(STM32F302x8  ) || defined(STM32F302xC  ) || defined(STM32F302xE  ) || defined(STM32F303x8  ) || \
    defined(STM32F303xC  ) || defined(STM32F303xE  ) || defined(STM32F318xx  ) || defined(STM32F328xx  ) || defined(STM32F358xx  )
#define RCC_AHBENR_0_ADC34EN ADC34EN
#define RCC_AHBRSTR_0_ADC34RST ADC34RST
#define RCC_CFGR2_ADC34PRES ADC34PRES
#else
#define RCC_AHBENR_0_ADC34EN
#define RCC_AHBRSTR_0_ADC34RST
#define RCC_CFGR2_ADC34PRES
#endif

#if	defined(STM32L151xB  ) || defined(STM32L151xD  ) || defined(STM32L151xE  ) || defined(STM32L152xB  ) || defined(STM32L152xC  ) || \
    defined(STM32L152xD  ) || defined(STM32L152xE  )
#define RCC_AHBENR_0_FSMCEN FSMCEN
#define RCC_AHBRSTR_0_FSMCRST FSMCRST
#else
#define RCC_AHBENR_0_FSMCEN
#define RCC_AHBRSTR_0_FSMCRST
#endif

#if	defined(STM32G0      ) || defined(STM32L1      ) || defined(STM32F302xE  ) || defined(STM32F303xE  )
#define RCC_AHBENR_2
#endif

#if	defined(STM32L051xx  ) || defined(STM32L052xx  ) || defined(STM32L053xx  ) || defined(STM32L062xx  ) || defined(STM32L063xx  ) || \
    defined(STM32L072xx  ) || defined(STM32L073xx  ) || defined(STM32L082xx  ) || defined(STM32L083xx  ) || defined(STM32L100xB  ) || \
    defined(STM32L100xBA ) || defined(STM32L100xC  )
#define RCC_AHBENR_3
#endif

#if	defined(STM32L100xB  ) || defined(STM32L100xBA ) || defined(STM32L100xC  )
#define RCC_AHBENR_3_DMAEN DMAEN
#define RCC_AHBRSTR_3
#define RCC_AHBLPENR_1
#else
#define RCC_AHBENR_3_DMAEN
#endif

#if	defined(STM32G0      ) || defined(STM32L0      )
#define RCC_AHBRSTR_0_DMARST DMARST
#define RCC_IOPRSTR
#define RCC_IOPENR
#define RCC_AHBSMENR
#else
#define RCC_AHBRSTR_0_DMARST
#endif

#if	defined(STM32G0      ) || defined(STM32L0      ) || defined(STM32L1      ) || defined(STM32F302xE  ) || defined(STM32F303xE  )
#define RCC_AHBRSTR_1
#endif

#if	defined(STM32L051xx  ) || defined(STM32L052xx  ) || defined(STM32L053xx  ) || defined(STM32L062xx  ) || defined(STM32L063xx  ) || \
    defined(STM32L072xx  ) || defined(STM32L073xx  ) || defined(STM32L082xx  ) || defined(STM32L083xx  ) || defined(STM32L151xB  ) || \
    defined(STM32L151xBA ) || defined(STM32L151xC  ) || defined(STM32L151xCA ) || defined(STM32L151xD  ) || defined(STM32L151xE  ) || \
    defined(STM32L152xB  ) || defined(STM32L152xBA ) || defined(STM32L152xC  ) || defined(STM32L152xCA ) || defined(STM32L152xD  ) || \
    defined(STM32L152xE  )
#define RCC_AHBRSTR_2
#endif

#if	defined(STM32F0      ) || defined(STM32F301x8  ) || defined(STM32F302x8  ) || defined(STM32F302xC  ) || defined(STM32F302xE  ) || \
    defined(STM32F303xC  ) || defined(STM32F303xE  ) || defined(STM32F318xx  ) || defined(STM32F328xx  ) || defined(STM32F358xx  ) || \
    defined(STM32F373xC  ) || defined(STM32F378xx  ) || defined(STM32F398xx  )
#define RCC_CFGR3_0_USART2SW USART2SW
#else
#define RCC_CFGR3_0_USART2SW
#endif

#if	defined(STM32L053xx  ) || defined(STM32L063xx  ) || defined(STM32L072xx  ) || defined(STM32L073xx  ) || defined(STM32L082xx  ) || \
    defined(STM32L083xx  )
#define RCC_APB1SMENR_LCDSMEN LCDSMEN
#else
#define RCC_APB1SMENR_LCDSMEN
#endif

#if	defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32L0      ) || defined(STM32L1      ) || \
    defined(STM32L4      ) || defined(STM32MP1     ) || defined(STM32WB      ) || defined(STM32H742xx  ) || defined(STM32H743xx  ) || \
    defined(STM32H745xx_CORE_CM4) || defined(STM32H745xx_CORE_CM7) || defined(STM32H750xx  ) || defined(STM32H753xx  ) || defined(STM32H755xx_CORE_CM4) || \
    defined(STM32H755xx_CORE_CM7)
#define RCC_MAP0
#endif

#if	defined(STM32H7      ) || defined(STM32L051xx  ) || defined(STM32L052xx  ) || defined(STM32L053xx  ) || defined(STM32L062xx  ) || \
    defined(STM32L063xx  ) || defined(STM32L072xx  ) || defined(STM32L073xx  ) || defined(STM32L082xx  ) || defined(STM32L083xx  )
#define RCC_MAP1_CRRCR CRRCR_t CRRCR
#else
#define RCC_MAP1_CRRCR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32F2      ) || defined(STM32F4      ) || defined(STM32F7      ) || defined(STM32G0      ) || defined(STM32G4      ) || \
    defined(STM32GB      ) || defined(STM32L1      ) || defined(STM32L4      ) || defined(STM32WB      ) || defined(STM32H742xx  ) || \
    defined(STM32H743xx  ) || defined(STM32H745xx_CORE_CM4) || defined(STM32H745xx_CORE_CM7) || defined(STM32H750xx  ) || defined(STM32H753xx  ) || \
    defined(STM32H755xx_CORE_CM4) || defined(STM32H755xx_CORE_CM7)
#define RCC_MAP2
#endif

#if	defined(STM32F2      ) || defined(STM32F4      ) || defined(STM32F7      ) || defined(STM32G0      ) || defined(STM32G4      ) || \
    defined(STM32GB      ) || defined(STM32L1      ) || defined(STM32L4      ) || defined(STM32WB      )
#define RCC_MAP2_CFGR CFGR_t CFGR
#else
#define RCC_MAP2_CFGR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32G4      ) || defined(STM32GB      ) || defined(STM32WB      ) || defined(STM32L412xx  ) || defined(STM32L422xx  ) || \
    defined(STM32L431xx  ) || defined(STM32L432xx  ) || defined(STM32L442xx  ) || defined(STM32L451xx  ) || defined(STM32L452xx  ) || \
    defined(STM32L462xx  ) || defined(STM32L471xx  ) || defined(STM32L4P5xx  ) || defined(STM32L4Q5xx  ) || defined(STM32L4R5xx  ) || \
    defined(STM32L4R7xx  ) || defined(STM32L4R9xx  ) || defined(STM32L4S5xx  ) || defined(STM32L4S7xx  ) || defined(STM32L4S9xx  )
#define RCC_MAP2_CRRCR CRRCR_t CRRCR
#else
#define RCC_MAP2_CRRCR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32F2      ) || defined(STM32F4      ) || defined(STM32F7      ) || defined(STM32L0      ) || defined(STM32L1      )
#define RCC_MAP3
#endif

#if	defined(STM32F2      ) || defined(STM32F4      ) || defined(STM32F7      ) || defined(STM32L0      )
#define RCC_MAP3_APB2RSTR APB2RSTR_t APB2RSTR
#else
#define RCC_MAP3_APB2RSTR __SOOL_PERIPH_PADDING_4
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || \
    defined(STM32L1      ) || defined(STM32F410Cx  ) || defined(STM32F410Rx  ) || defined(STM32F410Tx  ) || defined(STM32F413xx  ) || \
    defined(STM32F423xx  ) || defined(STM32F427xx  ) || defined(STM32F429xx  ) || defined(STM32F446xx  ) || defined(STM32F469xx  ) || \
    defined(STM32F479xx  ) || defined(STM32F722xx  ) || defined(STM32F723xx  ) || defined(STM32F730xx  ) || defined(STM32F732xx  ) || \
    defined(STM32F733xx  )
#define RCC_MAP4
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32G0      ) || defined(STM32WB      ) || defined(STM32F410Cx  ) || \
    defined(STM32F410Rx  ) || defined(STM32F410Tx  ) || defined(STM32F413xx  ) || defined(STM32F423xx  ) || defined(STM32F446xx  )
#define RCC_MAP5
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32G0      )
#define RCC_MAP5_AHBRSTR AHBRSTR_t AHBRSTR
#else
#define RCC_MAP5_AHBRSTR __SOOL_PERIPH_PADDING_4
#endif

namespace sool {
	namespace core {
		class RCC /// rcc
		{
		public:
			
			#ifdef RCC_TZCR
			struct TZCR_t: public Reg32_t /// This register is used to switch the RCC into secure mode. This register can only be accessed in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t TZEN             : 1;
				uint32_t MCKPROT          : 1;
				uint32_t                  : 30;
				
			};
			#endif
			#ifdef RCC_OCENSETR
			struct OCENSETR_t: public Reg32_t /// This register is used to control the oscillators.Writing to this register has no effect, writing will set the corresponding bits. Reading will give the effective values of each bit.If , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
			{
				using Reg32_t::operator=;
				uint32_t HSION            : 1;
				uint32_t HSIKERON         : 1;
				uint32_t                  : 2;
				uint32_t CSION            : 1;
				uint32_t CSIKERON         : 1;
				uint32_t                  : 1;
				uint32_t DIGBYP           : 1;
				uint32_t HSEON            : 1;
				uint32_t HSEKERON         : 1;
				uint32_t HSEBYP           : 1;
				uint32_t HSECSSON         : 1;
				uint32_t                  : 20;
				
			};
			#endif
			#ifdef RCC_OCENCLRR
			struct OCENCLRR_t: public Reg32_t /// This register is used to control the oscillators.Writing to this register has no effect, writing will clear the corresponding bits. Reading will give the effective values of the enable bits.If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
			{
				using Reg32_t::operator=;
				uint32_t HSION            : 1;
				uint32_t HSIKERON         : 1;
				uint32_t                  : 2;
				uint32_t CSION            : 1;
				uint32_t CSIKERON         : 1;
				uint32_t                  : 1;
				uint32_t DIGBYP           : 1;
				uint32_t HSEON            : 1;
				uint32_t HSEKERON         : 1;
				uint32_t HSEBYP           : 1;
				uint32_t                  : 21;
				
			};
			#endif
			#ifdef RCC_HSICFGR
			struct HSICFGR_t: public Reg32_t /// This register is used to configure the HSI. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
			{
				using Reg32_t::operator=;
				union
				{
					#ifdef RCC_HSICFGR_0
					struct
					{
						uint32_t HSIDIV           : 2;
						uint32_t                  : 6;
						uint32_t HSITRIM          : 7;
						uint32_t                  : 1;
						uint32_t HSICAL           : 12;
						uint32_t                  : 4;
					};
					#endif
					#ifdef RCC_HSICFGR_1
					struct
					{
						uint32_t HSICAL           : 12; /// HSI clock calibration
						uint32_t                  : 12;
						uint32_t HSITRIM          : 7; /// HSI clock trimming
						uint32_t                  : 1;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_CSICFGR
			struct CSICFGR_t: public Reg32_t /// This register is used to fine-tune the CSI frequency. If TZEN = MCKPROT = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
			{
				using Reg32_t::operator=;
				union
				{
					#ifdef RCC_CSICFGR_0
					struct
					{
						uint32_t                  : 8;
						uint32_t CSITRIM          : 5;
						uint32_t                  : 3;
						uint32_t CSICAL           : 8;
						uint32_t                  : 8;
					};
					#endif
					#ifdef RCC_CSICFGR_1
					struct
					{
						uint32_t CSICAL           : 10; /// CSI clock calibration
						uint32_t                  : 14;
						uint32_t CSITRIM          : 6; /// CSI clock trimming
						uint32_t                  : 2;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_MPCKSELR
			struct MPCKSELR_t: public Reg32_t /// This register is used to select the clock source for the MPU. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
			{
				using Reg32_t::operator=;
				uint32_t MPUSRC           : 2;
				uint32_t                  : 29;
				uint32_t MPUSRCRDY        : 1;
				
			};
			#endif
			#ifdef RCC_ASSCKSELR
			struct ASSCKSELR_t: public Reg32_t /// This register is used to select the clock source for the AXI sub-system. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
			{
				using Reg32_t::operator=;
				uint32_t AXISSRC          : 3;
				uint32_t                  : 28;
				uint32_t AXISSRCRDY       : 1;
				
			};
			#endif
			#ifdef RCC_RCK12SELR
			struct RCK12SELR_t: public Reg32_t /// This register is used to select the reference clock for PLL1 and PLL2. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
			{
				using Reg32_t::operator=;
				uint32_t PLL12SRC         : 2;
				uint32_t                  : 29;
				uint32_t PLL12SRCRDY      : 1;
				
			};
			#endif
			#ifdef RCC_MPCKDIVR
			struct MPCKDIVR_t: public Reg32_t /// This register is used to control the MPU clock prescaler. Please refer to Section1.4.6.3: Sub-System Clock Generation for additional information. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t MPUDIV           : 3;
				uint32_t                  : 28;
				uint32_t MPUDIVRDY        : 1;
				
			};
			#endif
			#ifdef RCC_AXIDIVR
			struct AXIDIVR_t: public Reg32_t /// This register is used to control the AXI Matrix clock prescaler. Please refer to Section1.4.6.3: Sub-System Clock Generation for additional information. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t AXIDIV           : 3;
				uint32_t                  : 28;
				uint32_t AXIDIVRDY        : 1;
				
			};
			#endif
			#ifdef RCC_APB4DIVR
			struct APB4DIVR_t: public Reg32_t /// This register is used to control the APB4 clock divider. Please refer to Section1.4.6.3: Sub-System Clock Generation for additional information. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t APB4DIV          : 3;
				uint32_t                  : 28;
				uint32_t APB4DIVRDY       : 1;
				
			};
			#endif
			#ifdef RCC_APB5DIVR
			struct APB5DIVR_t: public Reg32_t /// This register is used to control the APB5 clock divider. Please refer to Section1.4.6.3: Sub-System Clock Generation for additional information. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t APB5DIV          : 3;
				uint32_t                  : 28;
				uint32_t APB5DIVRDY       : 1;
				
			};
			#endif
			#ifdef RCC_RTCDIVR
			struct RTCDIVR_t: public Reg32_t /// This register is used to divide the HSE clock for RTC. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t RTCDIV           : 6;
				uint32_t                  : 26;
				
			};
			#endif
			#ifdef RCC_MSSCKSELR
			struct MSSCKSELR_t: public Reg32_t /// This register is used to select the clock source for the MCU sub-system, including the MCU itself. If TZEN = MCKPROT = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
			{
				using Reg32_t::operator=;
				uint32_t MCUSSRC          : 3;
				uint32_t                  : 28;
				uint32_t MCUSSRCRDY       : 1;
				
			};
			#endif
			#ifdef RCC_PLL1CR
			struct PLL1CR_t: public Reg32_t /// This register is used to control the PLL1. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
			{
				using Reg32_t::operator=;
				uint32_t PLLON            : 1;
				uint32_t PLL1RDY          : 1;
				uint32_t SSCG_CTRL        : 1;
				uint32_t                  : 1;
				uint32_t DIVPEN           : 1;
				uint32_t DIVQEN           : 1;
				uint32_t DIVREN           : 1;
				uint32_t                  : 25;
				
			};
			#endif
			#ifdef RCC_PLL1CFGR1
			struct PLL1CFGR1_t: public Reg32_t /// This register is used to configure the PLL1. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
			{
				using Reg32_t::operator=;
				uint32_t DIVN             : 9;
				uint32_t                  : 7;
				uint32_t DIVM1            : 6;
				uint32_t                  : 10;
				
			};
			#endif
			#ifdef RCC_PLLxCFGR2
			struct PLLxCFGR2_t: public Reg32_t /// This register is used to configure the PLL1. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
			{
				using Reg32_t::operator=;
				uint32_t DIVP             : 7;
				uint32_t                  : 1;
				uint32_t DIVQ             : 7;
				uint32_t                  : 1;
				uint32_t DIVR             : 7;
				uint32_t                  : 9;
				
			};
			#endif
			#ifdef RCC_PLLxFRACR
			struct PLLxFRACR_t: public Reg32_t /// This register is used to fine-tune the frequency of the PLL1 VCO. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
			{
				using Reg32_t::operator=;
				uint32_t                  : 3;
				uint32_t FRACV            : 13;
				uint32_t FRACLE           : 1;
				uint32_t                  : 15;
				
			};
			#endif
			#ifdef RCC_PLLxCSGR
			struct PLLxCSGR_t: public Reg32_t /// This register is used to configure the PLL1.It is not recommended to change the content of this register when the PLL1 is enabled (PLLON = ). Please refer to Section1.4.5.4: Using the PLLs in spread spectrum mode for details. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
			{
				using Reg32_t::operator=;
				uint32_t MOD_PER          : 13;
				uint32_t TPDFN_DIS        : 1;
				uint32_t RPDFN_DIS        : 1;
				uint32_t SSCG_MODE        : 1;
				uint32_t INC_STEP         : 15;
				uint32_t                  : 1;
				
			};
			#endif
			#ifdef RCC_PLL2CR
			struct PLL2CR_t: public Reg32_t /// This register is used to control the PLL2. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
			{
				using Reg32_t::operator=;
				uint32_t PLLON            : 1;
				uint32_t PLL2RDY          : 1;
				uint32_t SSCG_CTRL        : 1;
				uint32_t                  : 1;
				uint32_t DIVPEN           : 1;
				uint32_t DIVQEN           : 1;
				uint32_t DIVREN           : 1;
				uint32_t                  : 25;
				
			};
			#endif
			#ifdef RCC_PLL2CFGR1
			struct PLL2CFGR1_t: public Reg32_t /// This register is used to configure the PLL2. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
			{
				using Reg32_t::operator=;
				uint32_t DIVN             : 9;
				uint32_t                  : 7;
				uint32_t DIVM2            : 6;
				uint32_t                  : 10;
				
			};
			#endif
			#ifdef RCC_I2C4CKSELR
			struct I2C4CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the I2C4. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t I2C46SRC         : 3;
				uint32_t                  : 29;
				
			};
			#endif
			#ifdef RCC_SPI6CKSELR
			struct SPI6CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the SPI6. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t SPI6SRC          : 3;
				uint32_t                  : 29;
				
			};
			#endif
			#ifdef RCC_UART1CKSELR
			struct UART1CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the USART1. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t UART1SRC         : 3;
				uint32_t                  : 29;
				
			};
			#endif
			#ifdef RCC_RNG1CKSELR
			struct RNG1CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the RNG1. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t RNG1SRC          : 2;
				uint32_t                  : 30;
				
			};
			#endif
			#ifdef RCC_CPERCKSELR
			struct CPERCKSELR_t: public Reg32_t /// This register is used to select an oscillator source as kernel clock for the per_ck clock. The per_ck clock is distributed to several peripherals. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t CKPERSRC         : 2;
				uint32_t                  : 30;
				
			};
			#endif
			#ifdef RCC_STGENCKSELR
			struct STGENCKSELR_t: public Reg32_t /// This register is used to select the peripheral clock for the STGEN block. Note that this clock is used to provide a time reference for the application. Please refer to Section1.4.10.1: Clock Enabling Delays. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t STGENSRC         : 2;
				uint32_t                  : 30;
				
			};
			#endif
			#ifdef RCC_DDRITFCR
			struct DDRITFCR_t: public Reg32_t /// This register is used to control the DDR interface, including the DDRC and DDRPHYC. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t DDRC1EN          : 1;
				uint32_t DDRC1LPEN        : 1;
				uint32_t DDRC2EN          : 1;
				uint32_t DDRC2LPEN        : 1;
				uint32_t DDRPHYCEN        : 1;
				uint32_t DDRPHYCLPEN      : 1;
				uint32_t DDRCAPBEN        : 1;
				uint32_t DDRCAPBLPEN      : 1;
				uint32_t AXIDCGEN         : 1;
				uint32_t DDRPHYCAPBEN     : 1;
				uint32_t DDRPHYCAPBLPEN   : 1;
				uint32_t KERDCG_DLY       : 3;
				uint32_t DDRCAPBRST       : 1;
				uint32_t DDRCAXIRST       : 1;
				uint32_t DDRCORERST       : 1;
				uint32_t DPHYAPBRST       : 1;
				uint32_t DPHYRST          : 1;
				uint32_t DPHYCTLRST       : 1;
				uint32_t DDRCKMOD         : 3;
				uint32_t GSKPMOD          : 1;
				uint32_t GSKPCTRL         : 1;
				uint32_t DFILP_WIDTH      : 3;
				uint32_t GSKP_DUR         : 4;
				
			};
			#endif
			#ifdef RCC_MP_BOOTCR
			struct MP_BOOTCR_t: public Reg32_t /// This register is used to control the HOLD boot function when the system exits from STANDBY. Please refer to Section1.3.13.5: MCU HOLD_BOOT After Processor Reset. This register is reset when a system reset occurs, but not when the circuit exits from STANDBY (app_rst reset).If TZEN = , this register can only be modified in secure mode. This register can only be accessed by the MPU.
			{
				using Reg32_t::operator=;
				uint32_t MCU_BEN          : 1;
				uint32_t MPU_BEN          : 1;
				uint32_t                  : 30;
				
			};
			#endif
			#ifdef RCC_MP_SREQSETR
			struct MP_SREQSETR_t: public Reg32_t /// Writing has no effect, reading will return the values of the bits. Writing a sets the corresponding bit to . The MCU cannot access to this register. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t STPREQ_P0        : 1;
				uint32_t STPREQ_P1        : 1;
				uint32_t                  : 30;
				
			};
			#endif
			#ifdef RCC_MP_GCR
			struct MP_GCR_t: public Reg32_t /// The register contains global control bits. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t BOOT_MCU         : 1;
				uint32_t                  : 31;
				
			};
			#endif
			#ifdef RCC_MP_APRSTCR
			struct MP_APRSTCR_t: public Reg32_t /// This register is used to control the behavior of the warm reset. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t RDCTLEN          : 1;
				uint32_t                  : 7;
				uint32_t RSTTO            : 7;
				uint32_t                  : 17;
				
			};
			#endif
			#ifdef RCC_MP_APRSTSR
			struct MP_APRSTSR_t: public Reg32_t /// This register provides a status of the RDCTL. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t                  : 8;
				uint32_t RSTTOV           : 7;
				uint32_t                  : 17;
				
			};
			#endif
			#ifdef RCC_BDCR
			struct BDCR_t: public Reg32_t /// This register is used to control the LSE function. Wait states are inserted in case of successive write accesses to this register. The number of wait states may be up to 7 cycles of AHB4 clock.After a system reset, the register RCC_BDCR is write-protected. In order to modify this register, the DBP bit in the PWR control register 1 (PWR_CR1) has to be set to . Bits of RCC_BDCR register are only reset after a backup domain reset: nreset_vsw (see Section1.3.5: Backup domain reset). Any other internal or external reset will not have any effect on these bits.This register is located into the VSW domain. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t LSEON            : 1; /// LSE oscillator enabled
						uint32_t RCC_BDCR_0_LSEBYP : 1;
						uint32_t RCC_BDCR_0_LSERDY : 1;
						uint32_t RCC_BDCR_0_LSEMOD : 1; /// External low-speed oscillator mode
						uint32_t RCC_BDCR_0_LSEDRV : 2;
						uint32_t RCC_BDCR_0_LSECSSD_ : 1; /// CSS on LSE failure detection
						uint32_t                  : 1;
						uint32_t RCC_BDCR_0_LSECSSON : 1;
						uint32_t RCC_BDCR_0_LSECSSD : 1;
						uint32_t                  : 5;
						uint32_t RCC_BDCR_0_RTCEN : 1; /// RTC clock enable
						uint32_t RCC_BDCR_0_RTCSRC : 2;
						uint32_t                  : 2;
						uint32_t RCC_BDCR_0_RTCCKEN : 1;
						uint32_t                  : 3;
						uint32_t RCC_BDCR_0_LSCOEN : 1; /// Low speed clock output enable
						uint32_t RCC_BDCR_0_LSCOSEL : 1; /// Low speed clock output selection
						uint32_t                  : 5;
						uint32_t RCC_BDCR_0_VSWRST : 1;
					};
					#ifdef RCC_BDCR_1
					struct
					{
						uint32_t                  : 1;
						uint32_t LSERDY           : 1; /// LSE oscillator ready
						uint32_t LSEBYP           : 1; /// LSE oscillator bypass
						uint32_t RCC_BDCR_1_LSEDRV : 2; /// LSE oscillator driving capability
						uint32_t RCC_BDCR_1_LSECSSON : 1; /// LSE clock security system enable
						uint32_t RCC_BDCR_1_LSECSSD : 1; /// LSE clock security system failure detection
						uint32_t                  : 1;
						uint32_t RCC_BDCR_1_RTCSRC : 2; /// RTC clock source selection
						uint32_t                  : 6;
						uint32_t RCC_BDCR_1_VSWRST : 1; /// VSwitch domain software reset
						uint32_t                  : 7;
						uint32_t RCC_BDCR_1_LSCCOEN : 1; /// Low speed clock output enable
						uint32_t RCC_BDCR_1_LSCOSEL : 2; /// Low speed clock output selection
						uint32_t                  : 5;
					};
					#endif
					#ifdef RCC_BDCR_2
					struct
					{
						uint32_t                  : 8;
						uint32_t RCC_BDCR_2_RTCSEL : 2; /// RTC clock source selection
						uint32_t                  : 6;
						uint32_t RCC_BDCR_2_BDRST : 1; /// Backup domain software reset
						uint32_t                  : 15;
					};
					#endif
					#ifdef RCC_BDCR_3
					struct
					{
						uint32_t                  : 8;
						uint32_t RTCSEL0          : 1; /// RTC clock source selection
						uint32_t RTCSEL1          : 1; /// RTC clock source selection
						uint32_t                  : 22;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_RDLSICR
			struct RDLSICR_t: public Reg32_t /// This register is used to control the minimum NRST active duration and LSI function.0 to 7 wait states are inserted for word, half-word and byte accesses. Wait states are inserted in case of successive accesses to this register.This register is reset by the por_rst reset, and it is located into the VDD domain. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t LSION            : 1;
				uint32_t LSIRDY           : 1;
				uint32_t                  : 14;
				uint32_t MRD              : 5;
				uint32_t                  : 3;
				uint32_t EADLY            : 3;
				uint32_t SPARE            : 5;
				
			};
			#endif
			#ifdef RCC_APB4RSTSETR
			struct APB4RSTSETR_t: public Reg32_t /// This register is used to activate the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral.
			{
				using Reg32_t::operator=;
				uint32_t LTDCRST          : 1;
				uint32_t                  : 3;
				uint32_t DSIRST           : 1;
				uint32_t                  : 3;
				uint32_t DDRPERFMRST      : 1;
				uint32_t                  : 7;
				uint32_t USBPHYRST        : 1;
				uint32_t                  : 15;
				
			};
			#endif
			#ifdef RCC_APB5RSTSETR
			struct APB5RSTSETR_t: public Reg32_t /// This register is used to activate the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t SPI6RST          : 1;
				uint32_t                  : 1;
				uint32_t I2C4RST          : 1;
				uint32_t I2C6RST          : 1;
				uint32_t USART1RST        : 1;
				uint32_t                  : 15;
				uint32_t STGENRST         : 1;
				uint32_t                  : 11;
				
			};
			#endif
			#ifdef RCC_AHB5RSTSETR
			struct AHB5RSTSETR_t: public Reg32_t /// This register is used to activate the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t GPIOZRST         : 1;
				uint32_t                  : 3;
				uint32_t CRYP1RST         : 1;
				uint32_t HASH1RST         : 1;
				uint32_t RNG1RST          : 1;
				uint32_t                  : 9;
				uint32_t AXIMCRST         : 1;
				uint32_t                  : 15;
				
			};
			#endif
			#ifdef RCC_AHB6RSTSETR
			struct AHB6RSTSETR_t: public Reg32_t /// This register is used to activate the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral.
			{
				using Reg32_t::operator=;
				uint32_t                  : 5;
				uint32_t GPURST           : 1;
				uint32_t                  : 4;
				uint32_t ETHMACRST        : 1;
				uint32_t                  : 1;
				uint32_t FMCRST           : 1;
				uint32_t                  : 1;
				uint32_t QSPIRST          : 1;
				uint32_t                  : 1;
				uint32_t SDMMC1RST        : 1;
				uint32_t SDMMC2RST        : 1;
				uint32_t                  : 2;
				uint32_t CRC1RST          : 1;
				uint32_t                  : 3;
				uint32_t USBHRST          : 1;
				uint32_t                  : 7;
				
			};
			#endif
			#ifdef RCC_AHB6RSTCLRR
			struct AHB6RSTCLRR_t: public Reg32_t /// This register is used to release the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a releases the reset of the corresponding peripheral.
			{
				using Reg32_t::operator=;
				uint32_t                  : 10;
				uint32_t ETHMACRST        : 1;
				uint32_t                  : 1;
				uint32_t FMCRST           : 1;
				uint32_t                  : 1;
				uint32_t QSPIRST          : 1;
				uint32_t                  : 1;
				uint32_t SDMMC1RST        : 1;
				uint32_t SDMMC2RST        : 1;
				uint32_t                  : 2;
				uint32_t CRC1RST          : 1;
				uint32_t                  : 3;
				uint32_t USBHRST          : 1;
				uint32_t                  : 7;
				
			};
			#endif
			#ifdef RCC_TZAHB6RSTSETR
			struct TZAHB6RSTSETR_t: public Reg32_t /// This register is used to activate the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t MDMARST          : 1;
				uint32_t                  : 31;
				
			};
			#endif
			#ifdef RCC_MP_APB4ENSETR
			struct MP_APB4ENSETR_t: public Reg32_t /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MPU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t LTDCEN           : 1;
				uint32_t                  : 3;
				uint32_t DSIEN            : 1;
				uint32_t                  : 3;
				uint32_t DDRPERFMEN       : 1;
				uint32_t                  : 6;
				uint32_t IWDG2APBEN       : 1;
				uint32_t USBPHYEN         : 1;
				uint32_t                  : 3;
				uint32_t STGENROEN        : 1;
				uint32_t                  : 11;
				
			};
			#endif
			#ifdef RCC_MP_APB5ENSETR
			struct MP_APB5ENSETR_t: public Reg32_t /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MPU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t SPI6EN           : 1;
				uint32_t                  : 1;
				uint32_t I2C4EN           : 1;
				uint32_t I2C6EN           : 1;
				uint32_t USART1EN         : 1;
				uint32_t                  : 3;
				uint32_t RTCAPBEN         : 1;
				uint32_t                  : 2;
				uint32_t TZC1EN           : 1;
				uint32_t TZC2EN           : 1;
				uint32_t TZPCEN           : 1;
				uint32_t                  : 1;
				uint32_t IWDG1APBEN       : 1;
				uint32_t BSECEN           : 1;
				uint32_t                  : 3;
				uint32_t STGENEN          : 1;
				uint32_t                  : 11;
				
			};
			#endif
			#ifdef RCC_MP_AHB5ENSETR
			struct MP_AHB5ENSETR_t: public Reg32_t /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MPU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t GPIOZEN          : 1;
				uint32_t                  : 3;
				uint32_t CRYP1EN          : 1;
				uint32_t HASH1EN          : 1;
				uint32_t RNG1EN           : 1;
				uint32_t                  : 1;
				uint32_t BKPSRAMEN        : 1;
				uint32_t                  : 7;
				uint32_t AXIMCEN          : 1;
				uint32_t                  : 15;
				
			};
			#endif
			#ifdef RCC_AHB6ENSETR
			struct AHB6ENSETR_t: public Reg32_t /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t MDMAEN           : 1;
				uint32_t                  : 4;
				uint32_t GPUEN            : 1;
				uint32_t                  : 1;
				uint32_t ETHCKEN          : 1;
				uint32_t ETHTXEN          : 1;
				uint32_t ETHRXEN          : 1;
				uint32_t ETHMACEN         : 1;
				uint32_t                  : 1;
				uint32_t FMCEN            : 1;
				uint32_t                  : 1;
				uint32_t QSPIEN           : 1;
				uint32_t                  : 1;
				uint32_t SDMMC1EN         : 1;
				uint32_t SDMMC2EN         : 1;
				uint32_t                  : 2;
				uint32_t CRC1EN           : 1;
				uint32_t                  : 3;
				uint32_t USBHEN           : 1;
				uint32_t                  : 7;
				
			};
			#endif
			#ifdef RCC_MP_TZAHB6ENSETR
			struct MP_TZAHB6ENSETR_t: public Reg32_t /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MPU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t MDMAEN           : 1;
				uint32_t                  : 31;
				
			};
			#endif
			#ifdef RCC_MC_APB4ENSETR
			struct MC_APB4ENSETR_t: public Reg32_t /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t LTDCEN           : 1;
				uint32_t                  : 3;
				uint32_t DSIEN            : 1;
				uint32_t                  : 3;
				uint32_t DDRPERFMEN       : 1;
				uint32_t                  : 7;
				uint32_t USBPHYEN         : 1;
				uint32_t                  : 3;
				uint32_t STGENROEN        : 1;
				uint32_t                  : 11;
				
			};
			#endif
			#ifdef RCC_MC_APB5ENSETR
			struct MC_APB5ENSETR_t: public Reg32_t /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t SPI6EN           : 1;
				uint32_t                  : 1;
				uint32_t I2C4EN           : 1;
				uint32_t I2C6EN           : 1;
				uint32_t USART1EN         : 1;
				uint32_t                  : 3;
				uint32_t RTCAPBEN         : 1;
				uint32_t                  : 2;
				uint32_t TZC1EN           : 1;
				uint32_t TZC2EN           : 1;
				uint32_t TZPCEN           : 1;
				uint32_t                  : 2;
				uint32_t BSECEN           : 1;
				uint32_t                  : 3;
				uint32_t STGENEN          : 1;
				uint32_t                  : 11;
				
			};
			#endif
			#ifdef RCC_MC_AHB5ENSETR
			struct MC_AHB5ENSETR_t: public Reg32_t /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t GPIOZEN          : 1;
				uint32_t                  : 3;
				uint32_t CRYP1EN          : 1;
				uint32_t HASH1EN          : 1;
				uint32_t RNG1EN           : 1;
				uint32_t                  : 1;
				uint32_t BKPSRAMEN        : 1;
				uint32_t                  : 23;
				
			};
			#endif
			#ifdef RCC_MP_APB4LPENSETR
			struct MP_APB4LPENSETR_t: public Reg32_t /// This register is used by the MPU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t LTDCLPEN         : 1;
				uint32_t                  : 3;
				uint32_t DSILPEN          : 1;
				uint32_t                  : 3;
				uint32_t DDRPERFMLPEN     : 1;
				uint32_t                  : 6;
				uint32_t IWDG2APBLPEN     : 1;
				uint32_t USBPHYLPEN       : 1;
				uint32_t                  : 3;
				uint32_t STGENROLPEN      : 1;
				uint32_t STGENROSTPEN     : 1;
				uint32_t                  : 10;
				
			};
			#endif
			#ifdef RCC_MP_APB5LPENSETR
			struct MP_APB5LPENSETR_t: public Reg32_t /// This register is used by the MPU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t SPI6LPEN         : 1;
				uint32_t                  : 1;
				uint32_t I2C4LPEN         : 1;
				uint32_t I2C6LPEN         : 1;
				uint32_t USART1LPEN       : 1;
				uint32_t                  : 3;
				uint32_t RTCAPBLPEN       : 1;
				uint32_t                  : 2;
				uint32_t TZC1LPEN         : 1;
				uint32_t TZC2LPEN         : 1;
				uint32_t TZPCLPEN         : 1;
				uint32_t                  : 1;
				uint32_t IWDG1APBLPEN     : 1;
				uint32_t BSECLPEN         : 1;
				uint32_t                  : 3;
				uint32_t STGENLPEN        : 1;
				uint32_t STGENSTPEN       : 1;
				uint32_t                  : 10;
				
			};
			#endif
			#ifdef RCC_AHB5LPENSETR
			struct AHB5LPENSETR_t: public Reg32_t /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t GPIOZLPEN        : 1;
				uint32_t                  : 3;
				uint32_t CRYP1LPEN        : 1;
				uint32_t HASH1LPEN        : 1;
				uint32_t RNG1LPEN         : 1;
				uint32_t                  : 1;
				uint32_t BKPSRAMLPEN      : 1;
				uint32_t                  : 23;
				
			};
			#endif
			#ifdef RCC_AHB6LPENSETR
			struct AHB6LPENSETR_t: public Reg32_t /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t MDMALPEN         : 1;
				uint32_t                  : 4;
				uint32_t GPULPEN          : 1;
				uint32_t                  : 1;
				uint32_t ETHCKLPEN        : 1;
				uint32_t ETHTXLPEN        : 1;
				uint32_t ETHRXLPEN        : 1;
				uint32_t ETHMACLPEN       : 1;
				uint32_t ETHSTPEN         : 1;
				uint32_t FMCLPEN          : 1;
				uint32_t                  : 1;
				uint32_t QSPILPEN         : 1;
				uint32_t                  : 1;
				uint32_t SDMMC1LPEN       : 1;
				uint32_t SDMMC2LPEN       : 1;
				uint32_t                  : 2;
				uint32_t CRC1LPEN         : 1;
				uint32_t                  : 3;
				uint32_t USBHLPEN         : 1;
				uint32_t                  : 7;
				
			};
			#endif
			#ifdef RCC_MP_TZAHB6LPENSETR
			struct MP_TZAHB6LPENSETR_t: public Reg32_t /// This register is used by the MPU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t MDMALPEN         : 1;
				uint32_t                  : 31;
				
			};
			#endif
			#ifdef RCC_MC_APB4LPENSETR
			struct MC_APB4LPENSETR_t: public Reg32_t /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t LTDCLPEN         : 1;
				uint32_t                  : 3;
				uint32_t DSILPEN          : 1;
				uint32_t                  : 3;
				uint32_t DDRPERFMLPEN     : 1;
				uint32_t                  : 7;
				uint32_t USBPHYLPEN       : 1;
				uint32_t                  : 3;
				uint32_t STGENROLPEN      : 1;
				uint32_t STGENROSTPEN     : 1;
				uint32_t                  : 10;
				
			};
			#endif
			#ifdef RCC_MC_APB5LPENSETR
			struct MC_APB5LPENSETR_t: public Reg32_t /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t SPI6LPEN         : 1;
				uint32_t                  : 1;
				uint32_t I2C4LPEN         : 1;
				uint32_t I2C6LPEN         : 1;
				uint32_t USART1LPEN       : 1;
				uint32_t                  : 3;
				uint32_t RTCAPBLPEN       : 1;
				uint32_t                  : 2;
				uint32_t TZC1LPEN         : 1;
				uint32_t TZC2LPEN         : 1;
				uint32_t TZPCLPEN         : 1;
				uint32_t                  : 2;
				uint32_t BSECLPEN         : 1;
				uint32_t                  : 3;
				uint32_t STGENLPEN        : 1;
				uint32_t STGENSTPEN       : 1;
				uint32_t                  : 10;
				
			};
			#endif
			#ifdef RCC_BR_RSTSCLRR
			struct BR_RSTSCLRR_t: public Reg32_t /// This register is used by the BOOTROM to check the reset source. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a clears the corresponding bit to .The application running on MPU shall not use this register to define the reset source, the register RCC_MP_RSTSR must be used instead.Please refer to Section1.3.12: Reset Source Identification for details.This register is located into VDD domain, and is reset by por_rst reset. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t PORRSTF          : 1;
				uint32_t BORRSTF          : 1;
				uint32_t PADRSTF          : 1;
				uint32_t HCSSRSTF         : 1;
				uint32_t VCORERSTF        : 1;
				uint32_t                  : 1;
				uint32_t MPSYSRSTF        : 1;
				uint32_t MCSYSRSTF        : 1;
				uint32_t IWDG1RSTF        : 1;
				uint32_t IWDG2RSTF        : 1;
				uint32_t WWDG1RSTF        : 1;
				uint32_t                  : 21;
				
			};
			#endif
			#ifdef RCC_MP_GRSTCSETR
			struct MP_GRSTCSETR_t: public Reg32_t /// This register is used by the MPU in order to generate either a MCU reset or a system reset. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral.
			{
				using Reg32_t::operator=;
				uint32_t MPSYSRST         : 1;
				uint32_t MCURST           : 1;
				uint32_t                  : 30;
				
			};
			#endif
			#ifdef RCC_MP_RSTSR
			struct MP_RSTSR_t: public Reg32_t /// This register is used by the MPU to check the reset source. This register is updated by the BOOTROM code, after a power-on reset (por_rst), a system reset (nreset), or an exit from STANDBY or CSTANDBY.The flags can be cleared by simply writing them to . Please refer to Section1.3.12: Reset Source Identification for details.The register is located in VDD_CORE.If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t PORRSTF          : 1;
				uint32_t BORRSTF          : 1;
				uint32_t PADRSTF          : 1;
				uint32_t HCSSRSTF         : 1;
				uint32_t VCORERSTF        : 1;
				uint32_t                  : 1;
				uint32_t MPSYSRSTF        : 1;
				uint32_t MCSYSRSTF        : 1;
				uint32_t IWDG1RSTF        : 1;
				uint32_t IWDG2RSTF        : 1;
				uint32_t                  : 1;
				uint32_t STDBYRSTF        : 1;
				uint32_t CSTDBYRSTF       : 1;
				uint32_t SPARE            : 3;
				uint32_t                  : 16;
				
			};
			#endif
			#ifdef RCC_MP_IWDGFZSETR
			struct MP_IWDGFZSETR_t: public Reg32_t /// This register is used by the BOOTROM in order to freeze the IWDGs clocks. After a system reset or STANDBY reset (nreset), or a CSTANDBY reset (cstby_rst) the MPU is allowed to write it once.Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t FZ_IWDG1         : 1;
				uint32_t FZ_IWDG2         : 1;
				uint32_t                  : 30;
				
			};
			#endif
			#ifdef RCC_MxCIER
			struct MxCIER_t: public Reg32_t /// This register shall be used by the MPU to control the interrupt source enable. Please refer to Section1.5: RCC Interrupts for more details. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t LSIRDYIE         : 1;
				uint32_t LSERDYIE         : 1;
				uint32_t HSIRDYIE         : 1;
				uint32_t HSERDYIE         : 1;
				uint32_t CSIRDYIE         : 1;
				uint32_t                  : 3;
				uint32_t PLL1DYIE         : 1;
				uint32_t PLL2DYIE         : 1;
				uint32_t PLL3DYIE         : 1;
				uint32_t PLL4DYIE         : 1;
				uint32_t                  : 4;
				uint32_t LSECSSIE         : 1;
				uint32_t                  : 3;
				uint32_t WKUPIE           : 1;
				uint32_t                  : 11;
				
			};
			#endif
			#ifdef RCC_MxCIFR
			struct MxCIFR_t: public Reg32_t /// This register shall be used by the MPU in order to read and clear the interrupt flags.Writing has no effect, writing will clear the corresponding flag.Please refer to Section1.5: RCC Interrupts for more details. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t LSIRDYF          : 1;
				uint32_t LSERDYF          : 1;
				uint32_t HSIRDYF          : 1;
				uint32_t HSERDYF          : 1;
				uint32_t CSIRDYF          : 1;
				uint32_t                  : 3;
				uint32_t PLL1DYF          : 1;
				uint32_t PLL2DYF          : 1;
				uint32_t PLL3DYF          : 1;
				uint32_t PLL4DYF          : 1;
				uint32_t                  : 4;
				uint32_t LSECSSF          : 1;
				uint32_t                  : 3;
				uint32_t WKUPF            : 1;
				uint32_t                  : 11;
				
			};
			#endif
			#ifdef RCC_PWRLPDLYCR
			struct PWRLPDLYCR_t: public Reg32_t /// This register is used to program the delay between the moment where the system exits from STOP and the moment where it is allowed to enable the PLLs and provide a clock to bridges and processors. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t PWRLP_DLY        : 22;
				uint32_t                  : 2;
				uint32_t MCTMPSKP         : 1;
				uint32_t                  : 7;
				
			};
			#endif
			#ifdef RCC_MCO1CFGR
			struct MCO1CFGR_t: public Reg32_t /// This register is used to select the clock generated on MCO1 output.
			{
				using Reg32_t::operator=;
				uint32_t MCO1SEL          : 3;
				uint32_t                  : 1;
				uint32_t MCO1DIV          : 4;
				uint32_t                  : 4;
				uint32_t MCO1ON           : 1;
				uint32_t                  : 19;
				
			};
			#endif
			#ifdef RCC_MCO2CFGR
			struct MCO2CFGR_t: public Reg32_t /// This register is used to select the clock generated on MCO2 output.
			{
				using Reg32_t::operator=;
				uint32_t MCO2SEL          : 3;
				uint32_t                  : 1;
				uint32_t MCO2DIV          : 4;
				uint32_t                  : 4;
				uint32_t MCO2ON           : 1;
				uint32_t                  : 19;
				
			};
			#endif
			#ifdef RCC_OCRDYR
			struct OCRDYR_t: public Reg32_t /// This is a read-only access register, It contains the status flags of oscillators. Writing has no effect.
			{
				using Reg32_t::operator=;
				uint32_t HSIRDY           : 1;
				uint32_t                  : 1;
				uint32_t HSIDIVRDY        : 1;
				uint32_t                  : 1;
				uint32_t CSIRDY           : 1;
				uint32_t                  : 3;
				uint32_t HSERDY           : 1;
				uint32_t                  : 14;
				uint32_t MPUCKRDY         : 1;
				uint32_t AXICKRDY         : 1;
				uint32_t CKREST           : 1;
				uint32_t                  : 6;
				
			};
			#endif
			#ifdef RCC_DBGCFGR
			struct DBGCFGR_t: public Reg32_t /// This is register contains the enable control of the debug and trace function, and the clock divider for the trace function.
			{
				using Reg32_t::operator=;
				uint32_t TRACEDIV         : 3;
				uint32_t                  : 5;
				uint32_t DBGCKEN          : 1;
				uint32_t TRACECKEN        : 1;
				uint32_t                  : 2;
				uint32_t DBGRST           : 1;
				uint32_t                  : 19;
				
			};
			#endif
			#ifdef RCC_RCK3SELR
			struct RCK3SELR_t: public Reg32_t /// This register is used to select the reference clock for PLL3. If TZEN = MCKPROT = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t PLL3SRC          : 2;
				uint32_t                  : 29;
				uint32_t PLL3SRCRDY       : 1;
				
			};
			#endif
			#ifdef RCC_RCK4SELR
			struct RCK4SELR_t: public Reg32_t /// This register is used to select the reference clock for PLL4.
			{
				using Reg32_t::operator=;
				uint32_t PLL4SRC          : 2;
				uint32_t                  : 29;
				uint32_t PLL4SRCRDY       : 1;
				
			};
			#endif
			#ifdef RCC_TIMG1PRER
			struct TIMG1PRER_t: public Reg32_t /// This register is used to control the prescaler value of timers located into APB1 domain. It concerns TIM2, TIM3, TIM4, TIM5, TIM6, TIM7, TIM12, TIM13 and TIM14. Please refer to Section1.4.6.3: Sub-System Clock Generation for additional information.
			{
				using Reg32_t::operator=;
				uint32_t TIMG1PRE         : 1;
				uint32_t                  : 30;
				uint32_t TIMG1PRERDY      : 1;
				
			};
			#endif
			#ifdef RCC_TIMG2PRER
			struct TIMG2PRER_t: public Reg32_t /// This register is used to control the prescaler value of timers located into APB2 domain. It concerns TIM1, TIM8, TIM15, TIM16, and TIM17. Please refer to Section1.4.6.3: Sub-System Clock Generation for additional information.
			{
				using Reg32_t::operator=;
				uint32_t TIMG2PRE         : 1;
				uint32_t                  : 30;
				uint32_t TIMG2PRERDY      : 1;
				
			};
			#endif
			#ifdef RCC_MCUDIVR
			struct MCUDIVR_t: public Reg32_t /// This register is used to control the MCU sub-system clock prescaler. Please refer to Section1.4.6.3: Sub-System Clock Generation for additional information. If TZEN = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t MCUDIV           : 4;
				uint32_t                  : 27;
				uint32_t MCUDIVRDY        : 1;
				
			};
			#endif
			#ifdef RCC_APB1DIVR
			struct APB1DIVR_t: public Reg32_t /// This register is used to control the APB1 clock prescaler. Please refer to section Section1.4.6.3: Sub-System Clock Generation for additional information.
			{
				using Reg32_t::operator=;
				uint32_t APB1DIV          : 3;
				uint32_t                  : 28;
				uint32_t APB1DIVRDY       : 1;
				
			};
			#endif
			#ifdef RCC_APB2DIVR
			struct APB2DIVR_t: public Reg32_t /// This register is used to control the APB2 clock prescaler. Please refer to Section1.4.6.3: Sub-System Clock Generation for additional information.
			{
				using Reg32_t::operator=;
				uint32_t APB2DIV          : 3;
				uint32_t                  : 28;
				uint32_t APB2DIVRDY       : 1;
				
			};
			#endif
			#ifdef RCC_APB3DIVR
			struct APB3DIVR_t: public Reg32_t /// This register is used to control the APB3 clock prescaler. Please refer to Section1.4.6.3: Sub-System Clock Generation for additional information.
			{
				using Reg32_t::operator=;
				uint32_t APB3DIV          : 3;
				uint32_t                  : 28;
				uint32_t APB3DIVRDY       : 1;
				
			};
			#endif
			#ifdef RCC_PLL3CR
			struct PLL3CR_t: public Reg32_t /// This register is used to control the PLL3. If TZEN = MCKPROT = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t PLLON            : 1;
				uint32_t PLL3RDY          : 1;
				uint32_t SSCG_CTRL        : 1;
				uint32_t                  : 1;
				uint32_t DIVPEN           : 1;
				uint32_t DIVQEN           : 1;
				uint32_t DIVREN           : 1;
				uint32_t                  : 25;
				
			};
			#endif
			#ifdef RCC_PLL3CFGR1
			struct PLL3CFGR1_t: public Reg32_t /// This register is used to configure the PLL3. If TZEN = MCKPROT = , this register can only be modified in secure mode.
			{
				using Reg32_t::operator=;
				uint32_t DIVN             : 9;
				uint32_t                  : 7;
				uint32_t DIVM3            : 6;
				uint32_t                  : 2;
				uint32_t IFRGE            : 2;
				uint32_t                  : 6;
				
			};
			#endif
			#ifdef RCC_PLL4CR
			struct PLL4CR_t: public Reg32_t /// This register is used to control the PLL4.
			{
				using Reg32_t::operator=;
				uint32_t PLLON            : 1;
				uint32_t PLL4RDY          : 1;
				uint32_t SSCG_CTRL        : 1;
				uint32_t                  : 1;
				uint32_t DIVPEN           : 1;
				uint32_t DIVQEN           : 1;
				uint32_t DIVREN           : 1;
				uint32_t                  : 25;
				
			};
			#endif
			#ifdef RCC_PLL4CFGR1
			struct PLL4CFGR1_t: public Reg32_t /// This register is used to configure the PLL4.
			{
				using Reg32_t::operator=;
				uint32_t DIVN             : 9;
				uint32_t                  : 7;
				uint32_t DIVM4            : 6;
				uint32_t                  : 2;
				uint32_t IFRGE            : 2;
				uint32_t                  : 6;
				
			};
			#endif
			#ifdef RCC_I2C12CKSELR
			struct I2C12CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the I2C1 and I2C2. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t I2C12SRC         : 3;
				uint32_t                  : 29;
				
			};
			#endif
			#ifdef RCC_I2C35CKSELR
			struct I2C35CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the I2C3 and I2C5. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t I2C35SRC         : 3;
				uint32_t                  : 29;
				
			};
			#endif
			#ifdef RCC_SAI1CKSELR
			struct SAI1CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the SAI1 and DFSDM audio clock. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t SAI1SRC          : 3;
				uint32_t                  : 29;
				
			};
			#endif
			#ifdef RCC_SAI2CKSELR
			struct SAI2CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the SAI2. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t SAI2SRC          : 3;
				uint32_t                  : 29;
				
			};
			#endif
			#ifdef RCC_SAI3CKSELR
			struct SAI3CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the SAI3. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t SAI3SRC          : 3;
				uint32_t                  : 29;
				
			};
			#endif
			#ifdef RCC_SAI4CKSELR
			struct SAI4CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the SAI4. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t SAI4SRC          : 3;
				uint32_t                  : 29;
				
			};
			#endif
			#ifdef RCC_SPI2S1CKSELR
			struct SPI2S1CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the SPI/I2S1. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t SPI1SRC          : 3;
				uint32_t                  : 29;
				
			};
			#endif
			#ifdef RCC_SPI2S23CKSELR
			struct SPI2S23CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the SPI/I2S2,3. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t SPI23SRC         : 3;
				uint32_t                  : 29;
				
			};
			#endif
			#ifdef RCC_SPI45CKSELR
			struct SPI45CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the SPI4,5. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t SPI45SRC         : 3;
				uint32_t                  : 29;
				
			};
			#endif
			#ifdef RCC_UART6CKSELR
			struct UART6CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the USART6. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t UART6SRC         : 3;
				uint32_t                  : 29;
				
			};
			#endif
			#ifdef RCC_UART24CKSELR
			struct UART24CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the USART2 and UART4. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t UART24SRC        : 3;
				uint32_t                  : 29;
				
			};
			#endif
			#ifdef RCC_UART35CKSELR
			struct UART35CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the USART3 and UART5. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t UART35SRC        : 3;
				uint32_t                  : 29;
				
			};
			#endif
			#ifdef RCC_UART78CKSELR
			struct UART78CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the UART7 and UART8. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t UART78SRC        : 3;
				uint32_t                  : 29;
				
			};
			#endif
			#ifdef RCC_SDMMC12CKSELR
			struct SDMMC12CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the SDMMC1 and SDMMC2. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t SDMMC12SRC       : 3;
				uint32_t                  : 29;
				
			};
			#endif
			#ifdef RCC_SDMMC3CKSELR
			struct SDMMC3CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the SDMMC3. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t SDMMC3SRC        : 3;
				uint32_t                  : 29;
				
			};
			#endif
			#ifdef RCC_ETHCKSELR
			struct ETHCKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the ETH block. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t ETHSRC           : 2;
				uint32_t                  : 2;
				uint32_t ETHPTPDIV        : 4;
				uint32_t                  : 24;
				
			};
			#endif
			#ifdef RCC_QSPICKSELR
			struct QSPICKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the QUADSPI. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t QSPISRC          : 2;
				uint32_t                  : 30;
				
			};
			#endif
			#ifdef RCC_FMCCKSELR
			struct FMCCKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the FMC block. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t FMCSRC           : 2;
				uint32_t                  : 30;
				
			};
			#endif
			#ifdef RCC_FDCANCKSELR
			struct FDCANCKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the FDCAN block. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t FDCANSRC         : 2;
				uint32_t                  : 30;
				
			};
			#endif
			#ifdef RCC_SPDIFCKSELR
			struct SPDIFCKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the SPDIFRX. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t SPDIFSRC         : 2;
				uint32_t                  : 30;
				
			};
			#endif
			#ifdef RCC_CECCKSELR
			struct CECCKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the CEC-HDMI. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t CECSRC           : 2;
				uint32_t                  : 30;
				
			};
			#endif
			#ifdef RCC_USBCKSELR
			struct USBCKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the USBPHY PLL of the USB HOST and USB OTG. It also controls the pre-divider for the reference clock for the USBPHY. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t USBPHYSRC        : 2;
				uint32_t                  : 2;
				uint32_t USBOSRC          : 1;
				uint32_t                  : 27;
				
			};
			#endif
			#ifdef RCC_RNG2CKSELR
			struct RNG2CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the RNG2. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time.
			{
				using Reg32_t::operator=;
				uint32_t RNG2SRC          : 2;
				uint32_t                  : 30;
				
			};
			#endif
			#ifdef RCC_DSICKSELR
			struct DSICKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the DSI block. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t DSISRC           : 1;
				uint32_t                  : 31;
				
			};
			#endif
			#ifdef RCC_ADCCKSELR
			struct ADCCKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the ADC block. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t ADCSRC           : 2;
				uint32_t                  : 30;
				
			};
			#endif
			#ifdef RCC_LPTIM45CKSELR
			struct LPTIM45CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the LPTIM4 and LPTIM5 blocks. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t LPTIM45SRC       : 3;
				uint32_t                  : 29;
				
			};
			#endif
			#ifdef RCC_LPTIM23CKSELR
			struct LPTIM23CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the LPTIM2 and LPTIM3 blocks. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t LPTIM23SRC       : 3;
				uint32_t                  : 29;
				
			};
			#endif
			#ifdef RCC_LPTIM1CKSELR
			struct LPTIM1CKSELR_t: public Reg32_t /// This register is used to control the selection of the kernel clock for the LPTIM1 block. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
			{
				using Reg32_t::operator=;
				uint32_t LPTIM1SRC        : 3;
				uint32_t                  : 29;
				
			};
			#endif
			#ifdef RCC_APB1RSTSETR
			struct APB1RSTSETR_t: public Reg32_t /// This register is used to activate the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral.
			{
				using Reg32_t::operator=;
				uint32_t TIM2RST          : 1;
				uint32_t TIM3RST          : 1;
				uint32_t TIM4RST          : 1;
				uint32_t TIM5RST          : 1;
				uint32_t TIM6RST          : 1;
				uint32_t TIM7RST          : 1;
				uint32_t TIM12RST         : 1;
				uint32_t TIM13RST         : 1;
				uint32_t TIM14RST         : 1;
				uint32_t LPTIM1RST        : 1;
				uint32_t                  : 1;
				uint32_t SPI2RST          : 1;
				uint32_t SPI3RST          : 1;
				uint32_t                  : 1;
				uint32_t USART2RST        : 1;
				uint32_t USART3RST        : 1;
				uint32_t UART4RST         : 1;
				uint32_t UART5RST         : 1;
				uint32_t UART7RST         : 1;
				uint32_t UART8RST         : 1;
				uint32_t                  : 1;
				uint32_t I2C1RST          : 1;
				uint32_t I2C2RST          : 1;
				uint32_t I2C3RST          : 1;
				uint32_t I2C5RST          : 1;
				uint32_t                  : 1;
				uint32_t SPDIFRST         : 1;
				uint32_t CECRST           : 1;
				uint32_t                  : 1;
				uint32_t DAC12RST         : 1;
				uint32_t                  : 1;
				uint32_t MDIOSRST         : 1;
				
			};
			#endif
			#ifdef RCC_APB2RSTSETR
			struct APB2RSTSETR_t: public Reg32_t /// This register is used to activate the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral.
			{
				using Reg32_t::operator=;
				uint32_t TIM1RST          : 1;
				uint32_t TIM8RST          : 1;
				uint32_t TIM15RST         : 1;
				uint32_t TIM16RST         : 1;
				uint32_t TIM17RST         : 1;
				uint32_t                  : 3;
				uint32_t SPI1RST          : 1;
				uint32_t SPI4RST          : 1;
				uint32_t SPI5RST          : 1;
				uint32_t                  : 2;
				uint32_t USART6RST        : 1;
				uint32_t                  : 2;
				uint32_t SAI1RST          : 1;
				uint32_t SAI2RST          : 1;
				uint32_t SAI3RST          : 1;
				uint32_t                  : 1;
				uint32_t DFSDMRST         : 1;
				uint32_t                  : 3;
				uint32_t FDCANRST         : 1;
				uint32_t                  : 7;
				
			};
			#endif
			#ifdef RCC_APB3RSTSETR
			struct APB3RSTSETR_t: public Reg32_t /// This register is used to activate the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral.
			{
				using Reg32_t::operator=;
				uint32_t LPTIM2RST        : 1;
				uint32_t LPTIM3RST        : 1;
				uint32_t LPTIM4RST        : 1;
				uint32_t LPTIM5RST        : 1;
				uint32_t                  : 4;
				uint32_t SAI4RST          : 1;
				uint32_t                  : 2;
				uint32_t SYSCFGRST        : 1;
				uint32_t                  : 1;
				uint32_t VREFRST          : 1;
				uint32_t                  : 2;
				uint32_t TMPSENSRST       : 1;
				uint32_t PMBCTRLRST       : 1;
				uint32_t                  : 14;
				
			};
			#endif
			#ifdef RCC_AHB2RSTSETR
			struct AHB2RSTSETR_t: public Reg32_t /// This register is used to activate the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral.
			{
				using Reg32_t::operator=;
				uint32_t DMA1RST          : 1;
				uint32_t DMA2RST          : 1;
				uint32_t DMAMUXRST        : 1;
				uint32_t                  : 2;
				uint32_t ADC12RST         : 1;
				uint32_t                  : 2;
				uint32_t USBORST          : 1;
				uint32_t                  : 7;
				uint32_t SDMMC3RST        : 1;
				uint32_t                  : 15;
				
			};
			#endif
			#ifdef RCC_AHB3RSTSETR
			struct AHB3RSTSETR_t: public Reg32_t /// This register is used to activate the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral.
			{
				using Reg32_t::operator=;
				uint32_t DCMIRST          : 1;
				uint32_t                  : 3;
				uint32_t CRYP2RST         : 1;
				uint32_t HASH2RST         : 1;
				uint32_t RNG2RST          : 1;
				uint32_t CRC2RST          : 1;
				uint32_t                  : 3;
				uint32_t HSEMRST          : 1;
				uint32_t IPCCRST          : 1;
				uint32_t                  : 19;
				
			};
			#endif
			#ifdef RCC_AHB4RSTSETR
			struct AHB4RSTSETR_t: public Reg32_t /// This register is used to activate the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral.
			{
				using Reg32_t::operator=;
				uint32_t GPIOARST         : 1;
				uint32_t GPIOBRST         : 1;
				uint32_t GPIOCRST         : 1;
				uint32_t GPIODRST         : 1;
				uint32_t GPIOERST         : 1;
				uint32_t GPIOFRST         : 1;
				uint32_t GPIOGRST         : 1;
				uint32_t GPIOHRST         : 1;
				uint32_t GPIOIRST         : 1;
				uint32_t GPIOJRST         : 1;
				uint32_t GPIOKRST         : 1;
				uint32_t                  : 21;
				
			};
			#endif
			#ifdef RCC_MP_APB1ENSETR
			struct MP_APB1ENSETR_t: public Reg32_t /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MPU. Writing has no effect, reading will return the effective value of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t TIM2EN           : 1;
				uint32_t TIM3EN           : 1;
				uint32_t TIM4EN           : 1;
				uint32_t TIM5EN           : 1;
				uint32_t TIM6EN           : 1;
				uint32_t TIM7EN           : 1;
				uint32_t TIM12EN          : 1;
				uint32_t TIM13EN          : 1;
				uint32_t TIM14EN          : 1;
				uint32_t LPTIM1EN         : 1;
				uint32_t                  : 1;
				uint32_t SPI2EN           : 1;
				uint32_t SPI3EN           : 1;
				uint32_t                  : 1;
				uint32_t USART2EN         : 1;
				uint32_t USART3EN         : 1;
				uint32_t UART4EN          : 1;
				uint32_t UART5EN          : 1;
				uint32_t UART7EN          : 1;
				uint32_t UART8EN          : 1;
				uint32_t                  : 1;
				uint32_t I2C1EN           : 1;
				uint32_t I2C2EN           : 1;
				uint32_t I2C3EN           : 1;
				uint32_t I2C5EN           : 1;
				uint32_t                  : 1;
				uint32_t SPDIFEN          : 1;
				uint32_t CECEN            : 1;
				uint32_t                  : 1;
				uint32_t DAC12EN          : 1;
				uint32_t                  : 1;
				uint32_t MDIOSEN          : 1;
				
			};
			#endif
			#ifdef RCC_APB2ENSETR
			struct APB2ENSETR_t: public Reg32_t /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t TIM1EN           : 1;
				uint32_t TIM8EN           : 1;
				uint32_t TIM15EN          : 1;
				uint32_t TIM16EN          : 1;
				uint32_t TIM17EN          : 1;
				uint32_t                  : 3;
				uint32_t SPI1EN           : 1;
				uint32_t SPI4EN           : 1;
				uint32_t SPI5EN           : 1;
				uint32_t                  : 2;
				uint32_t USART6EN         : 1;
				uint32_t                  : 2;
				uint32_t SAI1EN           : 1;
				uint32_t SAI2EN           : 1;
				uint32_t SAI3EN           : 1;
				uint32_t                  : 1;
				uint32_t DFSDMEN          : 1;
				uint32_t ADFSDMEN         : 1;
				uint32_t                  : 2;
				uint32_t FDCANEN          : 1;
				uint32_t                  : 7;
				
			};
			#endif
			#ifdef RCC_APB3ENSETR
			struct APB3ENSETR_t: public Reg32_t /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t LPTIM2EN         : 1;
				uint32_t LPTIM3EN         : 1;
				uint32_t LPTIM4EN         : 1;
				uint32_t LPTIM5EN         : 1;
				uint32_t                  : 4;
				uint32_t SAI4EN           : 1;
				uint32_t                  : 2;
				uint32_t SYSCFGEN         : 1;
				uint32_t                  : 1;
				uint32_t VREFEN           : 1;
				uint32_t                  : 2;
				uint32_t TMPSENSEN        : 1;
				uint32_t PMBCTRLEN        : 1;
				uint32_t                  : 2;
				uint32_t HDPEN            : 1;
				uint32_t                  : 11;
				
			};
			#endif
			#ifdef RCC_AHB2ENSETR
			struct AHB2ENSETR_t: public Reg32_t /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t DMA1EN           : 1;
				uint32_t DMA2EN           : 1;
				uint32_t DMAMUXEN         : 1;
				uint32_t                  : 2;
				uint32_t ADC12EN          : 1;
				uint32_t                  : 2;
				uint32_t USBOEN           : 1;
				uint32_t                  : 7;
				uint32_t SDMMC3EN         : 1;
				uint32_t                  : 15;
				
			};
			#endif
			#ifdef RCC_AHB3ENSETR
			struct AHB3ENSETR_t: public Reg32_t /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t DCMIEN           : 1;
				uint32_t                  : 3;
				uint32_t CRYP2EN          : 1;
				uint32_t HASH2EN          : 1;
				uint32_t RNG2EN           : 1;
				uint32_t CRC2EN           : 1;
				uint32_t                  : 3;
				uint32_t HSEMEN           : 1;
				uint32_t IPCCEN           : 1;
				uint32_t                  : 19;
				
			};
			#endif
			#ifdef RCC_AHB4ENSETR
			struct AHB4ENSETR_t: public Reg32_t /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t GPIOAEN          : 1;
				uint32_t GPIOBEN          : 1;
				uint32_t GPIOCEN          : 1;
				uint32_t GPIODEN          : 1;
				uint32_t GPIOEEN          : 1;
				uint32_t GPIOFEN          : 1;
				uint32_t GPIOGEN          : 1;
				uint32_t GPIOHEN          : 1;
				uint32_t GPIOIEN          : 1;
				uint32_t GPIOJEN          : 1;
				uint32_t GPIOKEN          : 1;
				uint32_t                  : 21;
				
			};
			#endif
			#ifdef RCC_MxMLAHBENSETR
			struct MxMLAHBENSETR_t: public Reg32_t /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MPU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t                  : 4;
				uint32_t RETRAMEN         : 1;
				uint32_t                  : 27;
				
			};
			#endif
			#ifdef RCC_MC_APB1ENSETR
			struct MC_APB1ENSETR_t: public Reg32_t /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return . Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t TIM2EN           : 1;
				uint32_t TIM3EN           : 1;
				uint32_t TIM4EN           : 1;
				uint32_t TIM5EN           : 1;
				uint32_t TIM6EN           : 1;
				uint32_t TIM7EN           : 1;
				uint32_t TIM12EN          : 1;
				uint32_t TIM13EN          : 1;
				uint32_t TIM14EN          : 1;
				uint32_t LPTIM1EN         : 1;
				uint32_t                  : 1;
				uint32_t SPI2EN           : 1;
				uint32_t SPI3EN           : 1;
				uint32_t                  : 1;
				uint32_t USART2EN         : 1;
				uint32_t USART3EN         : 1;
				uint32_t UART4EN          : 1;
				uint32_t UART5EN          : 1;
				uint32_t UART7EN          : 1;
				uint32_t UART8EN          : 1;
				uint32_t                  : 1;
				uint32_t I2C1EN           : 1;
				uint32_t I2C2EN           : 1;
				uint32_t I2C3EN           : 1;
				uint32_t I2C5EN           : 1;
				uint32_t                  : 1;
				uint32_t SPDIFEN          : 1;
				uint32_t CECEN            : 1;
				uint32_t WWDG1EN          : 1;
				uint32_t DAC12EN          : 1;
				uint32_t                  : 1;
				uint32_t MDIOSEN          : 1;
				
			};
			#endif
			#ifdef RCC_MC_AXIMENSETR
			struct MC_AXIMENSETR_t: public Reg32_t /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t SYSRAMEN         : 1;
				uint32_t                  : 31;
				
			};
			#endif
			#ifdef RCC_MP_APB1LPENSETR
			struct MP_APB1LPENSETR_t: public Reg32_t /// This register is used by the MPU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t TIM2LPEN         : 1;
				uint32_t TIM3LPEN         : 1;
				uint32_t TIM4LPEN         : 1;
				uint32_t TIM5LPEN         : 1;
				uint32_t TIM6LPEN         : 1;
				uint32_t TIM7LPEN         : 1;
				uint32_t TIM12LPEN        : 1;
				uint32_t TIM13LPEN        : 1;
				uint32_t TIM14LPEN        : 1;
				uint32_t LPTIM1LPEN       : 1;
				uint32_t                  : 1;
				uint32_t SPI2LPEN         : 1;
				uint32_t SPI3LPEN         : 1;
				uint32_t                  : 1;
				uint32_t USART2LPEN       : 1;
				uint32_t USART3LPEN       : 1;
				uint32_t UART4LPEN        : 1;
				uint32_t UART5LPEN        : 1;
				uint32_t UART7LPEN        : 1;
				uint32_t UART8LPEN        : 1;
				uint32_t                  : 1;
				uint32_t I2C1LPEN         : 1;
				uint32_t I2C2LPEN         : 1;
				uint32_t I2C3LPEN         : 1;
				uint32_t I2C5LPEN         : 1;
				uint32_t                  : 1;
				uint32_t SPDIFLPEN        : 1;
				uint32_t CECLPEN          : 1;
				uint32_t                  : 1;
				uint32_t DAC12LPEN        : 1;
				uint32_t                  : 1;
				uint32_t MDIOSLPEN        : 1;
				
			};
			#endif
			#ifdef RCC_APB2LPENSETR
			struct APB2LPENSETR_t: public Reg32_t /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t TIM1LPEN         : 1;
				uint32_t TIM8LPEN         : 1;
				uint32_t TIM15LPEN        : 1;
				uint32_t TIM16LPEN        : 1;
				uint32_t TIM17LPEN        : 1;
				uint32_t                  : 3;
				uint32_t SPI1LPEN         : 1;
				uint32_t SPI4LPEN         : 1;
				uint32_t SPI5LPEN         : 1;
				uint32_t                  : 2;
				uint32_t USART6LPEN       : 1;
				uint32_t                  : 2;
				uint32_t SAI1LPEN         : 1;
				uint32_t SAI2LPEN         : 1;
				uint32_t SAI3LPEN         : 1;
				uint32_t                  : 1;
				uint32_t DFSDMLPEN        : 1;
				uint32_t ADFSDMLPEN       : 1;
				uint32_t                  : 2;
				uint32_t FDCANLPEN        : 1;
				uint32_t                  : 7;
				
			};
			#endif
			#ifdef RCC_APB3LPENSETR
			struct APB3LPENSETR_t: public Reg32_t /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t LPTIM2LPEN       : 1;
				uint32_t LPTIM3LPEN       : 1;
				uint32_t LPTIM4LPEN       : 1;
				uint32_t LPTIM5LPEN       : 1;
				uint32_t                  : 4;
				uint32_t SAI4LPEN         : 1;
				uint32_t                  : 2;
				uint32_t SYSCFGLPEN       : 1;
				uint32_t                  : 1;
				uint32_t VREFLPEN         : 1;
				uint32_t                  : 2;
				uint32_t TMPSENSLPEN      : 1;
				uint32_t PMBCTRLLPEN      : 1;
				uint32_t                  : 14;
				
			};
			#endif
			#ifdef RCC_AHB2LPENSETR
			struct AHB2LPENSETR_t: public Reg32_t /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t DMA1LPEN         : 1;
				uint32_t DMA2LPEN         : 1;
				uint32_t DMAMUXLPEN       : 1;
				uint32_t                  : 2;
				uint32_t ADC12LPEN        : 1;
				uint32_t                  : 2;
				uint32_t USBOLPEN         : 1;
				uint32_t                  : 7;
				uint32_t SDMMC3LPEN       : 1;
				uint32_t                  : 15;
				
			};
			#endif
			#ifdef RCC_AHB3LPENSETR
			struct AHB3LPENSETR_t: public Reg32_t /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t DCMILPEN         : 1;
				uint32_t                  : 3;
				uint32_t CRYP2LPEN        : 1;
				uint32_t HASH2LPEN        : 1;
				uint32_t RNG2LPEN         : 1;
				uint32_t CRC2LPEN         : 1;
				uint32_t                  : 3;
				uint32_t HSEMLPEN         : 1;
				uint32_t IPCCLPEN         : 1;
				uint32_t                  : 19;
				
			};
			#endif
			#ifdef RCC_AHB4LPENSETR
			struct AHB4LPENSETR_t: public Reg32_t /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t GPIOALPEN        : 1;
				uint32_t GPIOBLPEN        : 1;
				uint32_t GPIOCLPEN        : 1;
				uint32_t GPIODLPEN        : 1;
				uint32_t GPIOELPEN        : 1;
				uint32_t GPIOFLPEN        : 1;
				uint32_t GPIOGLPEN        : 1;
				uint32_t GPIOHLPEN        : 1;
				uint32_t GPIOILPEN        : 1;
				uint32_t GPIOJLPEN        : 1;
				uint32_t GPIOKLPEN        : 1;
				uint32_t                  : 21;
				
			};
			#endif
			#ifdef RCC_MxAXIMLPENSETR
			struct MxAXIMLPENSETR_t: public Reg32_t /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t SYSRAMLPEN       : 1;
				uint32_t                  : 31;
				
			};
			#endif
			#ifdef RCC_MxMLAHBLPENSETR
			struct MxMLAHBLPENSETR_t: public Reg32_t /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t SRAM1LPEN        : 1;
				uint32_t SRAM2LPEN        : 1;
				uint32_t SRAM3LPEN        : 1;
				uint32_t                  : 1;
				uint32_t RETRAMLPEN       : 1;
				uint32_t                  : 27;
				
			};
			#endif
			#ifdef RCC_MC_APB1LPENSETR
			struct MC_APB1LPENSETR_t: public Reg32_t /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
			{
				using Reg32_t::operator=;
				uint32_t TIM2LPEN         : 1;
				uint32_t TIM3LPEN         : 1;
				uint32_t TIM4LPEN         : 1;
				uint32_t TIM5LPEN         : 1;
				uint32_t TIM6LPEN         : 1;
				uint32_t TIM7LPEN         : 1;
				uint32_t TIM12LPEN        : 1;
				uint32_t TIM13LPEN        : 1;
				uint32_t TIM14LPEN        : 1;
				uint32_t LPTIM1LPEN       : 1;
				uint32_t                  : 1;
				uint32_t SPI2LPEN         : 1;
				uint32_t SPI3LPEN         : 1;
				uint32_t                  : 1;
				uint32_t USART2LPEN       : 1;
				uint32_t USART3LPEN       : 1;
				uint32_t UART4LPEN        : 1;
				uint32_t UART5LPEN        : 1;
				uint32_t UART7LPEN        : 1;
				uint32_t UART8LPEN        : 1;
				uint32_t                  : 1;
				uint32_t I2C1LPEN         : 1;
				uint32_t I2C2LPEN         : 1;
				uint32_t I2C3LPEN         : 1;
				uint32_t I2C5LPEN         : 1;
				uint32_t                  : 1;
				uint32_t SPDIFLPEN        : 1;
				uint32_t CECLPEN          : 1;
				uint32_t WWDG1LPEN        : 1;
				uint32_t DAC12LPEN        : 1;
				uint32_t                  : 1;
				uint32_t MDIOSLPEN        : 1;
				
			};
			#endif
			#ifdef RCC_MC_RSTSCLRR
			struct MC_RSTSCLRR_t: public Reg32_t /// This register is used by the MCU to check the reset source. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a clears the corresponding bit to .Please refer to Section1.3.12: Reset Source Identification for details.This register is located into VDD domain, and is reset by por_rst reset.
			{
				using Reg32_t::operator=;
				uint32_t PORRSTF          : 1;
				uint32_t BORRSTF          : 1;
				uint32_t PADRSTF          : 1;
				uint32_t HCSSRSTF         : 1;
				uint32_t VCORERSTF        : 1;
				uint32_t MCURSTF          : 1;
				uint32_t MPSYSRSTF        : 1;
				uint32_t MCSYSRSTF        : 1;
				uint32_t IWDG1RSTF        : 1;
				uint32_t IWDG2RSTF        : 1;
				uint32_t WWDG1RSTF        : 1;
				uint32_t                  : 21;
				
			};
			#endif
			#ifdef RCC_VERR
			struct VERR_t: public Reg32_t /// This register gives the IP version
			{
				using Reg32_t::operator=;
				uint32_t MINREV           : 4;
				uint32_t MAJREV           : 4;
				uint32_t                  : 24;
				
			};
			#endif
			#ifdef RCC_IDR
			struct IDR_t: public Reg32_t /// This register gives the unique identifier of the RCC
			{
				using Reg32_t::operator=;
				uint32_t ID               : 32;
				
			};
			#endif
			#ifdef RCC_SIDR
			struct SIDR_t: public Reg32_t /// This register gives the decoding space, which is for the RCC of 4 kB.
			{
				using Reg32_t::operator=;
				uint32_t SID              : 32;
				
			};
			#endif
			#ifdef RCC_CR
			struct CR_t: public Reg32_t /// clock control register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t RCC_CR_0_HSION   : 1; /// Internal high-speed clock enable
						uint32_t RCC_CR_0_HSIKERON : 1; /// High Speed Internal clock enable in Stop mode
						uint32_t RCC_CR_0_HSIRDY  : 1; /// HSI clock ready flag
						uint32_t RCC_CR_0_HSIDIV  : 2; /// HSI clock divider
						uint32_t RCC_CR_0_HSIDIVF : 1; /// HSI divider flag
						uint32_t                  : 1;
						uint32_t RCC_CR_0_CSION   : 1; /// CSI clock enable
						uint32_t RCC_CR_0_CSIRDY  : 1; /// CSI clock ready flag
						uint32_t RCC_CR_0_CSIKERON : 1; /// CSI clock enable in Stop mode
						uint32_t                  : 1;
						uint32_t RCC_CR_0_HSIASFS : 1; /// HSI automatic start from Stop
						uint32_t RCC_CR_0_RC48ON  : 1; /// RC48 clock enable
						uint32_t RCC_CR_0_RC48RDY : 1; /// RC48 clock ready flag
						uint32_t RCC_CR_0_D1CKRDY : 1; /// D1 domain clocks ready flag
						uint32_t RCC_CR_0_D2CKRDY : 1; /// D2 domain clocks ready flag
						uint32_t HSEON            : 1; /// HSE clock enable
						uint32_t HSERDY           : 1; /// HSE clock ready flag
						uint32_t HSEBYP           : 1; /// HSE clock bypass
						uint32_t RCC_CR_0_HSECSSON : 1; /// HSE Clock Security System enable
						uint32_t RCC_CR_0_HSEPRE  : 1; /// HSE sysclk and PLL M divider prescaler
						uint32_t                  : 3;
						uint32_t RCC_CR_0_PLL1ON  : 1; /// PLL1 enable
						uint32_t RCC_CR_0_PLL1RDY : 1; /// PLL1 clock ready flag
						uint32_t RCC_CR_0_PLL2ON  : 1; /// PLL2 enable
						uint32_t RCC_CR_0_PLL2RDY : 1; /// PLL2 clock ready flag
						uint32_t RCC_CR_0_PLL3ON  : 1; /// PLL3 enable
						uint32_t RCC_CR_0_PLL3RDY : 1; /// PLL3 clock ready flag
						uint32_t RCC_CR_0_RTCPRE1 : 1; /// TC/LCD prescaler
						uint32_t                  : 1;
					};
					#ifdef RCC_CR_1
					struct
					{
						uint32_t RCC_CR_1_MSION   : 1; /// MSI clock enable
						uint32_t RCC_CR_1_MSIRDY  : 1; /// MSI clock ready flag
						uint32_t RCC_CR_1_MSIPLLEN : 1; /// MSI clock PLL enable
						uint32_t RCC_CR_1_MSIRGSEL : 1; /// MSI clock range selection
						uint32_t RCC_CR_1_MSIRANGE : 4; /// MSI clock ranges
						uint32_t RCC_CR_1_HSION   : 1; /// HSI clock enable
						uint32_t RCC_CR_1_HSIKERON : 1; /// HSI always enable for peripheral kernels
						uint32_t RCC_CR_1_HSIRDY  : 1; /// HSI clock ready flag
						uint32_t                  : 1;
						uint32_t RCC_CR_1_HSIKERDY : 1; /// HSI kernel clock ready flag for peripherals requests
						uint32_t                  : 6;
						uint32_t RCC_CR_1_CSSON   : 1; /// Clock security system enable
						uint32_t RCC_CR_1_RTCPRE  : 2; /// TC/LCD prescaler
						uint32_t                  : 2;
						uint32_t RCC_CR_1_PLLON   : 1; /// Main PLL enable
						uint32_t RCC_CR_1_PLLRDY  : 1; /// Main PLL clock ready flag
						uint32_t RCC_CR_1_PLLSAI1ON : 1; /// SAI1 PLL enable
						uint32_t RCC_CR_1_PLLSAI1RDY : 1; /// SAI1 PLL clock ready flag
						uint32_t RCC_CR_1_PLLSAI2ON : 1; /// SAI2 PLL enable
						uint32_t RCC_CR_1_PLLSAI2RDY : 1; /// SAI2 PLL clock ready flag
						uint32_t                  : 2;
					};
					#endif
					#ifdef RCC_CR_2
					struct
					{
						uint32_t RCC_CR_2_HSI16ON : 1; /// 16 MHz high-speed internal clock enable
						uint32_t RCC_CR_2_HSIRDY  : 1; /// Internal high-speed clock ready flag
						uint32_t RCC_CR_2_HSI16RDYF : 1; /// Internal high-speed clock ready flag
						uint32_t RCC_CR_2_HSITRIM : 5; /// Internal high-speed clock trimming
						uint32_t RCC_CR_2_HSICAL  : 8; /// Internal high-speed clock calibration
						uint32_t                  : 3;
						uint32_t RCC_CR_2_CSSLSEON : 1; /// Clock security system on HSE enable bit
						uint32_t                  : 4;
						uint32_t RCC_CR_2_PLLSYSON : 1; /// Main PLL enable
						uint32_t RCC_CR_2_PLLSYSRDY : 1; /// Main PLL clock ready flag
						uint32_t RCC_CR_2_PLLI2SON : 1; /// PLLI2S enable
						uint32_t RCC_CR_2_PLLI2SRDY : 1; /// PLLI2S clock ready flag
						uint32_t RCC_CR_2_PLLSAION : 1; /// PLLSAI enable
						uint32_t RCC_CR_2_PLLSAIRDY : 1; /// PLLSAI clock ready flag
						uint32_t                  : 2;
					};
					#endif
					#ifdef RCC_CR_3
					struct
					{
						uint32_t                  : 1;
						uint32_t RCC_CR_3_HSI16KERON : 1; /// High-speed internal clock enable bit for some IP kernels
						uint32_t                  : 1;
						uint32_t RCC_CR_3_HSI16DIVEN : 1;
						uint32_t RCC_CR_3_HSI16DIVF : 1;
						uint32_t RCC_CR_3_HSI16OUTEN : 1; /// 16 MHz high-speed internal clock output enable
						uint32_t                  : 2;
						uint32_t RCC_CR_3_MSION   : 1; /// MSI clock enable bit
						uint32_t RCC_CR_3_MSIRDY  : 1; /// MSI clock ready flag
						uint32_t                  : 1;
						uint32_t RCC_CR_3_HSIDIV  : 3; /// HSI16 clock division factor
						uint32_t                  : 14;
						uint32_t RCC_CR_3_CSSON   : 1; /// Clock security system enable
						uint32_t RCC_CR_3_RTCPRE0 : 1;
						uint32_t                  : 2;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_CRRCR
			struct CRRCR_t: public Reg32_t /// RCC Clock Recovery RC Register
			{
				using Reg32_t::operator=;
				union
				{
					#ifdef RCC_CRRCR_0
					struct
					{
						uint32_t HSI48CAL         : 10; /// Internal RC 48 MHz clock calibration
						uint32_t                  : 22;
					};
					#endif
					#ifdef RCC_CRRCR_1
					struct
					{
						uint32_t RC48CAL          : 10; /// Internal RC 48 MHz clock calibration
						uint32_t                  : 22;
					};
					#endif
					#ifdef RCC_CRRCR_2
					struct
					{
						uint32_t HSI48ON          : 1; /// HSI48 clock enable
						uint32_t HSI48RDY         : 1; /// HSI48 clock ready flag
						uint32_t                  : 5;
						uint32_t RCC_CRRCR_2_HSI48CAL : 9; /// HSI48 clock calibration
						uint32_t                  : 16;
					};
					#endif
					#ifdef RCC_CRRCR_3
					struct
					{
						uint32_t RC48ON           : 1; /// HSI48 clock enable
						uint32_t RC48RDY          : 1; /// HSI48 clock ready flag
						uint32_t                  : 5;
						uint32_t RC48CAL          : 9; /// HSI48 clock calibration
						uint32_t                  : 16;
					};
					#endif
					#ifdef RCC_CRRCR_4
					struct
					{
						uint32_t                  : 8;
						uint32_t HSI48CAL         : 8; /// 48 MHz HSI clock calibration
						uint32_t                  : 16;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_CFGR
			struct CFGR_t: public Reg32_t /// RCC Clock Configuration Register
			{
				using Reg32_t::operator=;
				union
				{
					#ifdef RCC_CFGR_0
					struct
					{
						uint32_t RCC_CFGR_0_SW    : 3; /// System clock switch
						uint32_t RCC_CFGR_0_SWS   : 3; /// System clock switch status
						uint32_t RCC_CFGR_0_STOPWUCK : 1; /// System clock selection after a wake up from system Stop
						uint32_t RCC_CFGR_0_STOPKERWUCK : 1; /// Kernel clock selection after a wake up from system Stop
						uint32_t RCC_CFGR_0_RTCPRE : 6; /// HSE division factor for RTC clock
						uint32_t RCC_CFGR_0_HRTIMSEL : 1; /// High Resolution Timer clock prescaler selection
						uint32_t RCC_CFGR_0_TIMPRE : 1; /// Timers clocks prescaler selection
						uint32_t RCC_CFGR_0_RTCPRE0 : 1; /// HSE division factor for RTC clock
						uint32_t RCC_CFGR_0_RTCPRE1 : 1; /// HSE division factor for RTC clock
						uint32_t RCC_CFGR_0_MCO1PRE : 4; /// MCO1 prescaler
						uint32_t RCC_CFGR_0_MCO1SEL : 3; /// Micro-controller clock output 1
						uint32_t RCC_CFGR_0_MCO2PRE : 4; /// MCO2 prescaler
						uint32_t RCC_CFGR_0_MCO2SEL : 3; /// Micro-controller clock output 2
					};
					#endif
					#ifdef RCC_CFGR_1
					struct
					{
						uint32_t RCC_CFGR_1_SW    : 2; /// System clock switch
						uint32_t RCC_CFGR_1_SWS   : 2; /// System clock switch status
						uint32_t RCC_CFGR_1_HPRE  : 4; /// AHB prescaler
						uint32_t RCC_CFGR_1_PPRE1 : 3; /// PB low-speed prescaler (APB1)
						uint32_t RCC_CFGR_1_PPRE2 : 3; /// APB high-speed prescaler (APB2)
						uint32_t RCC_CFGR_1_PPRE21 : 1; /// APB high-speed prescaler (APB2)
						uint32_t RCC_CFGR_1_STOPWUCK : 1; /// Wakeup from Stop and CSS backup clock selection
						uint32_t RCC_CFGR_1_RTCPRE : 5; /// HSE division factor for RTC clock
						uint32_t RCC_CFGR_1_MCO1  : 2; /// Microcontroller clock output 1
						uint32_t RCC_CFGR_1_I2SSRC : 1; /// I2S clock selection
						uint32_t RCC_CFGR_1_MCOSEL : 3; /// Microcontroller clock output
						uint32_t RCC_CFGR_1_MCO2PRE0 : 1; /// MCO2 prescaler
						uint32_t RCC_CFGR_1_MCOPRE : 3; /// Microcontroller clock output prescaler
						uint32_t RCC_CFGR_1_MCO21 : 1; /// Microcontroller clock output 2
					};
					#endif
					#ifdef RCC_CFGR_2
					struct
					{
						uint32_t RCC_CFGR_2_SW0   : 1; /// System clock switch
						uint32_t RCC_CFGR_2_SW1   : 1; /// System clock switch
						uint32_t RCC_CFGR_2_SWS0  : 1; /// System clock switch status
						uint32_t RCC_CFGR_2_SWS1  : 1; /// System clock switch status
						uint32_t RCC_CFGR_2_HPRE0 : 1; /// AHB prescaler
						uint32_t RCC_CFGR_2_HPRE1 : 1; /// AHB prescaler
						uint32_t RCC_CFGR_2_HPRE2 : 1; /// AHB prescaler
						uint32_t RCC_CFGR_2_HPRE3 : 1; /// AHB prescaler
						uint32_t RCC_CFGR_2_MCO1EN : 1; /// MCO output enable
						uint32_t RCC_CFGR_2_MCO2EN : 1; /// MCO output enable
						uint32_t RCC_CFGR_2_PPRE1 : 3; /// APB Low speed prescaler (APB1)
						uint32_t RCC_CFGR_2_PPRE2 : 3; /// APB high-speed prescaler (APB2)
						uint32_t RCC_CFGR_2_HPREF : 1; /// AHB prescaler flag
						uint32_t RCC_CFGR_2_PPRE1F : 1; /// APB1 prescaler flag
						uint32_t RCC_CFGR_2_RTCPRE2 : 1; /// HSE division factor for RTC clock
						uint32_t RCC_CFGR_2_RTCPRE3 : 1; /// HSE division factor for RTC clock
						uint32_t RCC_CFGR_2_RTCPRE4 : 1; /// HSE division factor for RTC clock
						uint32_t RCC_CFGR_2_MCO10 : 1; /// Microcontroller clock output 1
						uint32_t RCC_CFGR_2_MCO11 : 1; /// Microcontroller clock output 1
						uint32_t                  : 1;
						uint32_t RCC_CFGR_2_MCO1PRE : 3; /// MCO1 prescaler
						uint32_t RCC_CFGR_2_MCO2PRE : 3; /// MCO2 prescaler
						uint32_t RCC_CFGR_2_MCO2  : 2; /// Microcontroller clock output 2
					};
					#endif
					#ifdef RCC_CFGR_3
					struct
					{
						uint32_t                  : 10;
						uint32_t RCC_CFGR_3_PPRE10 : 1; /// APB Low speed prescaler (APB1)
						uint32_t RCC_CFGR_3_PPRE11 : 1; /// APB Low speed prescaler (APB1)
						uint32_t RCC_CFGR_3_PPRE12 : 1; /// APB Low speed prescaler (APB1)
						uint32_t RCC_CFGR_3_PPRE20 : 1; /// APB high-speed prescaler (APB2)
						uint32_t RCC_CFGR_3_ADCPRE : 1; /// ADC prescaler
						uint32_t RCC_CFGR_3_PPRE22 : 1; /// APB high-speed prescaler (APB2)
						uint32_t RCC_CFGR_3_PLLSRC : 1; /// PLL entry clock source
						uint32_t RCC_CFGR_3_PLLXTPRE : 1; /// HSE divider for PLL entry
						uint32_t RCC_CFGR_3_PPRE2F : 1; /// APB2 prescaler flag
						uint32_t                  : 3;
						uint32_t RCC_CFGR_3_USBPRES : 1; /// USB prescaler
						uint32_t                  : 1;
						uint32_t RCC_CFGR_3_MCOSEL : 4; /// Microcontroller clock output
						uint32_t RCC_CFGR_3_MCO2PRE1 : 1; /// MCO2 prescaler
						uint32_t RCC_CFGR_3_MCO2PRE2 : 1; /// MCO2 prescaler
						uint32_t RCC_CFGR_3_MCO20 : 1; /// Microcontroller clock output 2
						uint32_t RCC_CFGR_3_PLLNODIV : 1; /// PLL clock not divided for MCO
					};
					#endif
					#ifdef RCC_CFGR_4
					struct
					{
						uint32_t                  : 8;
						uint32_t RCC_CFGR_4_PPRE  : 3; /// APB Low speed prescaler (APB1)
						uint32_t                  : 3;
						uint32_t RCC_CFGR_4_ADCPRE : 2; /// ADC prescaler
						uint32_t                  : 2;
						uint32_t RCC_CFGR_4_PLLMUL : 4; /// PLL Multiplication Factor
						uint32_t RCC_CFGR_4_USBPRE : 1; /// USB prescaler
						uint32_t                  : 1;
						uint32_t RCC_CFGR_4_MCO1PRE0 : 1; /// MCO1 prescaler
						uint32_t RCC_CFGR_4_MCO1PRE1 : 1; /// MCO1 prescaler
						uint32_t RCC_CFGR_4_MCO1PRE2 : 1; /// MCO1 prescaler
						uint32_t                  : 1;
						uint32_t RCC_CFGR_4_MCOF  : 1; /// Microcontroller Clock Output Flag
						uint32_t                  : 3;
					};
					#endif
					#ifdef RCC_CFGR_5
					struct
					{
						uint32_t                  : 8;
						uint32_t RCC_CFGR_5_HPRE  : 4; /// AHB prescaler
						uint32_t RCC_CFGR_5_PPRE  : 3; /// APB prescaler
						uint32_t RCC_CFGR_5_PLLSRC : 2; /// PLL input clock source
						uint32_t                  : 5;
						uint32_t RCC_CFGR_5_PLLDIV : 2; /// PLL output division
						uint32_t RCC_CFGR_5_MCO   : 3; /// Microcontroller clock output
						uint32_t RCC_CFGR_5_SDPRE : 5; /// SDADC prescaler
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_D1CFGR
			struct D1CFGR_t: public Reg32_t /// RCC Domain 1 Clock Configuration Register
			{
				using Reg32_t::operator=;
				uint32_t HPRE             : 4; /// D1 domain AHB prescaler
				uint32_t D1PPRE           : 3; /// D1 domain APB3 prescaler
				uint32_t                  : 1;
				uint32_t D1CPRE           : 4; /// D1 domain Core prescaler
				uint32_t                  : 20;
				
			};
			#endif
			#ifdef RCC_D2CFGR
			struct D2CFGR_t: public Reg32_t /// RCC Domain 2 Clock Configuration Register
			{
				using Reg32_t::operator=;
				uint32_t                  : 4;
				uint32_t D2PPRE1          : 3; /// D2 domain APB1 prescaler
				uint32_t                  : 1;
				uint32_t D2PPRE2          : 3; /// D2 domain APB2 prescaler
				uint32_t                  : 21;
				
			};
			#endif
			#ifdef RCC_D3CFGR
			struct D3CFGR_t: public Reg32_t /// RCC Domain 3 Clock Configuration Register
			{
				using Reg32_t::operator=;
				union
				{
					#ifdef RCC_D3CFGR_0
					struct
					{
						uint32_t MDMAEN           : 1; /// MDMA Peripheral Clock Enable
						uint32_t                  : 3;
						uint32_t DMA2DEN          : 1; /// DMA2D Peripheral Clock Enable
						uint32_t JPGDECEN         : 1; /// JPGDEC Peripheral Clock Enable
						uint32_t                  : 6;
						uint32_t FMCEN            : 1; /// FMC Peripheral Clocks Enable
						uint32_t                  : 1;
						uint32_t QSPIEN           : 1; /// QUADSPI and QUADSPI Delay Clock Enable
						uint32_t                  : 1;
						uint32_t SDMMC1EN         : 1; /// SDMMC1 and SDMMC1 Delay Clock Enable
						uint32_t                  : 11;
						uint32_t DTCM1EN          : 1; /// D1 DTCM1 block enable
						uint32_t DTCM2EN          : 1; /// D1 DTCM2 block enable
						uint32_t ITCM1EN          : 1; /// D1 ITCM block enable
						uint32_t AXISRAMEN        : 1; /// AXISRAM block enable
					};
					#endif
					#ifdef RCC_D3CFGR_1
					struct
					{
						uint32_t                  : 4;
						uint32_t D3PPRE           : 3; /// D3 domain APB4 prescaler
						uint32_t                  : 25;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_PLLCKSELR
			struct PLLCKSELR_t: public Reg32_t /// RCC PLLs Clock Source Selection Register
			{
				using Reg32_t::operator=;
				uint32_t PLLSRC           : 2; /// DIVMx and PLLs clock source selection
				uint32_t                  : 2;
				uint32_t DIVM1            : 6; /// Prescaler for PLL1
				uint32_t                  : 2;
				uint32_t DIVM2            : 6; /// Prescaler for PLL2
				uint32_t                  : 2;
				uint32_t DIVM3            : 6; /// Prescaler for PLL3
				uint32_t                  : 6;
				
			};
			#endif
			#ifdef RCC_PLLCFGR
			struct PLLCFGR_t: public Reg32_t /// RCC PLLs Configuration Register
			{
				using Reg32_t::operator=;
				union
				{
					#ifdef RCC_PLLCFGR_0
					struct
					{
						uint32_t RCC_PLLCFGR_0_PLL1FRACEN : 1; /// PLL1 fractional latch enable
						uint32_t RCC_PLLCFGR_0_PLL1VCOSEL : 1; /// PLL1 VCO selection
						uint32_t RCC_PLLCFGR_0_PLL1RGE : 2; /// PLL1 input frequency range
						uint32_t RCC_PLLCFGR_0_PLL2FRACEN : 1; /// PLL2 fractional latch enable
						uint32_t RCC_PLLCFGR_0_PLL2VCOSEL : 1; /// PLL2 VCO selection
						uint32_t RCC_PLLCFGR_0_PLL2RGE : 2; /// PLL2 input frequency range
						uint32_t RCC_PLLCFGR_0_PLL3FRACEN : 1; /// PLL3 fractional latch enable
						uint32_t RCC_PLLCFGR_0_PLL3VCOSEL : 1; /// PLL3 VCO selection
						uint32_t RCC_PLLCFGR_0_PLL3RGE : 2; /// PLL3 input frequency range
						uint32_t RCC_PLLCFGR_0_PLLN6 : 1; /// Main PLL (PLL) multiplication factor for VCO
						uint32_t RCC_PLLCFGR_0_PLLN7 : 1; /// Main PLL (PLL) multiplication factor for VCO
						uint32_t RCC_PLLCFGR_0_PLLN8 : 1; /// Main PLL (PLL) multiplication factor for VCO
						uint32_t                  : 1;
						uint32_t RCC_PLLCFGR_0_DIVP1EN : 1; /// PLL1 DIVP divider output enable
						uint32_t RCC_PLLCFGR_0_DIVQ1EN : 1; /// PLL1 DIVQ divider output enable
						uint32_t RCC_PLLCFGR_0_DIVR1EN : 1; /// PLL1 DIVR divider output enable
						uint32_t RCC_PLLCFGR_0_DIVP2EN : 1; /// PLL2 DIVP divider output enable
						uint32_t RCC_PLLCFGR_0_DIVQ2EN : 1; /// PLL2 DIVQ divider output enable
						uint32_t RCC_PLLCFGR_0_DIVR2EN : 1; /// PLL2 DIVR divider output enable
						uint32_t RCC_PLLCFGR_0_DIVP3EN : 1; /// PLL3 DIVP divider output enable
						uint32_t RCC_PLLCFGR_0_DIVQ3EN : 1; /// PLL3 DIVQ divider output enable
						uint32_t RCC_PLLCFGR_0_DIVR3EN : 1; /// PLL3 DIVR divider output enable
						uint32_t RCC_PLLCFGR_0_PLLR : 2; /// Main PLL division factor for PLLCLK (system clock)
						uint32_t RCC_PLLCFGR_0_PLLPDIV : 5; /// Main PLL division factor for PLLSAI2CLK
					};
					#endif
					#ifdef RCC_PLLCFGR_1
					struct
					{
						uint32_t RCC_PLLCFGR_1_PLLSRC : 2; /// Main PLL, PLLSAI1 and PLLSAI2 entry clock source
						uint32_t RCC_PLLCFGR_1_PLLM2 : 1; /// Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
						uint32_t RCC_PLLCFGR_1_PLLM3 : 1; /// Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
						uint32_t RCC_PLLCFGR_1_PLLM : 4; /// Division factor for the main PLL and audio PLL (PLLSAI1 and PLLSAI2) input clock
						uint32_t RCC_PLLCFGR_1_PLLN : 7; /// Main PLL multiplication factor for VCO
						uint32_t                  : 1;
						uint32_t RCC_PLLCFGR_1_PLLPEN : 1; /// Main PLL PLLSAI3CLK output enable
						uint32_t RCC_PLLCFGR_1_PLLP : 1; /// Main PLL division factor for PLLSAI3CLK (SAI1 and SAI2 clock)
						uint32_t                  : 2;
						uint32_t RCC_PLLCFGR_1_PLLQEN : 1; /// Main PLL PLLUSB1CLK output enable
						uint32_t RCC_PLLCFGR_1_PLLQ : 2; /// Main PLL division factor for PLLUSB1CLK(48 MHz clock)
						uint32_t                  : 1;
						uint32_t RCC_PLLCFGR_1_PLLREN : 1; /// Main PLL PLLCLK output enable
						uint32_t RCC_PLLCFGR_1_PLLQ1 : 1; /// Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks
						uint32_t RCC_PLLCFGR_1_PLLQ2 : 1; /// Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks
						uint32_t RCC_PLLCFGR_1_PLLQ3 : 1; /// Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks
						uint32_t RCC_PLLCFGR_1_PLLR : 3; /// Main PLL division factor for DSI clock
						uint32_t                  : 1;
					};
					#endif
					#ifdef RCC_PLLCFGR_2
					struct
					{
						uint32_t RCC_PLLCFGR_2_PLLM0 : 1; /// Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
						uint32_t RCC_PLLCFGR_2_PLLM1 : 1; /// Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
						uint32_t                  : 2;
						uint32_t RCC_PLLCFGR_2_PLLM4 : 1; /// Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
						uint32_t RCC_PLLCFGR_2_PLLM5 : 1; /// Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
						uint32_t RCC_PLLCFGR_2_PLLN0 : 1; /// Main PLL (PLL) multiplication factor for VCO
						uint32_t RCC_PLLCFGR_2_PLLN1 : 1; /// Main PLL (PLL) multiplication factor for VCO
						uint32_t RCC_PLLCFGR_2_PLLN2 : 1; /// Main PLL (PLL) multiplication factor for VCO
						uint32_t RCC_PLLCFGR_2_PLLN3 : 1; /// Main PLL (PLL) multiplication factor for VCO
						uint32_t RCC_PLLCFGR_2_PLLN4 : 1; /// Main PLL (PLL) multiplication factor for VCO
						uint32_t RCC_PLLCFGR_2_PLLN5 : 1; /// Main PLL (PLL) multiplication factor for VCO
						uint32_t                  : 4;
						uint32_t RCC_PLLCFGR_2_PLLP0 : 1; /// Main PLL (PLL) division factor for main system clock
						uint32_t RCC_PLLCFGR_2_PLLP1 : 1; /// Main PLL (PLL) division factor for main system clock
						uint32_t                  : 4;
						uint32_t RCC_PLLCFGR_2_PLLSRC : 1; /// Main PLL(PLL) and audio PLL (PLLI2S) entry clock source
						uint32_t                  : 1;
						uint32_t RCC_PLLCFGR_2_PLLQ0 : 1; /// Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks
						uint32_t RCC_PLLCFGR_2_PLLQ : 3; /// Main PLLSYS division factor Q for PLLSYSUSBCLK
						uint32_t RCC_PLLCFGR_2_PLLREN : 1; /// Main PLLSYSR PLLCLK output enable
						uint32_t RCC_PLLCFGR_2_PLLR : 3; /// Main PLLSYS division factor R for SYSCLK (system clock)
					};
					#endif
					#ifdef RCC_PLLCFGR_3
					struct
					{
						uint32_t RCC_PLLCFGR_3_PLLM : 6; /// Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
						uint32_t RCC_PLLCFGR_3_PLLN : 9; /// Main PLL (PLL) multiplication factor for VCO
						uint32_t                  : 1;
						uint32_t RCC_PLLCFGR_3_PLLP : 2; /// Main PLL (PLL) division factor for main system clock
						uint32_t                  : 6;
						uint32_t RCC_PLLCFGR_3_PLLQ : 4; /// Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks
						uint32_t RCC_PLLCFGR_3_PLLR1 : 1;
						uint32_t RCC_PLLCFGR_3_PLLR2 : 1;
						uint32_t RCC_PLLCFGR_3_PLLR3 : 1;
						uint32_t                  : 1;
					};
					#endif
					#ifdef RCC_PLLCFGR_4
					struct
					{
						uint32_t                  : 4;
						uint32_t PLLM             : 3; /// Division factor for the main PLL and audio PLL (PLLSAI1 and PLLSAI2) input clock
						uint32_t                  : 10;
						uint32_t RCC_PLLCFGR_4_PLLP : 5; /// Main PLL division factor P for PPLSYSSAICLK
						uint32_t                  : 2;
						uint32_t RCC_PLLCFGR_4_PLLQEN : 1; /// Main PLLSYSQ output enable
						uint32_t                  : 7;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_PLLxDIVR
			struct PLLxDIVR_t: public Reg32_t /// RCC PLL1 Dividers Configuration Register
			{
				using Reg32_t::operator=;
				uint32_t DIVN1            : 9; /// Multiplication factor for PLL1 VCO
				uint32_t DIVP1            : 7; /// PLL1 DIVP division factor
				uint32_t DIVQ1            : 7; /// PLL1 DIVQ division factor
				uint32_t                  : 1;
				uint32_t DIVR1            : 7; /// PLL1 DIVR division factor
				uint32_t                  : 1;
				
			};
			#endif
			#ifdef RCC_PLL1FRACR
			struct PLL1FRACR_t: public Reg32_t /// RCC PLL1 Fractional Divider Register
			{
				using Reg32_t::operator=;
				uint32_t                  : 3;
				uint32_t FRACN1           : 13; /// Fractional part of the multiplication factor for PLL1 VCO
				uint32_t                  : 16;
				
			};
			#endif
			#ifdef RCC_PLL2FRACR
			struct PLL2FRACR_t: public Reg32_t /// RCC PLL2 Fractional Divider Register
			{
				using Reg32_t::operator=;
				uint32_t                  : 3;
				uint32_t FRACN2           : 13; /// Fractional part of the multiplication factor for PLL VCO
				uint32_t                  : 16;
				
			};
			#endif
			#ifdef RCC_PLL3DIVR
			struct PLL3DIVR_t: public Reg32_t /// RCC PLL3 Dividers Configuration Register
			{
				using Reg32_t::operator=;
				uint32_t DIVN3            : 9; /// Multiplication factor for PLL1 VCO
				uint32_t DIVP3            : 7; /// PLL DIVP division factor
				uint32_t DIVQ3            : 7; /// PLL DIVQ division factor
				uint32_t                  : 1;
				uint32_t DIVR3            : 7; /// PLL DIVR division factor
				uint32_t                  : 1;
				
			};
			#endif
			#ifdef RCC_PLL3FRACR
			struct PLL3FRACR_t: public Reg32_t /// RCC PLL3 Fractional Divider Register
			{
				using Reg32_t::operator=;
				uint32_t                  : 3;
				uint32_t FRACN3           : 13; /// Fractional part of the multiplication factor for PLL3 VCO
				uint32_t                  : 16;
				
			};
			#endif
			#ifdef RCC_D1CCIPR
			struct D1CCIPR_t: public Reg32_t /// RCC Domain 1 Kernel Clock Configuration Register
			{
				using Reg32_t::operator=;
				uint32_t FMCSRC           : 2; /// FMC kernel clock source selection
				uint32_t                  : 2;
				uint32_t QSPISRC          : 2; /// QUADSPI kernel clock source selection
				uint32_t                  : 2;
				uint32_t RCC_D1CCIPR_DSISEL : 1; /// kernel clock source selection
				uint32_t                  : 7;
				uint32_t SDMMCSRC         : 1; /// SDMMC kernel clock source selection
				uint32_t                  : 11;
				uint32_t CKPERSRC         : 2; /// per_ck clock source selection
				uint32_t                  : 2;
				
			};
			#endif
			#ifdef RCC_D2CCIP1R
			struct D2CCIP1R_t: public Reg32_t /// RCC Domain 2 Kernel Clock Configuration Register
			{
				using Reg32_t::operator=;
				uint32_t SAI1SRC          : 3; /// SAI1 and DFSDM1 kernel Aclk clock source selection
				uint32_t                  : 3;
				uint32_t SAI23SRC         : 3; /// SAI2 and SAI3 kernel clock source selection
				uint32_t                  : 3;
				uint32_t SPI123SRC        : 3; /// SPI/I2S1,2 and 3 kernel clock source selection
				uint32_t                  : 1;
				uint32_t SPI45SRC         : 3; /// SPI4 and 5 kernel clock source selection
				uint32_t                  : 1;
				uint32_t SPDIFSRC         : 2; /// SPDIFRX kernel clock source selection
				uint32_t                  : 2;
				uint32_t DFSDM1SRC        : 1; /// DFSDM1 kernel Clk clock source selection
				uint32_t                  : 3;
				uint32_t FDCANSRC         : 2; /// FDCAN kernel clock source selection
				uint32_t                  : 1;
				uint32_t SWPSRC           : 1; /// SWPMI kernel clock source selection
				
			};
			#endif
			#ifdef RCC_D2CCIP2R
			struct D2CCIP2R_t: public Reg32_t /// RCC Domain 2 Kernel Clock Configuration Register
			{
				using Reg32_t::operator=;
				uint32_t USART234578SRC   : 3; /// USART2/3, UART4,5, 7/8 (APB1) kernel clock source selection
				uint32_t USART16SRC       : 3; /// USART1 and 6 kernel clock source selection
				uint32_t                  : 2;
				uint32_t RNGSRC           : 2; /// RNG kernel clock source selection
				uint32_t                  : 2;
				uint32_t I2C123SRC        : 2; /// I2C1,2,3 kernel clock source selection
				uint32_t                  : 6;
				uint32_t USBSRC           : 2; /// USBOTG 1 and 2 kernel clock source selection
				uint32_t CECSRC           : 2; /// HDMI-CEC kernel clock source selection
				uint32_t                  : 4;
				uint32_t LPTIM1SRC        : 3; /// LPTIM1 kernel clock source selection
				uint32_t                  : 1;
				
			};
			#endif
			#ifdef RCC_D3CCIPR
			struct D3CCIPR_t: public Reg32_t /// RCC Domain 3 Kernel Clock Configuration Register
			{
				using Reg32_t::operator=;
				uint32_t LPUART1SRC       : 3; /// LPUART1 kernel clock source selection
				uint32_t                  : 5;
				uint32_t I2C4SRC          : 2; /// I2C4 kernel clock source selection
				uint32_t LPTIM2SRC        : 3; /// LPTIM2 kernel clock source selection
				uint32_t LPTIM345SRC      : 3; /// LPTIM3,4,5 kernel clock source selection
				uint32_t ADCSRC           : 2; /// SAR ADC kernel clock source selection
				uint32_t                  : 3;
				uint32_t SAI4ASRC         : 3; /// Sub-Block A of SAI4 kernel clock source selection
				uint32_t SAI4BSRC         : 3; /// Sub-Block B of SAI4 kernel clock source selection
				uint32_t                  : 1;
				uint32_t SPI6SRC          : 3; /// SPI6 kernel clock source selection
				uint32_t                  : 1;
				
			};
			#endif
			#ifdef RCC_CIER
			struct CIER_t: public Reg32_t /// RCC Clock Source Interrupt Enable Register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t RCC_CIER_0_LSIRDYIE : 1; /// LSI ready Interrupt Enable
						uint32_t LSERDYIE         : 1; /// LSE ready Interrupt Enable
						uint32_t RCC_CIER_0_HSIRDYIE : 1; /// HSI ready Interrupt Enable
						uint32_t RCC_CIER_0_HSERDYIE : 1; /// HSE ready Interrupt Enable
						uint32_t RCC_CIER_0_CSIRDYIE : 1; /// CSI ready Interrupt Enable
						uint32_t RCC_CIER_0_RC48RDYIE : 1; /// RC48 ready Interrupt Enable
						uint32_t RCC_CIER_0_PLL1RDYIE : 1; /// PLL1 ready Interrupt Enable
						uint32_t RCC_CIER_0_PLL2RDYIE : 1; /// PLL2 ready Interrupt Enable
						uint32_t RCC_CIER_0_PLL3RDYIE : 1; /// PLL3 ready Interrupt Enable
						uint32_t RCC_CIER_0_LSECSSIE : 1; /// LSE clock security system Interrupt Enable
						uint32_t RCC_CIER_0_HSI48RDYIE : 1; /// HSI48 ready interrupt enable
						uint32_t RCC_CIER_0_LSI2RDYIE : 1; /// LSI2 ready interrupt enable
						uint32_t                  : 20;
					};
					#ifdef RCC_CIER_1
					struct
					{
						uint32_t RCC_CIER_1_LSI1RDYIE : 1; /// LSI1 ready interrupt enable
						uint32_t                  : 1;
						uint32_t RCC_CIER_1_MSIRDYIE : 1; /// MSI ready interrupt enable
						uint32_t HSIRDYIE         : 1; /// HSI ready interrupt enable
						uint32_t HSERDYIE         : 1; /// HSE ready interrupt enable
						uint32_t RCC_CIER_1_PLLRDYIE : 1; /// PLL ready interrupt enable
						uint32_t RCC_CIER_1_PLLSAI1RDYIE : 1; /// PLLSAI1 ready interrupt enable
						uint32_t RCC_CIER_1_PLLSAI2RDYIE : 1; /// PLLSAI2 ready interrupt enable
						uint32_t                  : 2;
						uint32_t RCC_CIER_1_RC48RDYIE : 1; /// HSI48 ready interrupt enable
						uint32_t                  : 21;
					};
					#endif
					#ifdef RCC_CIER_2
					struct
					{
						uint32_t                  : 2;
						uint32_t RCC_CIER_2_HSI16RDYIE : 1; /// HSI16 ready interrupt flag
						uint32_t                  : 1;
						uint32_t RCC_CIER_2_PLLRDYIE : 1; /// PLL ready interrupt flag
						uint32_t RCC_CIER_2_PLLSYSRDYIE : 1; /// PLL ready interrupt enable
						uint32_t RCC_CIER_2_HSI48RDYIE : 1; /// HSI48 ready interrupt flag
						uint32_t RCC_CIER_2_CSSLSE : 1; /// LSE CSS interrupt flag
						uint32_t                  : 24;
					};
					#endif
					#ifdef RCC_CIER_3
					struct
					{
						uint32_t                  : 5;
						uint32_t MSIRDYIE         : 1; /// MSI ready interrupt flag
						uint32_t                  : 26;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_CIFR
			struct CIFR_t: public Reg32_t /// RCC Clock Source Interrupt Flag Register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t RCC_CIFR_0_LSIRDYF : 1; /// LSI ready Interrupt Flag
						uint32_t LSERDYF          : 1; /// LSE ready Interrupt Flag
						uint32_t RCC_CIFR_0_HSIRDYF : 1; /// HSI ready Interrupt Flag
						uint32_t RCC_CIFR_0_HSERDYF : 1; /// HSE ready Interrupt Flag
						uint32_t RCC_CIFR_0_CSIRDY : 1; /// CSI ready Interrupt Flag
						uint32_t RCC_CIFR_0_RC48RDYF : 1; /// RC48 ready Interrupt Flag
						uint32_t RCC_CIFR_0_PLL1RDYF : 1; /// PLL1 ready Interrupt Flag
						uint32_t RCC_CIFR_0_PLL2RDYF : 1; /// PLL2 ready Interrupt Flag
						uint32_t RCC_CIFR_0_PLL3RDYF : 1; /// PLL3 ready Interrupt Flag
						uint32_t RCC_CIFR_0_LSECSSF : 1; /// LSE clock security system Interrupt Flag
						uint32_t RCC_CIFR_0_HSECSSF : 1; /// HSE clock security system Interrupt Flag
						uint32_t RCC_CIFR_0_LSI2RDYF : 1; /// LSI2 ready interrupt flag
						uint32_t                  : 20;
					};
					#ifdef RCC_CIFR_1
					struct
					{
						uint32_t RCC_CIFR_1_LSI1RDYF : 1; /// LSI1 ready interrupt flag
						uint32_t                  : 1;
						uint32_t RCC_CIFR_1_MSIRDYF : 1; /// MSI ready interrupt flag
						uint32_t HSIRDYF          : 1; /// HSI ready interrupt flag
						uint32_t HSERDYF          : 1; /// HSE ready interrupt flag
						uint32_t RCC_CIFR_1_PLLRDYF : 1; /// PLL ready interrupt flag
						uint32_t RCC_CIFR_1_PLLSAI1RDYF : 1; /// PLLSAI1 ready interrupt flag
						uint32_t RCC_CIFR_1_PLLSAI2RDYF : 1; /// PLLSAI2 ready interrupt flag
						uint32_t RCC_CIFR_1_CSSF  : 1; /// Clock security system interrupt flag
						uint32_t                  : 1;
						uint32_t RCC_CIFR_1_HSI48RDYF : 1; /// HSI48 ready interrupt flag
						uint32_t                  : 21;
					};
					#endif
					#ifdef RCC_CIFR_2
					struct
					{
						uint32_t                  : 2;
						uint32_t RCC_CIFR_2_HSI16RDYF : 1; /// HSI16 ready interrupt flag
						uint32_t                  : 1;
						uint32_t RCC_CIFR_2_PLLRDYF : 1; /// PLL ready interrupt flag
						uint32_t RCC_CIFR_2_PLLSYSRDYF : 1; /// PLL ready interrupt flag
						uint32_t RCC_CIFR_2_HSI48RDYF : 1; /// HSI48 ready interrupt flag
						uint32_t RCC_CIFR_2_CSSLSEF : 1; /// LSE Clock Security System Interrupt flag
						uint32_t RCC_CIFR_2_HSECSSF : 1; /// Clock security system interrupt flag
						uint32_t                  : 1;
						uint32_t RCC_CIFR_2_RC48RDYF : 1; /// HSI48 ready interrupt flag
						uint32_t                  : 21;
					};
					#endif
					#ifdef RCC_CIFR_3
					struct
					{
						uint32_t                  : 5;
						uint32_t MSIRDYF          : 1; /// MSI ready interrupt flag
						uint32_t                  : 2;
						uint32_t CSSHSEF          : 1; /// Clock Security System Interrupt flag
						uint32_t                  : 23;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_CICR
			struct CICR_t: public Reg32_t /// RCC Clock Source Interrupt Clear Register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t RCC_CICR_0_LSIRDYC : 1; /// LSI ready Interrupt Clear
						uint32_t LSERDYC          : 1; /// LSE ready Interrupt Clear
						uint32_t RCC_CICR_0_HSIRDYC : 1; /// HSI ready Interrupt Clear
						uint32_t RCC_CICR_0_HSERDYC : 1; /// HSE ready Interrupt Clear
						uint32_t RCC_CICR_0_HSE_ready_Interrupt_Clear : 1; /// CSI ready Interrupt Clear
						uint32_t RCC_CICR_0_RC48RDYC : 1; /// RC48 ready Interrupt Clear
						uint32_t RCC_CICR_0_PLL1RDYC : 1; /// PLL1 ready Interrupt Clear
						uint32_t RCC_CICR_0_PLL2RDYC : 1; /// PLL2 ready Interrupt Clear
						uint32_t RCC_CICR_0_PLL3RDYC : 1; /// PLL3 ready Interrupt Clear
						uint32_t RCC_CICR_0_LSECSSC : 1; /// LSE clock security system Interrupt Clear
						uint32_t RCC_CICR_0_HSECSSC : 1; /// HSE clock security system Interrupt Clear
						uint32_t RCC_CICR_0_LSI2RDYC : 1; /// LSI2 ready interrupt clear
						uint32_t                  : 20;
					};
					#ifdef RCC_CICR_1
					struct
					{
						uint32_t RCC_CICR_1_LSI1RDYC : 1; /// LSI1 ready interrupt clear
						uint32_t                  : 1;
						uint32_t RCC_CICR_1_MSIRDYC : 1; /// MSI ready interrupt clear
						uint32_t HSIRDYC          : 1; /// HSI ready interrupt clear
						uint32_t HSERDYC          : 1; /// HSE ready interrupt clear
						uint32_t RCC_CICR_1_PLLRDYC : 1; /// PLL ready interrupt clear
						uint32_t RCC_CICR_1_PLLSAI1RDYC : 1; /// PLLSAI1 ready interrupt clear
						uint32_t RCC_CICR_1_PLLSAI2RDYC : 1; /// PLLSAI2 ready interrupt clear
						uint32_t RCC_CICR_1_CSSC  : 1; /// Clock security system interrupt clear
						uint32_t                  : 1;
						uint32_t RCC_CICR_1_HSI48RDYC : 1; /// HSI48 oscillator ready interrupt clear
						uint32_t                  : 21;
					};
					#endif
					#ifdef RCC_CICR_2
					struct
					{
						uint32_t                  : 2;
						uint32_t RCC_CICR_2_HSI16RDYC : 1; /// HSI16 ready Interrupt clear
						uint32_t                  : 1;
						uint32_t RCC_CICR_2_PLLRDYC : 1; /// PLL ready Interrupt clear
						uint32_t RCC_CICR_2_PLLSYSRDYC : 1; /// PLL ready interrupt clear
						uint32_t RCC_CICR_2_HSI48RDYC : 1; /// HSI48 ready Interrupt clear
						uint32_t RCC_CICR_2_CSSLSEC : 1; /// LSE Clock Security System Interrupt clear
						uint32_t RCC_CICR_2_HSECSSC : 1; /// Clock security system interrupt clear
						uint32_t                  : 1;
						uint32_t RCC_CICR_2_RC48RDYC : 1; /// HSI48 oscillator ready interrupt clear
						uint32_t                  : 21;
					};
					#endif
					#ifdef RCC_CICR_3
					struct
					{
						uint32_t                  : 5;
						uint32_t MSIRDYC          : 1; /// MSI ready Interrupt clear
						uint32_t                  : 2;
						uint32_t CSSHSEC          : 1; /// Clock Security System Interrupt clear
						uint32_t                  : 23;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_CSR
			struct CSR_t: public Reg32_t /// RCC Clock Control and Status Register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t RCC_CSR_0_LSION  : 1; /// LSI oscillator enable
						uint32_t RCC_CSR_0_LSIRDY : 1; /// LSI oscillator ready
						uint32_t RCC_CSR_0_LSI2ON : 1; /// LSI2 oscillator enabled
						uint32_t RCC_CSR_0_LSI2RDY : 1; /// LSI2 oscillator ready
						uint32_t RCC_CSR_0_LSI2TRIMEN : 1; /// LSI2 oscillator trimming enable
						uint32_t RCC_CSR_0_LSI2TRIMOK : 1; /// LSI2 oscillator trim OK
						uint32_t                  : 2;
						uint32_t RCC_CSR_0_MSISRANGE : 4; /// SI range after Standby mode
						uint32_t RCC_CSR_0_LSECSSD : 1; /// CSS on LSE failure Detection
						uint32_t RCC_CSR_0_CSSLSEON : 1;
						uint32_t RCC_CSR_0_RFWKPSEL : 2; /// RF system wakeup clock source selection
						uint32_t RCC_CSR_0_RFRSTS : 1; /// Radio system BLE and 802.15.4 reset status
						uint32_t                  : 1;
						uint32_t RCC_CSR_0_RTCEN  : 1; /// RTC clock enable bit
						uint32_t RCC_CSR_0_RTCRST : 1; /// RTC software reset bit
						uint32_t                  : 3;
						uint32_t RCC_CSR_0_RMVF   : 1; /// Remove reset flag
						uint32_t RCC_CSR_0_FWRSTF : 1; /// Firewall reset flag
						uint32_t RCC_CSR_0_OBLRSTF : 1; /// Option byte loader reset flag
						uint32_t RCC_CSR_0_PINRSTF : 1; /// Pin reset flag
						uint32_t RCC_CSR_0_BORRSTF : 1; /// BOR flag
						uint32_t RCC_CSR_0_SFTRSTF : 1; /// Software reset flag
						uint32_t RCC_CSR_0_IWDGRSTF : 1; /// Independent window watchdog reset flag
						uint32_t RCC_CSR_0_WWDGRSTF : 1; /// Window watchdog reset flag
						uint32_t RCC_CSR_0_LPWRSTF : 1; /// Low-power reset flag
					};
					#ifdef RCC_CSR_1
					struct
					{
						uint32_t RCC_CSR_1_LSI1ON : 1; /// LSI1 oscillator enabled
						uint32_t RCC_CSR_1_LSI1RDY : 1; /// LSI1 oscillator ready
						uint32_t RCC_CSR_1_LSIIWDGLP : 1; /// LSI clock input to IWDG in Ultra-low-power mode (Stop and Standby) enable bit
						uint32_t                  : 5;
						uint32_t RCC_CSR_1_LSI2BW : 4; /// LSI2 oscillator bias configuration
						uint32_t                  : 2;
						uint32_t RCC_CSR_1_CSSLSED : 1; /// CSS on LSE failure detection flag
						uint32_t                  : 1;
						uint32_t RCC_CSR_1_RTCSEL : 2; /// RTC and LCD clock source selection bits
						uint32_t                  : 4;
						uint32_t RCC_CSR_1_RTCEN  : 1; /// RTC clock enable
						uint32_t RCC_CSR_1_RTCRST : 1; /// RTC software reset
						uint32_t RCC_CSR_1_RMVF   : 1; /// Remove reset flag
						uint32_t RCC_CSR_1_BORRSTF : 1; /// BOR reset flag
						uint32_t RCC_CSR_1_PADRSTF : 1; /// PIN reset flag
						uint32_t RCC_CSR_1_PORRSTF : 1; /// POR/PDR reset flag
						uint32_t                  : 1;
						uint32_t RCC_CSR_1_WDGRSTF : 1; /// Independent watchdog reset flag
						uint32_t                  : 1;
						uint32_t RCC_CSR_1_LPWRRSTF : 1; /// Low-power reset flag
					};
					#endif
					#ifdef RCC_CSR_2
					struct
					{
						uint32_t                  : 8;
						uint32_t RCC_CSR_2_LSEON  : 1; /// External low-speed oscillator enable bit
						uint32_t RCC_CSR_2_LSERDY : 1; /// External low-speed oscillator ready bit
						uint32_t RCC_CSR_2_LSEBYP : 1; /// External low-speed oscillator bypass bit
						uint32_t RCC_CSR_2_LSEDRV : 2;
						uint32_t                  : 11;
						uint32_t RCC_CSR_2_FIREWALLRSTF : 1; /// Firewall reset flag
						uint32_t                  : 2;
						uint32_t RCC_CSR_2_PWRRSTF : 1; /// BOR or POR/PDR flag
						uint32_t                  : 4;
					};
					#endif
					#ifdef RCC_CSR_3
					struct
					{
						uint32_t                  : 11;
						uint32_t LSECSSON         : 1; /// CSS on LSE enable
						uint32_t                  : 20;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_AHB3RSTR
			struct AHB3RSTR_t: public Reg32_t /// RCC AHB3 Reset Register
			{
				using Reg32_t::operator=;
				union
				{
					#ifdef RCC_AHB3RSTR_0
					struct
					{
						uint32_t RCC_AHB3RSTR_0_MDMARST : 1; /// MDMA block reset
						uint32_t                  : 3;
						uint32_t RCC_AHB3RSTR_0_DMA2DRST : 1; /// DMA2D block reset
						uint32_t RCC_AHB3RSTR_0_JPGDECRST : 1; /// JPGDEC block reset
						uint32_t                  : 2;
						uint32_t RCC_AHB3RSTR_0_QUADSPI1RST : 1; /// Quad SPI 1 module reset
						uint32_t RCC_AHB3RSTR_0_OSPI2RST : 1; /// OctOSPI2 memory interface reset
						uint32_t                  : 2;
						uint32_t RCC_AHB3RSTR_0_FMCRST : 1; /// FMC block reset
						uint32_t                  : 1;
						uint32_t RCC_AHB3RSTR_0_QSPIRST : 1; /// QUADSPI and QUADSPI delay block reset
						uint32_t                  : 1;
						uint32_t RCC_AHB3RSTR_0_SDMMC1RST : 1; /// SDMMC1 and SDMMC1 delay block reset
						uint32_t RCC_AHB3RSTR_0_AES2RST : 1; /// AES2 interface reset
						uint32_t RCC_AHB3RSTR_0_RNGRST : 1; /// RNG interface reset
						uint32_t RCC_AHB3RSTR_0_HSEMRST : 1; /// HSEM interface reset
						uint32_t RCC_AHB3RSTR_0_IPCCRST : 1; /// IPCC interface reset
						uint32_t                  : 4;
						uint32_t RCC_AHB3RSTR_0_FLASHRST : 1; /// Flash interface reset
						uint32_t                  : 5;
						uint32_t RCC_AHB3RSTR_0_CPURST : 1; /// CPU reset
					};
					#endif
					#ifdef RCC_AHB3RSTR_1
					struct
					{
						uint32_t RCC_AHB3RSTR_1_FMCRST : 1; /// Flexible memory controller reset
						uint32_t RCC_AHB3RSTR_1_QSPIRST : 1; /// Quad SPI memory controller reset
						uint32_t                  : 14;
						uint32_t RCC_AHB3RSTR_1_PKARST : 1; /// PKA interface reset
						uint32_t                  : 15;
					};
					#endif
					#ifdef RCC_AHB3RSTR_2
					struct
					{
						uint32_t RCC_AHB3RSTR_2_FSMCRST : 1; /// Flexible static memory controller module reset
						uint32_t                  : 7;
						uint32_t RCC_AHB3RSTR_2_QSPIRST : 1; /// Quad SPI memory interface reset
						uint32_t                  : 23;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_AHB1RSTR
			struct AHB1RSTR_t: public Reg32_t /// RCC AHB1 Peripheral Reset Register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t RCC_AHB1RSTR_0_DMA1RST : 1; /// DMA1 block reset
						uint32_t RCC_AHB1RSTR_0_DMA2RST : 1; /// DMA2 block reset
						uint32_t RCC_AHB1RSTR_0_DMAMUX1RST : 1; /// DMAMUXRST
						uint32_t RCC_AHB1RSTR_0_GPIODRST : 1; /// IO port D reset
						uint32_t RCC_AHB1RSTR_0_GPIOERST : 1; /// IO port E reset
						uint32_t RCC_AHB1RSTR_0_ADC12RST : 1; /// ADC1&2 block reset
						uint32_t RCC_AHB1RSTR_0_GPIOGRST : 1; /// IO port G reset
						uint32_t RCC_AHB1RSTR_0_GPIOHRST : 1; /// IO port H reset
						uint32_t RCC_AHB1RSTR_0_FLASHRST : 1; /// Flash memory interface reset
						uint32_t RCC_AHB1RSTR_0_GPIOJRST : 1; /// IO port J reset
						uint32_t RCC_AHB1RSTR_0_GPIOKRST : 1; /// IO port K reset
						uint32_t                  : 1;
						uint32_t RCC_AHB1RSTR_0_CRCRST : 1; /// CRC reset
						uint32_t                  : 1;
						uint32_t RCC_AHB1RSTR_0_ARTRST : 1; /// ART block reset
						uint32_t RCC_AHB1RSTR_0_ETH1MACRST : 1; /// ETH1MAC block reset
						uint32_t RCC_AHB1RSTR_0_TSCRST : 1; /// Touch Sensing Controller reset
						uint32_t RCC_AHB1RSTR_0_DMA2DRST : 1; /// DMA2D reset
						uint32_t RCC_AHB1RSTR_0_GFXMMURST : 1; /// GFXMMU reset
						uint32_t                  : 6;
						uint32_t RCC_AHB1RSTR_0_USB1OTGRST : 1; /// USB1OTG block reset
						uint32_t                  : 1;
						uint32_t RCC_AHB1RSTR_0_USB2OTGRST : 1; /// USB2OTG block reset
						uint32_t                  : 1;
						uint32_t RCC_AHB1RSTR_0_OTGHSRST : 1; /// USB OTG HS module reset
						uint32_t                  : 1;
						uint32_t RCC_AHB1RSTR_0_RNGRST : 1;
					};
					#ifdef RCC_AHB1RSTR_1
					struct
					{
						uint32_t RCC_AHB1RSTR_1_GPIOARST : 1; /// IO port A reset
						uint32_t RCC_AHB1RSTR_1_GPIOBRST : 1; /// IO port B reset
						uint32_t RCC_AHB1RSTR_1_GPIOCRST : 1; /// IO port C reset
						uint32_t RCC_AHB1RSTR_1_CORDICRST : 1; /// CORDIC reset
						uint32_t RCC_AHB1RSTR_1_MATRIXRST : 1; /// MATRIX reset
						uint32_t RCC_AHB1RSTR_1_GPIOFRST : 1; /// IO port F reset
						uint32_t                  : 2;
						uint32_t RCC_AHB1RSTR_1_GPIOIRST : 1; /// IO port I reset
						uint32_t                  : 2;
						uint32_t RCC_AHB1RSTR_1_CRCRST : 1; /// CRC reset
						uint32_t                  : 9;
						uint32_t RCC_AHB1RSTR_1_DMA1RST : 1; /// DMA2 reset
						uint32_t RCC_AHB1RSTR_1_DMA2RST : 1; /// DMA2 reset
						uint32_t RCC_AHB1RSTR_1_DMA2DRST : 1; /// DMA2D reset
						uint32_t                  : 1;
						uint32_t RCC_AHB1RSTR_1_ETHMACRST : 1; /// Ethernet MAC reset
						uint32_t                  : 6;
					};
					#endif
					#ifdef RCC_AHB1RSTR_2
					struct
					{
						uint32_t                  : 2;
						uint32_t RCC_AHB1RSTR_2_DMAMUXRST : 1; /// DMAMUX reset
						uint32_t                  : 5;
						uint32_t RCC_AHB1RSTR_2_FLITFRST_ : 1; /// FLITF reset
						uint32_t                  : 23;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_AHB2RSTR
			struct AHB2RSTR_t: public Reg32_t /// RCC AHB2 Peripheral Reset Register
			{
				using Reg32_t::operator=;
				union
				{
					#ifdef RCC_AHB2RSTR_0
					struct
					{
						uint32_t RCC_AHB2RSTR_0_CAMITFRST : 1; /// CAMITF block reset
						uint32_t RCC_AHB2RSTR_0_GPIOBRST : 1; /// IO port B reset
						uint32_t RCC_AHB2RSTR_0_GPIOCRST : 1; /// IO port C reset
						uint32_t RCC_AHB2RSTR_0_GPIODRST : 1; /// IO port D reset
						uint32_t RCC_AHB2RSTR_0_CRYPTRST : 1; /// Cryptography block reset
						uint32_t RCC_AHB2RSTR_0_HASHRST : 1; /// Hash block reset
						uint32_t RCC_AHB2RSTR_0_RNGRST : 1; /// Random Number Generator block reset
						uint32_t RCC_AHB2RSTR_0_GPIOHRST : 1; /// IO port H reset
						uint32_t RCC_AHB2RSTR_0_GPIOIRST : 1; /// IO port I reset
						uint32_t RCC_AHB2RSTR_0_SDMMC2RST : 1; /// SDMMC2 and SDMMC2 Delay block reset
						uint32_t                  : 2;
						uint32_t RCC_AHB2RSTR_0_OTGFSRST : 1; /// USB OTG FS reset
						uint32_t RCC_AHB2RSTR_0_ADCRST : 1; /// ADC reset
						uint32_t RCC_AHB2RSTR_0_DCMIRST : 1; /// Digital Camera Interface reset
						uint32_t                  : 1;
						uint32_t RCC_AHB2RSTR_0_AESRST : 1; /// AES hardware accelerator reset
						uint32_t RCC_AHB2RSTR_0_DAC2RST : 1; /// DAC2 interface reset
						uint32_t RCC_AHB2RSTR_0_DAC3RST : 1; /// DAC3 interface reset
						uint32_t RCC_AHB2RSTR_0_DAC4RST : 1; /// DAC4 interface reset
						uint32_t RCC_AHB2RSTR_0_OSPIMRST : 1; /// OCTOSPI IO manager reset
						uint32_t                  : 1;
						uint32_t RCC_AHB2RSTR_0_SDMMC1RST : 1; /// SDMMC1 reset
						uint32_t                  : 9;
					};
					#endif
					#ifdef RCC_AHB2RSTR_1
					struct
					{
						uint32_t RCC_AHB2RSTR_1_GPIOARST : 1; /// IO port A reset
						uint32_t                  : 3;
						uint32_t RCC_AHB2RSTR_1_GPIOERST : 1; /// IO port E reset
						uint32_t RCC_AHB2RSTR_1_GPIOFRST : 1; /// IO port F reset
						uint32_t RCC_AHB2RSTR_1_GPIOGRST : 1; /// IO port G reset
						uint32_t RCC_AHB2RSTR_1_OTGFSRST : 1; /// USB OTG FS module reset
						uint32_t                  : 5;
						uint32_t RCC_AHB2RSTR_1_ADC12RST : 1; /// ADC reset
						uint32_t RCC_AHB2RSTR_1_ADC345RST_ : 1; /// SAR ADC345 interface reset
						uint32_t                  : 1;
						uint32_t RCC_AHB2RSTR_1_DAC1RST_ : 1; /// DAC1 interface reset
						uint32_t RCC_AHB2RSTR_1_HASHRST : 1; /// Hash reset
						uint32_t RCC_AHB2RSTR_1_RNGRST : 1; /// Random number generator reset
						uint32_t                  : 5;
						uint32_t RCC_AHB2RSTR_1_CRYPTRST : 1; /// Cryptography module reset
						uint32_t                  : 7;
					};
					#endif
					#ifdef RCC_AHB2RSTR_2
					struct
					{
						uint32_t RCC_AHB2RSTR_2_DCMIRST : 1; /// Camera interface reset
						uint32_t                  : 3;
						uint32_t RCC_AHB2RSTR_2_CRYPRST : 1; /// Cryptographic module reset
						uint32_t RCC_AHB2RSTR_2_HSAHRST : 1; /// Hash module reset
						uint32_t                  : 10;
						uint32_t RCC_AHB2RSTR_2_AES1RST : 1; /// AES1 hardware accelerator reset
						uint32_t RCC_AHB2RSTR_2_HASH1RST : 1; /// Hash reset
						uint32_t                  : 8;
						uint32_t RCC_AHB2RSTR_2_RNGRST : 1; /// Random Number Generator module reset
						uint32_t                  : 5;
					};
					#endif
					#ifdef RCC_AHB2RSTR_3
					struct
					{
						uint32_t                  : 4;
						uint32_t AESRST           : 1; /// AES module reset
						uint32_t                  : 27;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_AHB4RSTR
			struct AHB4RSTR_t: public Reg32_t /// RCC AHB4 Peripheral Reset Register
			{
				using Reg32_t::operator=;
				uint32_t GPIOARST         : 1; /// GPIO block reset
				uint32_t GPIOBRST         : 1; /// GPIO block reset
				uint32_t GPIOCRST         : 1; /// GPIO block reset
				uint32_t GPIODRST         : 1; /// GPIO block reset
				uint32_t GPIOERST         : 1; /// GPIO block reset
				uint32_t GPIOFRST         : 1; /// GPIO block reset
				uint32_t GPIOGRST         : 1; /// GPIO block reset
				uint32_t GPIOHRST         : 1; /// GPIO block reset
				uint32_t GPIOIRST         : 1; /// GPIO block reset
				uint32_t GPIOJRST         : 1; /// GPIO block reset
				uint32_t GPIOKRST         : 1; /// GPIO block reset
				uint32_t                  : 8;
				uint32_t CRCRST           : 1; /// CRC block reset
				uint32_t                  : 1;
				uint32_t BDMARST          : 1; /// BDMA block reset
				uint32_t                  : 2;
				uint32_t ADC3RST          : 1; /// ADC3 block reset
				uint32_t HSEMRST          : 1; /// HSEM block reset
				uint32_t                  : 6;
				
			};
			#endif
			#ifdef RCC_APB3RSTR
			struct APB3RSTR_t: public Reg32_t /// RCC APB3 Peripheral Reset Register
			{
				using Reg32_t::operator=;
				uint32_t RCC_APB3RSTR_RFRST : 1; /// Radio system BLE reset
				uint32_t                  : 2;
				uint32_t RCC_APB3RSTR_LTDCRST : 1; /// LTDC block reset
				uint32_t RCC_APB3RSTR_DSIRST : 1; /// DSI block reset
				uint32_t                  : 27;
				
			};
			#endif
			#ifdef RCC_APB1LRSTR
			struct APB1LRSTR_t: public Reg32_t /// RCC APB1 Peripheral Reset Register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t TIM2RST          : 1; /// TIM block reset
						uint32_t TIM3RST          : 1; /// TIM block reset
						uint32_t TIM4RST          : 1; /// TIM block reset
						uint32_t TIM5RST          : 1; /// TIM block reset
						uint32_t TIM6RST          : 1; /// TIM block reset
						uint32_t TIM7RST          : 1; /// TIM block reset
						uint32_t TIM12RST         : 1; /// TIM block reset
						uint32_t TIM13RST         : 1; /// TIM block reset
						uint32_t TIM14RST         : 1; /// TIM block reset
						uint32_t LPTIM1RST        : 1; /// TIM block reset
						uint32_t                  : 4;
						uint32_t SPI2RST          : 1; /// SPI2 block reset
						uint32_t SPI3RST          : 1; /// SPI3 block reset
						uint32_t SPDIFRXRST       : 1; /// SPDIFRX block reset
						uint32_t USART2RST        : 1; /// USART2 block reset
						uint32_t USART3RST        : 1; /// USART3 block reset
						uint32_t UART4RST         : 1; /// UART4 block reset
						uint32_t UART5RST         : 1; /// UART5 block reset
						uint32_t I2C1RST          : 1; /// I2C1 block reset
						uint32_t I2C2RST          : 1; /// I2C2 block reset
						uint32_t I2C3RST          : 1; /// I2C3 block reset
						uint32_t                  : 3;
						uint32_t RCC_APB1LRSTR_0_HDMICECRST : 1; /// HDMI-CEC block reset
						uint32_t                  : 1;
						uint32_t DAC12RST         : 1; /// DAC1 and 2 Blocks Reset
						uint32_t USART7RST        : 1; /// USART7 block reset
						uint32_t USART8RST        : 1; /// USART8 block reset
					};
					#ifdef RCC_APB1LRSTR_1
					struct
					{
						uint32_t                  : 27;
						uint32_t CECRST           : 1; /// HDMI-CEC block reset
						uint32_t                  : 4;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_APB1HRSTR
			struct APB1HRSTR_t: public Reg32_t /// RCC APB1 Peripheral Reset Register
			{
				using Reg32_t::operator=;
				uint32_t                  : 1;
				uint32_t CRSRST           : 1; /// Clock Recovery System reset
				uint32_t SWPRST           : 1; /// SWPMI block reset
				uint32_t                  : 1;
				uint32_t OPAMPRST         : 1; /// OPAMP block reset
				uint32_t MDIOSRST         : 1; /// MDIOS block reset
				uint32_t                  : 2;
				uint32_t FDCANRST         : 1; /// FDCAN block reset
				uint32_t                  : 23;
				
			};
			#endif
			#ifdef RCC_APB2RSTR
			struct APB2RSTR_t: public Reg32_t /// RCC APB2 Peripheral Reset Register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t RCC_APB2RSTR_0_TIM1RST : 1; /// TIM1 block reset
						uint32_t RCC_APB2RSTR_0_TIM8RST : 1; /// TIM8 block reset
						uint32_t RCC_APB2RSTR_0_TIM21RST : 1; /// TIM21 timer reset
						uint32_t RCC_APB2RSTR_0_TM10RST : 1;
						uint32_t RCC_APB2RSTR_0_USART1RST : 1; /// USART1 block reset
						uint32_t RCC_APB2RSTR_0_USART6RST : 1; /// USART6 block reset
						uint32_t RCC_APB2RSTR_0_USART9RST : 1; /// USART9 reset
						uint32_t RCC_APB2RSTR_0_SDMMC2RST : 1; /// SDMMC2 reset
						uint32_t RCC_APB2RSTR_0_ADCRST : 1; /// ADC interface reset (common to all ADCs)
						uint32_t RCC_APB2RSTR_0_ADC1RST : 1;
						uint32_t RCC_APB2RSTR_0_SDMMCRST : 1; /// SDMMC reset
						uint32_t RCC_APB2RSTR_0_SDMMC1RST : 1; /// SDMMC1 reset
						uint32_t SPI1RST          : 1; /// SPI1 block reset
						uint32_t RCC_APB2RSTR_0_SPI4RST : 1; /// SPI4 block reset
						uint32_t RCC_APB2RSTR_0_SYSCFGRST : 1; /// System configuration controller reset
						uint32_t                  : 1;
						uint32_t RCC_APB2RSTR_0_TIM15RST : 1; /// TIM15 block reset
						uint32_t RCC_APB2RSTR_0_TIM16RST : 1; /// TIM16 block reset
						uint32_t RCC_APB2RSTR_0_TIM17RST : 1; /// TIM17 block reset
						uint32_t RCC_APB2RSTR_0_TIM19RST : 1; /// TIM19 timer reset
						uint32_t RCC_APB2RSTR_0_SPI5RST : 1; /// SPI5 block reset
						uint32_t RCC_APB2RSTR_0_SPI6RST : 1; /// SPI6 reset
						uint32_t RCC_APB2RSTR_0_SAI1RST : 1; /// SAI1 block reset
						uint32_t RCC_APB2RSTR_0_SAI2RST : 1; /// SAI2 block reset
						uint32_t RCC_APB2RSTR_0_SAI3RST : 1; /// SAI3 block reset
						uint32_t RCC_APB2RSTR_0_DFSDM2RST : 1; /// DFSDM2 reset
						uint32_t RCC_APB2RSTR_0_LTDCRST : 1; /// LCD-TFT reset
						uint32_t RCC_APB2RSTR_0_DSIRST : 1; /// DSI reset
						uint32_t RCC_APB2RSTR_0_DFSDM1RST : 1; /// DFSDM1 block reset
						uint32_t RCC_APB2RSTR_0_HRTIMRST : 1; /// HRTIM block reset
						uint32_t                  : 1;
						uint32_t RCC_APB2RSTR_0_USBPHYCRST : 1; /// USB OTG HS PHY controller reset
					};
					#ifdef RCC_APB2RSTR_1
					struct
					{
						uint32_t RCC_APB2RSTR_1_SYSCFGRST : 1; /// System configuration (SYSCFG) reset
						uint32_t                  : 3;
						uint32_t RCC_APB2RSTR_1_TM11RST : 1;
						uint32_t RCC_APB2RSTR_1_TM12RST : 1; /// TIM22 timer reset
						uint32_t                  : 1;
						uint32_t RCC_APB2RSTR_1_SART10RST : 1; /// USART10 reset
						uint32_t                  : 1;
						uint32_t RCC_APB2RSTR_1_ADCRST : 1; /// ADC interface reset
						uint32_t                  : 1;
						uint32_t RCC_APB2RSTR_1_TIM1RST : 1; /// TIM1 timer reset
						uint32_t                  : 1;
						uint32_t RCC_APB2RSTR_1_TIM8RST : 1; /// TIM8 timer reset
						uint32_t RCC_APB2RSTR_1_USART1RST : 1; /// USART1 reset
						uint32_t RCC_APB2RSTR_1_SPI4RST : 1; /// SPI 4 reset
						uint32_t RCC_APB2RSTR_1_TIM9RST : 1; /// TIM9 reset
						uint32_t RCC_APB2RSTR_1_TIM10RST : 1; /// TIM10 reset
						uint32_t RCC_APB2RSTR_1_TIM11RST : 1; /// TIM11 reset
						uint32_t                  : 1;
						uint32_t RCC_APB2RSTR_1_TIM20RST : 1; /// Timer 20 reset
						uint32_t RCC_APB2RSTR_1_SAI1RST : 1; /// Serial audio interface 1 (SAI1) reset
						uint32_t RCC_APB2RSTR_1_SAI2RST : 1; /// Serial audio interface 2 (SAI2) reset
						uint32_t                  : 1;
						uint32_t RCC_APB2RSTR_1_DFSDM1RST : 1; /// Digital filters for sigma-delata modulators (DFSDM) reset
						uint32_t RCC_APB2RSTR_1_SDAD2RST : 1; /// SDADC2 (Sigma delta ADC 2) reset
						uint32_t RCC_APB2RSTR_1_HRTIM1RST : 1; /// HRTIMER reset
						uint32_t                  : 5;
					};
					#endif
					#ifdef RCC_APB2RSTR_2
					struct
					{
						uint32_t                  : 2;
						uint32_t RCC_APB2RSTR_2_TIM9RST : 1;
						uint32_t                  : 2;
						uint32_t RCC_APB2RSTR_2_TIM22RST : 1; /// TIM22 timer reset
						uint32_t                  : 5;
						uint32_t RCC_APB2RSTR_2_SDIORST : 1; /// SDIO reset
						uint32_t                  : 10;
						uint32_t RCC_APB2RSTR_2_DBGMCURST : 1; /// Debug MCU reset
						uint32_t                  : 1;
						uint32_t RCC_APB2RSTR_2_DFSDMRST : 1; /// Digital filters for sigma-delata modulators (DFSDM) reset
						uint32_t                  : 1;
						uint32_t RCC_APB2RSTR_2_SDAD3RST : 1; /// SDADC3 (Sigma delta ADC 3) reset
						uint32_t                  : 2;
						uint32_t RCC_APB2RSTR_2_HRTIM1RST : 1; /// HRTIM1 reset
						uint32_t                  : 2;
					};
					#endif
					#ifdef RCC_APB2RSTR_3
					struct
					{
						uint32_t                  : 22;
						uint32_t RCC_APB2RSTR_3_DBGRST : 1; /// DBG reset
						uint32_t                  : 1;
						uint32_t RCC_APB2RSTR_3_SDAD1RST : 1; /// SDADC1 (Sigma delta ADC 1) reset
						uint32_t                  : 7;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_APB4RSTR
			struct APB4RSTR_t: public Reg32_t /// RCC APB4 Peripheral Reset Register
			{
				using Reg32_t::operator=;
				uint32_t                  : 1;
				uint32_t SYSCFGRST        : 1; /// SYSCFG block reset
				uint32_t                  : 1;
				uint32_t LPUART1RST       : 1; /// LPUART1 block reset
				uint32_t                  : 1;
				uint32_t SPI6RST          : 1; /// SPI6 block reset
				uint32_t                  : 1;
				uint32_t I2C4RST          : 1; /// I2C4 block reset
				uint32_t                  : 1;
				uint32_t LPTIM2RST        : 1; /// LPTIM2 block reset
				uint32_t LPTIM3RST        : 1; /// LPTIM3 block reset
				uint32_t LPTIM4RST        : 1; /// LPTIM4 block reset
				uint32_t LPTIM5RST        : 1; /// LPTIM5 block reset
				uint32_t                  : 1;
				uint32_t COMP12RST        : 1; /// COMP12 Blocks Reset
				uint32_t VREFRST          : 1; /// VREF block reset
				uint32_t                  : 5;
				uint32_t SAI4RST          : 1; /// SAI4 block reset
				uint32_t                  : 10;
				
			};
			#endif
			#ifdef RCC_GCR
			struct GCR_t: public Reg32_t /// RCC Global Control Register
			{
				using Reg32_t::operator=;
				uint32_t WW1RSC           : 1; /// WWDG1 reset scope control
				uint32_t RCC_GCR_WW2RSC   : 1; /// WWDG2 reset scope control
				uint32_t RCC_GCR_BOOT_C1  : 1; /// Allows CPU1 to boot
				uint32_t RCC_GCR_BOOT_C2  : 1; /// Allows CPU2 to boot
				uint32_t                  : 28;
				
			};
			#endif
			#ifdef RCC_D3AMR
			struct D3AMR_t: public Reg32_t /// RCC D3 Autonomous mode Register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t BDMAAMEN         : 1; /// BDMA and DMAMUX Autonomous mode enable
						uint32_t                  : 2;
						uint32_t LPUART1AMEN      : 1; /// LPUART1 Autonomous mode enable
						uint32_t                  : 1;
						uint32_t SPI6AMEN         : 1; /// SPI6 Autonomous mode enable
						uint32_t                  : 1;
						uint32_t I2C4AMEN         : 1; /// I2C4 Autonomous mode enable
						uint32_t                  : 1;
						uint32_t LPTIM2AMEN       : 1; /// LPTIM2 Autonomous mode enable
						uint32_t LPTIM3AMEN       : 1; /// LPTIM3 Autonomous mode enable
						uint32_t LPTIM4AMEN       : 1; /// LPTIM4 Autonomous mode enable
						uint32_t LPTIM5AMEN       : 1; /// LPTIM5 Autonomous mode enable
						uint32_t                  : 1;
						uint32_t COMP12AMEN       : 1; /// COMP12 Autonomous mode enable
						uint32_t VREFAMEN         : 1; /// VREF Autonomous mode enable
						uint32_t RTCAMEN          : 1; /// RTC Autonomous mode enable
						uint32_t                  : 2;
						uint32_t CRCAMEN          : 1; /// CRC Autonomous mode enable
						uint32_t                  : 1;
						uint32_t SAI4AMEN         : 1; /// SAI4 Autonomous mode enable
						uint32_t                  : 2;
						uint32_t ADC3AMEN         : 1; /// ADC3 Autonomous mode enable
						uint32_t                  : 3;
						uint32_t RCC_D3AMR_0_BKPSRAMAMEN : 1; /// Backup RAM Autonomous mode enable
						uint32_t SRAM4AMEN        : 1; /// SRAM4 Autonomous mode enable
						uint32_t                  : 2;
					};
					#ifdef RCC_D3AMR_1
					struct
					{
						uint32_t                  : 28;
						uint32_t BKPRAMAMEN       : 1; /// Backup RAM Autonomous mode enable
						uint32_t                  : 3;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_xRSR
			struct xRSR_t: public Reg32_t /// RCC Reset Status Register
			{
				using Reg32_t::operator=;
				uint32_t                  : 16;
				uint32_t RMVF             : 1; /// Remove reset flag
				uint32_t CPURSTF          : 1; /// CPU reset flag
				uint32_t                  : 1;
				uint32_t D1RSTF           : 1; /// D1 domain power switch reset flag
				uint32_t D2RSTF           : 1; /// D2 domain power switch reset flag
				uint32_t BORRSTF          : 1; /// BOR reset flag
				uint32_t PINRSTF          : 1; /// Pin reset flag (NRST)
				uint32_t PORRSTF          : 1; /// POR/PDR reset flag
				uint32_t SFTRSTF          : 1; /// System reset from CPU reset flag
				uint32_t                  : 1;
				uint32_t IWDG1RSTF        : 1; /// Independent Watchdog reset flag
				uint32_t                  : 1;
				uint32_t WWDG1RSTF        : 1; /// Window Watchdog reset flag
				uint32_t                  : 1;
				uint32_t LPWRRSTF         : 1; /// Reset due to illegal D1 DStandby or CPU CStop flag
				uint32_t                  : 1;
				
			};
			#endif
			#ifdef RCC_AHB1ENR
			struct AHB1ENR_t: public Reg32_t /// RCC AHB1 Clock Register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t RCC_AHB1ENR_0_DMA1EN : 1; /// DMA1 Clock Enable
						uint32_t RCC_AHB1ENR_0_DMA2EN : 1; /// DMA2 Clock Enable
						uint32_t RCC_AHB1ENR_0_DMAMUX1EN : 1; /// DMAMUX clock enable
						uint32_t RCC_AHB1ENR_0_GPIODEN : 1; /// IO port D clock enable
						uint32_t RCC_AHB1ENR_0_GPIOEEN : 1; /// IO port E clock enable
						uint32_t RCC_AHB1ENR_0_ADC12EN : 1; /// ADC1/2 Peripheral Clocks Enable
						uint32_t RCC_AHB1ENR_0_GPIOGEN : 1; /// IO port G clock enable
						uint32_t RCC_AHB1ENR_0_GPIOHEN : 1; /// IO port H clock enable
						uint32_t RCC_AHB1ENR_0_FLASHEN : 1; /// Flash memory interface clock enable
						uint32_t RCC_AHB1ENR_0_GPIOJEN : 1; /// IO port J clock enable
						uint32_t RCC_AHB1ENR_0_GPIOKEN : 1; /// IO port K clock enable
						uint32_t                  : 1;
						uint32_t RCC_AHB1ENR_0_CRCEN : 1; /// CRC clock enable
						uint32_t                  : 1;
						uint32_t RCC_AHB1ENR_0_ARTEN : 1; /// ART Clock Enable
						uint32_t RCC_AHB1ENR_0_ETH1MACEN : 1; /// Ethernet MAC bus interface Clock Enable
						uint32_t RCC_AHB1ENR_0_ETH1TXEN : 1; /// Ethernet Transmission Clock Enable
						uint32_t RCC_AHB1ENR_0_ETH1RXEN : 1; /// Ethernet Reception Clock Enable
						uint32_t RCC_AHB1ENR_0_USB2OTGHSULPIEN : 1; /// Enable USB_PHY2 clocks
						uint32_t                  : 1;
						uint32_t RCC_AHB1ENR_0_CCMDATARAMEN : 1; /// CCM data RAM clock enable
						uint32_t                  : 2;
						uint32_t RCC_AHB1ENR_0_DMA2DEN : 1; /// DMA2D clock enable
						uint32_t                  : 1;
						uint32_t RCC_AHB1ENR_0_USB1OTGHEN : 1; /// USB1OTG Peripheral Clocks Enable
						uint32_t RCC_AHB1ENR_0_USB1OTGHSULPIEN : 1; /// USB_PHY1 Clocks Enable
						uint32_t RCC_AHB1ENR_0_USB2OTGHSEN : 1; /// USB2OTG Peripheral Clocks Enable
						uint32_t RCC_AHB1ENR_0_USB2ULPIEN : 1; /// USB_PHY2 Clocks Enable
						uint32_t RCC_AHB1ENR_0_OTGHSEN : 1; /// USB OTG HS clock enable
						uint32_t RCC_AHB1ENR_0_OTGHSULPIEN : 1; /// USB OTG HSULPI clock enable
						uint32_t RCC_AHB1ENR_0_RNGEN : 1; /// RNG clock enable
					};
					#ifdef RCC_AHB1ENR_1
					struct
					{
						uint32_t RCC_AHB1ENR_1_GPIOAEN : 1; /// IO port A clock enable
						uint32_t RCC_AHB1ENR_1_GPIOBEN : 1; /// IO port B clock enable
						uint32_t RCC_AHB1ENR_1_GPIOCEN : 1; /// IO port C clock enable
						uint32_t RCC_AHB1ENR_1_CORDICEN : 1; /// CORDIC clock enable
						uint32_t RCC_AHB1ENR_1_FMACEN : 1; /// FMAC clock enable
						uint32_t RCC_AHB1ENR_1_GPIOFEN : 1; /// IO port F clock enable
						uint32_t                  : 2;
						uint32_t RCC_AHB1ENR_1_GPIOIEN : 1; /// IO port I clock enable
						uint32_t                  : 2;
						uint32_t RCC_AHB1ENR_1_CRCEN : 1; /// CRC clock enable
						uint32_t                  : 4;
						uint32_t RCC_AHB1ENR_1_TSCEN : 1; /// Touch Sensing Controller clock enable
						uint32_t RCC_AHB1ENR_1_DMA2DEN : 1; /// DMA2D clock enable
						uint32_t RCC_AHB1ENR_1_GFXMMUEN : 1; /// Graphic MMU clock enable
						uint32_t                  : 1;
						uint32_t RCC_AHB1ENR_1_DTCMRAMEN : 1; /// CCM data RAM clock enable
						uint32_t RCC_AHB1ENR_1_DMA1EN : 1; /// DMA1 clock enable
						uint32_t RCC_AHB1ENR_1_DMA2EN : 1; /// DMA2 clock enable
						uint32_t                  : 2;
						uint32_t RCC_AHB1ENR_1_USB1OTGEN : 1; /// USB1OTG Peripheral Clocks Enable
						uint32_t RCC_AHB1ENR_1_USB1ULPIEN : 1; /// USB_PHY1 Clocks Enable
						uint32_t RCC_AHB1ENR_1_USB2OTGEN : 1; /// USB2OTG Peripheral Clocks Enable
						uint32_t RCC_AHB1ENR_1_ETHMACPTPEN : 1; /// Ethernet PTP clock enable
						uint32_t                  : 3;
					};
					#endif
					#ifdef RCC_AHB1ENR_2
					struct
					{
						uint32_t                  : 2;
						uint32_t RCC_AHB1ENR_2_DMAMUXEN : 1; /// DMAMUX clock enable
						uint32_t                  : 5;
						uint32_t RCC_AHB1ENR_2_FLITFEN : 1; /// FLITF clock enable
						uint32_t                  : 9;
						uint32_t RCC_AHB1ENR_2_BKPSRAMEN : 1; /// Backup SRAM interface clock enable
						uint32_t                  : 6;
						uint32_t RCC_AHB1ENR_2_ETHMACEN : 1; /// Ethernet MAC clock enable
						uint32_t RCC_AHB1ENR_2_ETHMACTXEN : 1; /// Ethernet Transmission clock enable
						uint32_t RCC_AHB1ENR_2_ETHMACRXEN : 1; /// Ethernet Reception clock enable
						uint32_t                  : 4;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_C1_AHB1ENR
			struct C1_AHB1ENR_t: public Reg32_t /// RCC AHB1 Clock Register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t DMA1EN           : 1; /// DMA1 Clock Enable
						uint32_t DMA2EN           : 1; /// DMA2 Clock Enable
						uint32_t                  : 3;
						uint32_t ADC12EN          : 1; /// ADC1/2 Peripheral Clocks Enable
						uint32_t                  : 8;
						uint32_t RCC_C1_AHB1ENR_0_ARTEN : 1; /// ART Clock Enable
						uint32_t ETH1MACEN        : 1; /// Ethernet MAC bus interface Clock Enable
						uint32_t ETH1TXEN         : 1; /// Ethernet Transmission Clock Enable
						uint32_t ETH1RXEN         : 1; /// Ethernet Reception Clock Enable
						uint32_t                  : 7;
						uint32_t RCC_C1_AHB1ENR_0_USB1OTGHSEN : 1; /// USB1OTG Peripheral Clocks Enable
						uint32_t RCC_C1_AHB1ENR_0_USB1OTGHSULPIEN : 1; /// USB_PHY1 Clocks Enable
						uint32_t RCC_C1_AHB1ENR_0_USB2OTGHSEN : 1; /// USB2OTG Peripheral Clocks Enable
						uint32_t RCC_C1_AHB1ENR_0_USB2ULPIEN : 1; /// USB_PHY2 Clocks Enable
						uint32_t                  : 3;
					};
					#ifdef RCC_C1_AHB1ENR_1
					struct
					{
						uint32_t                  : 25;
						uint32_t USB1OTGEN        : 1; /// USB1OTG Peripheral Clocks Enable
						uint32_t USB1ULPIEN       : 1; /// USB_PHY1 Clocks Enable
						uint32_t USB2OTGEN        : 1; /// USB2OTG Peripheral Clocks Enable
						uint32_t                  : 4;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_AHB2ENR
			struct AHB2ENR_t: public Reg32_t /// RCC AHB2 Clock Register
			{
				using Reg32_t::operator=;
				union
				{
					#ifdef RCC_AHB2ENR_0
					struct
					{
						uint32_t RCC_AHB2ENR_0_CAMITFEN : 1; /// CAMITF peripheral clock enable
						uint32_t RCC_AHB2ENR_0_GPIOBEN : 1; /// IO port B clock enable
						uint32_t RCC_AHB2ENR_0_GPIOCEN : 1; /// IO port C clock enable
						uint32_t RCC_AHB2ENR_0_GPIODEN : 1; /// IO port D clock enable
						uint32_t RCC_AHB2ENR_0_CRYPTEN : 1; /// CRYPT peripheral clock enable
						uint32_t RCC_AHB2ENR_0_HASHEN : 1; /// HASH peripheral clock enable
						uint32_t RCC_AHB2ENR_0_RNGEN : 1; /// RNG peripheral clocks enable
						uint32_t RCC_AHB2ENR_0_GPIOHEN : 1; /// IO port H clock enable
						uint32_t RCC_AHB2ENR_0_GPIOIEN : 1; /// IO port I clock enable
						uint32_t RCC_AHB2ENR_0_SDMMC2EN : 1; /// SDMMC2 and SDMMC2 delay clock enable
						uint32_t                  : 2;
						uint32_t RCC_AHB2ENR_0_OTGFSEN : 1; /// OTG full speed clock enable
						uint32_t RCC_AHB2ENR_0_ADCEN : 1; /// ADC clock enable
						uint32_t RCC_AHB2ENR_0_DCMIEN : 1; /// DCMI clock enable
						uint32_t                  : 1;
						uint32_t RCC_AHB2ENR_0_AESEN : 1; /// AES accelerator clock enable
						uint32_t RCC_AHB2ENR_0_DAC2 : 1; /// HASH clock enable
						uint32_t RCC_AHB2ENR_0_DAC3 : 1; /// Random Number Generator clock enable
						uint32_t RCC_AHB2ENR_0_DAC4 : 1; /// DAC4 clock enable
						uint32_t RCC_AHB2ENR_0_OSPIMEN : 1; /// OctoSPI IO manager clock enable
						uint32_t                  : 1;
						uint32_t RCC_AHB2ENR_0_SDMMC1EN : 1; /// SDMMC1 clock enable
						uint32_t                  : 6;
						uint32_t RCC_AHB2ENR_0_SRAM1EN : 1; /// SRAM1 block enable
						uint32_t RCC_AHB2ENR_0_SRAM2EN : 1; /// SRAM2 block enable
						uint32_t RCC_AHB2ENR_0_SRAM3EN : 1; /// SRAM3 block enable
					};
					#endif
					#ifdef RCC_AHB2ENR_1
					struct
					{
						uint32_t RCC_AHB2ENR_1_GPIOAEN : 1; /// IO port A clock enable
						uint32_t                  : 3;
						uint32_t RCC_AHB2ENR_1_GPIOEEN : 1; /// IO port E clock enable
						uint32_t RCC_AHB2ENR_1_GPIOFEN : 1; /// IO port F clock enable
						uint32_t RCC_AHB2ENR_1_GPIOGEN : 1; /// IO port G clock enable
						uint32_t RCC_AHB2ENR_1_OTGFSEN : 1; /// USB OTG FS clock enable
						uint32_t                  : 5;
						uint32_t RCC_AHB2ENR_1_ADC12EN : 1; /// ADC clock enable
						uint32_t RCC_AHB2ENR_1_ADC345EN : 1; /// DCMI clock enable
						uint32_t                  : 1;
						uint32_t RCC_AHB2ENR_1_DAC1 : 1; /// AES accelerator clock enable
						uint32_t RCC_AHB2ENR_1_HASHEN : 1; /// HASH clock enable
						uint32_t RCC_AHB2ENR_1_RNGEN : 1; /// Random Number Generator clock enable
						uint32_t                  : 5;
						uint32_t RCC_AHB2ENR_1_CRYPTEN : 1; /// Cryptography clock enable
						uint32_t                  : 7;
					};
					#endif
					#ifdef RCC_AHB2ENR_2
					struct
					{
						uint32_t RCC_AHB2ENR_2_DCMIEN : 1; /// Camera interface enable
						uint32_t                  : 3;
						uint32_t RCC_AHB2ENR_2_CRYPEN : 1; /// Cryptographic modules clock enable
						uint32_t                  : 11;
						uint32_t RCC_AHB2ENR_2_AES1EN : 1; /// AES1 accelerator clock enable
						uint32_t RCC_AHB2ENR_2_HASH1EN : 1; /// HASH clock enable
						uint32_t                  : 8;
						uint32_t RCC_AHB2ENR_2_RNGEN : 1; /// Random Number Generator clock enable
						uint32_t                  : 5;
					};
					#endif
					#ifdef RCC_AHB2ENR_3
					struct
					{
						uint32_t                  : 4;
						uint32_t AESEN            : 1; /// AES module clock enable
						uint32_t                  : 27;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_AHB4ENR
			struct AHB4ENR_t: public Reg32_t /// RCC AHB4 Clock Register
			{
				using Reg32_t::operator=;
				uint32_t GPIOAEN          : 1; /// 0GPIO peripheral clock enable
				uint32_t GPIOBEN          : 1; /// 0GPIO peripheral clock enable
				uint32_t GPIOCEN          : 1; /// 0GPIO peripheral clock enable
				uint32_t GPIODEN          : 1; /// 0GPIO peripheral clock enable
				uint32_t GPIOEEN          : 1; /// 0GPIO peripheral clock enable
				uint32_t GPIOFEN          : 1; /// 0GPIO peripheral clock enable
				uint32_t GPIOGEN          : 1; /// 0GPIO peripheral clock enable
				uint32_t GPIOHEN          : 1; /// 0GPIO peripheral clock enable
				uint32_t GPIOIEN          : 1; /// 0GPIO peripheral clock enable
				uint32_t GPIOJEN          : 1; /// 0GPIO peripheral clock enable
				uint32_t GPIOKEN          : 1; /// 0GPIO peripheral clock enable
				uint32_t                  : 8;
				uint32_t CRCEN            : 1; /// CRC peripheral clock enable
				uint32_t                  : 1;
				uint32_t BDMAEN           : 1; /// BDMA and DMAMUX2 Clock Enable
				uint32_t                  : 2;
				uint32_t ADC3EN           : 1; /// ADC3 Peripheral Clocks Enable
				uint32_t HSEMEN           : 1; /// HSEM peripheral clock enable
				uint32_t                  : 2;
				uint32_t BKPRAMEN         : 1; /// Backup RAM Clock Enable
				uint32_t                  : 3;
				
			};
			#endif
			#ifdef RCC_APB3ENR
			struct APB3ENR_t: public Reg32_t /// RCC APB3 Clock Register
			{
				using Reg32_t::operator=;
				uint32_t                  : 3;
				uint32_t LTDCEN           : 1; /// LTDC peripheral clock enable
				uint32_t RCC_APB3ENR_DSIEN : 1; /// DSI Peripheral Clocks Enable
				uint32_t                  : 1;
				uint32_t WWDG1EN          : 1; /// WWDG1 Clock Enable
				uint32_t                  : 25;
				
			};
			#endif
			#ifdef RCC_APB1LENR
			struct APB1LENR_t: public Reg32_t /// RCC APB1 Clock Register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t TIM2EN           : 1; /// TIM peripheral clock enable
						uint32_t TIM3EN           : 1; /// TIM peripheral clock enable
						uint32_t TIM4EN           : 1; /// TIM peripheral clock enable
						uint32_t TIM5EN           : 1; /// TIM peripheral clock enable
						uint32_t TIM6EN           : 1; /// TIM peripheral clock enable
						uint32_t TIM7EN           : 1; /// TIM peripheral clock enable
						uint32_t TIM12EN          : 1; /// TIM peripheral clock enable
						uint32_t TIM13EN          : 1; /// TIM peripheral clock enable
						uint32_t TIM14EN          : 1; /// TIM peripheral clock enable
						uint32_t LPTIM1EN         : 1; /// LPTIM1 Peripheral Clocks Enable
						uint32_t                  : 1;
						uint32_t RCC_APB1LENR_0_WWDG2EN : 1; /// WWDG2 peripheral clock enable
						uint32_t                  : 2;
						uint32_t SPI2EN           : 1; /// SPI2 Peripheral Clocks Enable
						uint32_t SPI3EN           : 1; /// SPI3 Peripheral Clocks Enable
						uint32_t SPDIFRXEN        : 1; /// SPDIFRX Peripheral Clocks Enable
						uint32_t USART2EN         : 1; /// USART2 Peripheral Clocks Enable
						uint32_t USART3EN         : 1; /// USART3 Peripheral Clocks Enable
						uint32_t UART4EN          : 1; /// UART4 Peripheral Clocks Enable
						uint32_t UART5EN          : 1; /// UART5 Peripheral Clocks Enable
						uint32_t I2C1EN           : 1; /// I2C1 Peripheral Clocks Enable
						uint32_t I2C2EN           : 1; /// I2C2 Peripheral Clocks Enable
						uint32_t I2C3EN           : 1; /// I2C3 Peripheral Clocks Enable
						uint32_t                  : 3;
						uint32_t RCC_APB1LENR_0_HDMICECEN : 1; /// HDMI-CEC peripheral clock enable
						uint32_t                  : 1;
						uint32_t DAC12EN          : 1; /// DAC1&2 peripheral clock enable
						uint32_t USART7EN         : 1; /// USART7 Peripheral Clocks Enable
						uint32_t USART8EN         : 1; /// USART8 Peripheral Clocks Enable
					};
					#ifdef RCC_APB1LENR_1
					struct
					{
						uint32_t                  : 27;
						uint32_t CECEN            : 1; /// HDMI-CEC peripheral clock enable
						uint32_t                  : 4;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_C1_APB1LENR
			struct C1_APB1LENR_t: public Reg32_t /// RCC APB1 Clock Register
			{
				using Reg32_t::operator=;
				uint32_t TIM2EN           : 1; /// TIM peripheral clock enable
				uint32_t TIM3EN           : 1; /// TIM peripheral clock enable
				uint32_t TIM4EN           : 1; /// TIM peripheral clock enable
				uint32_t TIM5EN           : 1; /// TIM peripheral clock enable
				uint32_t TIM6EN           : 1; /// TIM peripheral clock enable
				uint32_t TIM7EN           : 1; /// TIM peripheral clock enable
				uint32_t TIM12EN          : 1; /// TIM peripheral clock enable
				uint32_t TIM13EN          : 1; /// TIM peripheral clock enable
				uint32_t TIM14EN          : 1; /// TIM peripheral clock enable
				uint32_t LPTIM1EN         : 1; /// LPTIM1 Peripheral Clocks Enable
				uint32_t                  : 4;
				uint32_t SPI2EN           : 1; /// SPI2 Peripheral Clocks Enable
				uint32_t SPI3EN           : 1; /// SPI3 Peripheral Clocks Enable
				uint32_t SPDIFRXEN        : 1; /// SPDIFRX Peripheral Clocks Enable
				uint32_t USART2EN         : 1; /// USART2 Peripheral Clocks Enable
				uint32_t USART3EN         : 1; /// USART3 Peripheral Clocks Enable
				uint32_t UART4EN          : 1; /// UART4 Peripheral Clocks Enable
				uint32_t UART5EN          : 1; /// UART5 Peripheral Clocks Enable
				uint32_t I2C1EN           : 1; /// I2C1 Peripheral Clocks Enable
				uint32_t I2C2EN           : 1; /// I2C2 Peripheral Clocks Enable
				uint32_t I2C3EN           : 1; /// I2C3 Peripheral Clocks Enable
				uint32_t                  : 3;
				uint32_t HDMICECEN        : 1; /// HDMI-CEC peripheral clock enable
				uint32_t                  : 1;
				uint32_t DAC12EN          : 1; /// DAC1&2 peripheral clock enable
				uint32_t USART7EN         : 1; /// USART7 Peripheral Clocks Enable
				uint32_t USART8EN         : 1; /// USART8 Peripheral Clocks Enable
				
			};
			#endif
			#ifdef RCC_APB1HENR
			struct APB1HENR_t: public Reg32_t /// RCC APB1 Clock Register
			{
				using Reg32_t::operator=;
				uint32_t                  : 1;
				uint32_t CRSEN            : 1; /// Clock Recovery System peripheral clock enable
				uint32_t SWPEN            : 1; /// SWPMI Peripheral Clocks Enable
				uint32_t                  : 1;
				uint32_t OPAMPEN          : 1; /// OPAMP peripheral clock enable
				uint32_t MDIOSEN          : 1; /// MDIOS peripheral clock enable
				uint32_t                  : 2;
				uint32_t FDCANEN          : 1; /// FDCAN Peripheral Clocks Enable
				uint32_t                  : 23;
				
			};
			#endif
			#ifdef RCC_APB2ENR
			struct APB2ENR_t: public Reg32_t /// RCC APB2 Clock Register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t RCC_APB2ENR_0_TIM1EN : 1; /// TIM1 peripheral clock enable
						uint32_t RCC_APB2ENR_0_TIM8EN : 1; /// TIM8 peripheral clock enable
						uint32_t RCC_APB2ENR_0_TIM21EN : 1; /// TIM21 timer clock enable bit
						uint32_t RCC_APB2ENR_0_TIM10EN : 1; /// TIM10 timer clock enable
						uint32_t RCC_APB2ENR_0_USART1EN : 1; /// USART1 Peripheral Clocks Enable
						uint32_t RCC_APB2ENR_0_USART6EN : 1; /// USART6 Peripheral Clocks Enable
						uint32_t                  : 1;
						uint32_t RCC_APB2ENR_0_FWEN : 1; /// Firewall clock enable
						uint32_t RCC_APB2ENR_0_ADC1EN : 1; /// ADC1 clock enable
						uint32_t RCC_APB2ENR_0_ADC2EN : 1; /// ADC2 clock enable
						uint32_t RCC_APB2ENR_0_ADC3EN : 1; /// ADC3 clock enable
						uint32_t RCC_APB2ENR_0_SDMMC1EN : 1; /// SDMMC1 clock enable
						uint32_t SPI1EN           : 1; /// SPI1 Peripheral Clocks Enable
						uint32_t RCC_APB2ENR_0_SPI4EN : 1; /// SPI4 Peripheral Clocks Enable
						uint32_t RCC_APB2ENR_0_SYSCFGEN : 1; /// System configuration controller clock enable
						uint32_t RCC_APB2ENR_0_EXTITEN : 1; /// EXTI ans external IT clock enable
						uint32_t RCC_APB2ENR_0_TIM15EN : 1; /// TIM15 peripheral clock enable
						uint32_t RCC_APB2ENR_0_TIM16EN : 1; /// TIM16 peripheral clock enable
						uint32_t RCC_APB2ENR_0_TIM17EN : 1; /// TIM17 peripheral clock enable
						uint32_t RCC_APB2ENR_0_TIM19EN : 1; /// TIM19 timer clock enable
						uint32_t RCC_APB2ENR_0_SPI5EN : 1; /// SPI5 Peripheral Clocks Enable
						uint32_t RCC_APB2ENR_0_SPI6ENR : 1; /// SPI6 clock enable
						uint32_t RCC_APB2ENR_0_SAI1EN : 1; /// SAI1 Peripheral Clocks Enable
						uint32_t RCC_APB2ENR_0_SAI2EN : 1; /// SAI2 Peripheral Clocks Enable
						uint32_t RCC_APB2ENR_0_SAI3EN : 1; /// SAI3 Peripheral Clocks Enable
						uint32_t RCC_APB2ENR_0_DFSDM2EN : 1; /// DFSDM2 clock enable
						uint32_t RCC_APB2ENR_0_LTDCEN : 1; /// LCD-TFT clock enable
						uint32_t RCC_APB2ENR_0_DSIEN : 1; /// DSI clock enable
						uint32_t RCC_APB2ENR_0_DFSDM1EN : 1; /// DFSDM1 Peripheral Clocks Enable
						uint32_t RCC_APB2ENR_0_HRTIMEN : 1; /// HRTIM peripheral clock enable
						uint32_t                  : 1;
						uint32_t RCC_APB2ENR_0_USBPHYCEN : 1; /// USB OTG HS PHY controller clock enable
					};
					#ifdef RCC_APB2ENR_1
					struct
					{
						uint32_t RCC_APB2ENR_1_SYSCFGEN : 1; /// SYSCFG clock enable
						uint32_t                  : 4;
						uint32_t RCC_APB2ENR_1_TIM22EN : 1; /// TIM22 timer clock enable bit
						uint32_t                  : 1;
						uint32_t RCC_APB2ENR_1_FIREWALLEN : 1; /// Firewall clock enable
						uint32_t                  : 1;
						uint32_t RCC_APB2ENR_1_ADCEN : 1; /// ADC 1 interface clock enable
						uint32_t RCC_APB2ENR_1_SDMMCEN : 1; /// SDMMC clock enable
						uint32_t RCC_APB2ENR_1_TIM1EN : 1; /// TIM1 timer clock enable
						uint32_t                  : 1;
						uint32_t RCC_APB2ENR_1_TIM8EN : 1; /// TIM8 timer clock enable
						uint32_t RCC_APB2ENR_1_USART1EN : 1; /// USART1clock enable
						uint32_t RCC_APB2ENR_1_SPI4EN : 1; /// SPI 4 clock enable
						uint32_t RCC_APB2ENR_1_TIM9EN : 1; /// TIM9 clock enable
						uint32_t RCC_APB2ENR_1_TIM10EN : 1; /// TIM10 clock enable
						uint32_t RCC_APB2ENR_1_TIM11EN : 1; /// TIM11 clock enable
						uint32_t                  : 1;
						uint32_t RCC_APB2ENR_1_SPI5ENR : 1; /// SPI5 clock enable
						uint32_t RCC_APB2ENR_1_SAI1EN : 1; /// SAI1 clock enable
						uint32_t RCC_APB2ENR_1_SAI2EN : 1; /// SAI2 clock enable
						uint32_t                  : 1;
						uint32_t RCC_APB2ENR_1_DFSDM1EN : 1; /// DFSDM timer clock enable
						uint32_t RCC_APB2ENR_1_SDAD2EN : 1; /// SDADC2 (Sigma Delta ADC 2) clock enable
						uint32_t RCC_APB2ENR_1_HRTIMEREN : 1; /// HRTIMER clock enable
						uint32_t                  : 2;
						uint32_t RCC_APB2ENR_1_HRTIM1EN : 1; /// HRTIM1 clock enable
						uint32_t                  : 2;
					};
					#endif
					#ifdef RCC_APB2ENR_2
					struct
					{
						uint32_t                  : 2;
						uint32_t RCC_APB2ENR_2_TIM9EN : 1; /// TIM9 timer clock enable
						uint32_t                  : 1;
						uint32_t RCC_APB2ENR_2_TIM11EN : 1; /// TIM11 timer clock enable
						uint32_t                  : 2;
						uint32_t RCC_APB2ENR_2_SDMMC2EN : 1; /// SDMMC2 clock enable
						uint32_t                  : 1;
						uint32_t RCC_APB2ENR_2_ADC1EN : 1; /// ADC1 interface clock enable
						uint32_t                  : 1;
						uint32_t RCC_APB2ENR_2_SDIOEN : 1; /// SDIO clock enable
						uint32_t                  : 1;
						uint32_t RCC_APB2ENR_2_SPI4ENR : 1; /// SPI4 clock enable
						uint32_t                  : 6;
						uint32_t RCC_APB2ENR_2_TIM20EN : 1; /// Timer 20 clock enable
						uint32_t                  : 1;
						uint32_t RCC_APB2ENR_2_DBGMCUEN : 1; /// MCU debug module clock enable
						uint32_t                  : 1;
						uint32_t RCC_APB2ENR_2_DFSDMEN : 1; /// DFSDM timer clock enable
						uint32_t                  : 1;
						uint32_t RCC_APB2ENR_2_SDAD3EN : 1; /// SDADC3 (Sigma Delta ADC 3) clock enable
						uint32_t                  : 5;
					};
					#endif
					#ifdef RCC_APB2ENR_3
					struct
					{
						uint32_t                  : 7;
						uint32_t RCC_APB2ENR_3_MIFIEN : 1; /// MiFaRe Firewall clock enable bit
						uint32_t                  : 14;
						uint32_t RCC_APB2ENR_3_DBGEN : 1; /// DBG clock enable bit
						uint32_t                  : 1;
						uint32_t RCC_APB2ENR_3_SDAD1EN : 1; /// SDADC1 (Sigma Delta ADC 1) clock enable
						uint32_t                  : 7;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_APB4ENR
			struct APB4ENR_t: public Reg32_t /// RCC APB4 Clock Register
			{
				using Reg32_t::operator=;
				uint32_t                  : 1;
				uint32_t SYSCFGEN         : 1; /// SYSCFG peripheral clock enable
				uint32_t                  : 1;
				uint32_t LPUART1EN        : 1; /// LPUART1 Peripheral Clocks Enable
				uint32_t                  : 1;
				uint32_t SPI6EN           : 1; /// SPI6 Peripheral Clocks Enable
				uint32_t                  : 1;
				uint32_t I2C4EN           : 1; /// I2C4 Peripheral Clocks Enable
				uint32_t                  : 1;
				uint32_t LPTIM2EN         : 1; /// LPTIM2 Peripheral Clocks Enable
				uint32_t LPTIM3EN         : 1; /// LPTIM3 Peripheral Clocks Enable
				uint32_t LPTIM4EN         : 1; /// LPTIM4 Peripheral Clocks Enable
				uint32_t LPTIM5EN         : 1; /// LPTIM5 Peripheral Clocks Enable
				uint32_t                  : 1;
				uint32_t COMP12EN         : 1; /// COMP1/2 peripheral clock enable
				uint32_t VREFEN           : 1; /// VREF peripheral clock enable
				uint32_t RTCAPBEN         : 1; /// RTC APB Clock Enable
				uint32_t                  : 4;
				uint32_t SAI4EN           : 1; /// SAI4 Peripheral Clocks Enable
				uint32_t                  : 10;
				
			};
			#endif
			#ifdef RCC_AHB3LPENR
			struct AHB3LPENR_t: public Reg32_t /// RCC AHB3 Sleep Clock Register
			{
				using Reg32_t::operator=;
				union
				{
					#ifdef RCC_AHB3LPENR_0
					struct
					{
						uint32_t MDMALPEN         : 1; /// MDMA Clock Enable During CSleep Mode
						uint32_t                  : 3;
						uint32_t DMA2DLPEN        : 1; /// DMA2D Clock Enable During CSleep Mode
						uint32_t JPGDECLPEN       : 1; /// JPGDEC Clock Enable During CSleep Mode
						uint32_t                  : 2;
						uint32_t RCC_AHB3LPENR_0_FLITFLPEN : 1; /// FLITF Clock Enable During CSleep Mode
						uint32_t                  : 3;
						uint32_t FMCLPEN          : 1; /// FMC Peripheral Clocks Enable During CSleep Mode
						uint32_t                  : 1;
						uint32_t QSPILPEN         : 1; /// QUADSPI and QUADSPI Delay Clock Enable During CSleep Mode
						uint32_t                  : 1;
						uint32_t SDMMC1LPEN       : 1; /// SDMMC1 and SDMMC1 Delay Clock Enable During CSleep Mode
						uint32_t                  : 11;
						uint32_t D1DTCM1LPEN      : 1; /// D1DTCM1 Block Clock Enable During CSleep mode
						uint32_t DTCM2LPEN        : 1; /// D1 DTCM2 Block Clock Enable During CSleep mode
						uint32_t ITCMLPEN         : 1; /// D1ITCM Block Clock Enable During CSleep mode
						uint32_t AXISRAMLPEN      : 1; /// AXISRAM Block Clock Enable During CSleep mode
					};
					#endif
					#ifdef RCC_AHB3LPENR_1
					struct
					{
						uint32_t RCC_AHB3LPENR_1_FMCLPEN : 1; /// Flexible memory controller module clock enable during Sleep mode
						uint32_t RCC_AHB3LPENR_1_QSPILPEN : 1; /// Quand SPI memory controller clock enable during Sleep mode
						uint32_t                  : 6;
						uint32_t RCC_AHB3LPENR_1_FLASHLPEN : 1; /// FLITF Clock Enable During CSleep Mode
						uint32_t                  : 23;
					};
					#endif
					#ifdef RCC_AHB3LPENR_2
					struct
					{
						uint32_t FSMCLPEN         : 1; /// Flexible static memory controller module clock enable during Sleep mode
						uint32_t                  : 31;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_AHB1LPENR
			struct AHB1LPENR_t: public Reg32_t /// RCC AHB1 Sleep Clock Register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t RCC_AHB1LPENR_0_DMA1LPEN : 1; /// DMA1 Clock Enable During CSleep Mode
						uint32_t RCC_AHB1LPENR_0_DMA2LPEN : 1; /// DMA2 Clock Enable During CSleep Mode
						uint32_t RCC_AHB1LPENR_0_GPIOCLPEN : 1; /// IO port C clock enable during Sleep mode
						uint32_t RCC_AHB1LPENR_0_GPIODLPEN : 1; /// IO port D clock enable during Sleep mode
						uint32_t RCC_AHB1LPENR_0_GPIOELPEN : 1; /// IO port E clock enable during Sleep mode
						uint32_t RCC_AHB1LPENR_0_ADC12LPEN : 1; /// ADC1/2 Peripheral Clocks Enable During CSleep Mode
						uint32_t RCC_AHB1LPENR_0_GPIOGLPEN : 1; /// IO port G clock enable during Sleep mode
						uint32_t RCC_AHB1LPENR_0_GPIOHLPEN : 1; /// IO port H clock enable during Sleep mode
						uint32_t RCC_AHB1LPENR_0_GPIOILPEN : 1; /// IO port I clock enable during Sleep mode
						uint32_t RCC_AHB1LPENR_0_GPIOJLPEN : 1; /// IO port J clock enable during Sleep mode
						uint32_t RCC_AHB1LPENR_0_GPIOKLPEN : 1; /// IO port K clock enable during Sleep mode
						uint32_t                  : 1;
						uint32_t RCC_AHB1LPENR_0_CRCLPEN : 1; /// CRC clock enable during Sleep mode
						uint32_t RCC_AHB1LPENR_0_AXILPEN : 1; /// AXI to AHB bridge clock enable during Sleep mode
						uint32_t RCC_AHB1LPENR_0_ARTLPEN : 1; /// ART Clock Enable During CSleep Mode
						uint32_t RCC_AHB1LPENR_0_ETH1MACLPEN : 1; /// Ethernet MAC bus interface Clock Enable During CSleep Mode
						uint32_t RCC_AHB1LPENR_0_ETH1TXLPEN : 1; /// Ethernet Transmission Clock Enable During CSleep Mode
						uint32_t RCC_AHB1LPENR_0_ETH1RXLPEN : 1; /// Ethernet Reception Clock Enable During CSleep Mode
						uint32_t RCC_AHB1LPENR_0_BKPSRAMLPEN : 1; /// Backup SRAM interface clock enable during Sleep mode
						uint32_t RCC_AHB1LPENR_0_SRAM3LPEN : 1; /// SRAM 3 interface clock enable during Sleep mode
						uint32_t RCC_AHB1LPENR_0_DTCMLPEN : 1; /// DTCM RAM interface clock enable during Sleep mode
						uint32_t                  : 2;
						uint32_t RCC_AHB1LPENR_0_DMA2DLPEN : 1; /// DMA2D clock enable during Sleep mode
						uint32_t                  : 1;
						uint32_t RCC_AHB1LPENR_0_USB1OTGHSLPEN : 1; /// USB1OTG (OTG_HS1) peripheral clock enable during CSleep mode
						uint32_t RCC_AHB1LPENR_0_USB1OTGHSULPILPEN : 1; /// USB_PHY1 clock enable during CSleep mode
						uint32_t RCC_AHB1LPENR_0_USB2OTGHSLPEN : 1; /// USB2OTG (OTG_HS2) peripheral clock enable during CSleep mode
						uint32_t RCC_AHB1LPENR_0_USB2ULPILPEN : 1; /// USB_PHY2 clocks enable during CSleep mode
						uint32_t RCC_AHB1LPENR_0_OTGHSLPEN : 1; /// USB OTG HS clock enable during Sleep mode
						uint32_t RCC_AHB1LPENR_0_OTGHSULPILPEN : 1; /// USB OTG HS ULPI clock enable during Sleep mode
						uint32_t RCC_AHB1LPENR_0_RNGLPEN : 1; /// RNG clock enable during sleep mode
					};
					#ifdef RCC_AHB1LPENR_1
					struct
					{
						uint32_t RCC_AHB1LPENR_1_GPIOALPEN : 1; /// IO port A clock enable during sleep mode
						uint32_t RCC_AHB1LPENR_1_GPIOBLPEN : 1; /// IO port B clock enable during Sleep mode
						uint32_t                  : 3;
						uint32_t RCC_AHB1LPENR_1_GPIOFLPEN : 1; /// IO port F clock enable during Sleep mode
						uint32_t                  : 9;
						uint32_t RCC_AHB1LPENR_1_FLITFLPEN : 1; /// Flash interface clock enable during Sleep mode
						uint32_t RCC_AHB1LPENR_1_SRAM1LPEN : 1; /// SRAM 1interface clock enable during Sleep mode
						uint32_t RCC_AHB1LPENR_1_SRAM2LPEN : 1; /// SRAM 2 interface clock enable during Sleep mode
						uint32_t                  : 3;
						uint32_t RCC_AHB1LPENR_1_DMA1LPEN : 1; /// DMA1 clock enable during Sleep mode
						uint32_t RCC_AHB1LPENR_1_DMA2LPEN : 1; /// DMA2 clock enable during Sleep mode
						uint32_t                  : 2;
						uint32_t RCC_AHB1LPENR_1_USB1OTGLPEN : 1; /// USB1OTG peripheral clock enable during CSleep mode
						uint32_t RCC_AHB1LPENR_1_USB1ULPILPEN : 1; /// USB_PHY1 clock enable during CSleep mode
						uint32_t RCC_AHB1LPENR_1_USB2OTGLPEN : 1; /// USB2OTG peripheral clock enable during CSleep mode
						uint32_t RCC_AHB1LPENR_1_USB2OTGHSULPILPEN : 1; /// USB_PHY2 clocks enable during CSleep mode
						uint32_t                  : 3;
					};
					#endif
					#ifdef RCC_AHB1LPENR_2
					struct
					{
						uint32_t                  : 25;
						uint32_t ETHMACLPEN       : 1; /// Ethernet MAC clock enable during Sleep mode
						uint32_t ETHMACTXLPEN     : 1; /// Ethernet transmission clock enable during Sleep mode
						uint32_t ETHMACRXLPEN     : 1; /// Ethernet reception clock enable during Sleep mode
						uint32_t ETHMACPTPLPEN    : 1; /// Ethernet PTP clock enable during Sleep mode
						uint32_t                  : 3;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_AHB2LPENR
			struct AHB2LPENR_t: public Reg32_t /// RCC AHB2 Sleep Clock Register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t RCC_AHB2LPENR_0_CAMITFLPEN : 1; /// CAMITF peripheral clock enable during CSleep mode
						uint32_t RCC_AHB2LPENR_0_QSPILPEN : 1; /// QUADSPI memory controller module clock enable during Sleep mode
						uint32_t                  : 2;
						uint32_t RCC_AHB2LPENR_0_CRYPTLPEN : 1; /// CRYPT peripheral clock enable during CSleep mode
						uint32_t RCC_AHB2LPENR_0_HASHLPEN : 1; /// HASH peripheral clock enable during CSleep mode
						uint32_t RCC_AHB2LPENR_0_RNGLPEN : 1; /// RNG peripheral clock enable during CSleep mode
						uint32_t RCC_AHB2LPENR_0_OTGFSLPEN : 1; /// USB OTG FS clock enable during Sleep mode
						uint32_t                  : 1;
						uint32_t RCC_AHB2LPENR_0_SDMMC2LPEN : 1; /// SDMMC2 and SDMMC2 Delay Clock Enable During CSleep Mode
						uint32_t                  : 19;
						uint32_t RCC_AHB2LPENR_0_SRAM1LPEN : 1; /// SRAM1 Clock Enable During CSleep Mode
						uint32_t RCC_AHB2LPENR_0_SRAM2LPEN : 1; /// SRAM2 Clock Enable During CSleep Mode
						uint32_t RCC_AHB2LPENR_0_SRAM3LPEN : 1; /// SRAM3 Clock Enable During CSleep Mode
					};
					#ifdef RCC_AHB2LPENR_1
					struct
					{
						uint32_t DCMILPEN         : 1; /// Camera interface enable during Sleep mode
						uint32_t                  : 3;
						uint32_t RCC_AHB2LPENR_1_CRYPLPEN : 1; /// Cryptography modules clock enable during Sleep mode
						uint32_t                  : 27;
					};
					#endif
					#ifdef RCC_AHB2LPENR_2
					struct
					{
						uint32_t RCC_AHB2LPENR_2_FSMCLPEN : 1; /// Flexible memory controller module clock enable during Sleep mode
						uint32_t                  : 3;
						uint32_t RCC_AHB2LPENR_2_AESLPEN : 1; /// AES module clock enable during Sleep mode
						uint32_t                  : 27;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_AHB4LPENR
			struct AHB4LPENR_t: public Reg32_t /// RCC AHB4 Sleep Clock Register
			{
				using Reg32_t::operator=;
				uint32_t GPIOALPEN        : 1; /// GPIO peripheral clock enable during CSleep mode
				uint32_t GPIOBLPEN        : 1; /// GPIO peripheral clock enable during CSleep mode
				uint32_t GPIOCLPEN        : 1; /// GPIO peripheral clock enable during CSleep mode
				uint32_t GPIODLPEN        : 1; /// GPIO peripheral clock enable during CSleep mode
				uint32_t GPIOELPEN        : 1; /// GPIO peripheral clock enable during CSleep mode
				uint32_t GPIOFLPEN        : 1; /// GPIO peripheral clock enable during CSleep mode
				uint32_t GPIOGLPEN        : 1; /// GPIO peripheral clock enable during CSleep mode
				uint32_t GPIOHLPEN        : 1; /// GPIO peripheral clock enable during CSleep mode
				uint32_t GPIOILPEN        : 1; /// GPIO peripheral clock enable during CSleep mode
				uint32_t GPIOJLPEN        : 1; /// GPIO peripheral clock enable during CSleep mode
				uint32_t GPIOKLPEN        : 1; /// GPIO peripheral clock enable during CSleep mode
				uint32_t                  : 8;
				uint32_t CRCLPEN          : 1; /// CRC peripheral clock enable during CSleep mode
				uint32_t                  : 1;
				uint32_t BDMALPEN         : 1; /// BDMA Clock Enable During CSleep Mode
				uint32_t                  : 2;
				uint32_t ADC3LPEN         : 1; /// ADC3 Peripheral Clocks Enable During CSleep Mode
				uint32_t                  : 3;
				uint32_t BKPRAMLPEN       : 1; /// Backup RAM Clock Enable During CSleep Mode
				uint32_t SRAM4LPEN        : 1; /// SRAM4 Clock Enable During CSleep Mode
				uint32_t                  : 2;
				
			};
			#endif
			#ifdef RCC_APB3LPENR
			struct APB3LPENR_t: public Reg32_t /// RCC APB3 Sleep Clock Register
			{
				using Reg32_t::operator=;
				uint32_t                  : 3;
				uint32_t LTDCLPEN         : 1; /// LTDC peripheral clock enable during CSleep mode
				uint32_t RCC_APB3LPENR_DSILPEN : 1; /// DSI peripheral clock enable during CSleep mode
				uint32_t                  : 1;
				uint32_t WWDG1LPEN        : 1; /// WWDG1 Clock Enable During CSleep Mode
				uint32_t                  : 25;
				
			};
			#endif
			#ifdef RCC_APB1LLPENR
			struct APB1LLPENR_t: public Reg32_t /// RCC APB1 Low Sleep Clock Register
			{
				using Reg32_t::operator=;
				uint32_t TIM2LPEN         : 1; /// TIM2 peripheral clock enable during CSleep mode
				uint32_t TIM3LPEN         : 1; /// TIM3 peripheral clock enable during CSleep mode
				uint32_t TIM4LPEN         : 1; /// TIM4 peripheral clock enable during CSleep mode
				uint32_t TIM5LPEN         : 1; /// TIM5 peripheral clock enable during CSleep mode
				uint32_t TIM6LPEN         : 1; /// TIM6 peripheral clock enable during CSleep mode
				uint32_t TIM7LPEN         : 1; /// TIM7 peripheral clock enable during CSleep mode
				uint32_t TIM12LPEN        : 1; /// TIM12 peripheral clock enable during CSleep mode
				uint32_t TIM13LPEN        : 1; /// TIM13 peripheral clock enable during CSleep mode
				uint32_t TIM14LPEN        : 1; /// TIM14 peripheral clock enable during CSleep mode
				uint32_t LPTIM1LPEN       : 1; /// LPTIM1 Peripheral Clocks Enable During CSleep Mode
				uint32_t                  : 1;
				uint32_t RCC_APB1LLPENR_WWDG2LPEN : 1; /// WWDG2 Clock Enable During CSleep Mode
				uint32_t                  : 2;
				uint32_t SPI2LPEN         : 1; /// SPI2 Peripheral Clocks Enable During CSleep Mode
				uint32_t SPI3LPEN         : 1; /// SPI3 Peripheral Clocks Enable During CSleep Mode
				uint32_t SPDIFRXLPEN      : 1; /// SPDIFRX Peripheral Clocks Enable During CSleep Mode
				uint32_t USART2LPEN       : 1; /// USART2 Peripheral Clocks Enable During CSleep Mode
				uint32_t USART3LPEN       : 1; /// USART3 Peripheral Clocks Enable During CSleep Mode
				uint32_t UART4LPEN        : 1; /// UART4 Peripheral Clocks Enable During CSleep Mode
				uint32_t UART5LPEN        : 1; /// UART5 Peripheral Clocks Enable During CSleep Mode
				uint32_t I2C1LPEN         : 1; /// I2C1 Peripheral Clocks Enable During CSleep Mode
				uint32_t I2C2LPEN         : 1; /// I2C2 Peripheral Clocks Enable During CSleep Mode
				uint32_t I2C3LPEN         : 1; /// I2C3 Peripheral Clocks Enable During CSleep Mode
				uint32_t                  : 3;
				uint32_t HDMICECLPEN      : 1; /// HDMI-CEC Peripheral Clocks Enable During CSleep Mode
				uint32_t                  : 1;
				uint32_t DAC12LPEN        : 1; /// DAC1/2 peripheral clock enable during CSleep mode
				uint32_t USART7LPEN       : 1; /// USART7 Peripheral Clocks Enable During CSleep Mode
				uint32_t USART8LPEN       : 1; /// USART8 Peripheral Clocks Enable During CSleep Mode
				
			};
			#endif
			#ifdef RCC_APB1HLPENR
			struct APB1HLPENR_t: public Reg32_t /// RCC APB1 High Sleep Clock Register
			{
				using Reg32_t::operator=;
				uint32_t                  : 1;
				uint32_t CRSLPEN          : 1; /// Clock Recovery System peripheral clock enable during CSleep mode
				uint32_t SWPLPEN          : 1; /// SWPMI Peripheral Clocks Enable During CSleep Mode
				uint32_t                  : 1;
				uint32_t OPAMPLPEN        : 1; /// OPAMP peripheral clock enable during CSleep mode
				uint32_t MDIOSLPEN        : 1; /// MDIOS peripheral clock enable during CSleep mode
				uint32_t                  : 2;
				uint32_t FDCANLPEN        : 1; /// FDCAN Peripheral Clocks Enable During CSleep Mode
				uint32_t                  : 23;
				
			};
			#endif
			#ifdef RCC_APB2LPENR
			struct APB2LPENR_t: public Reg32_t /// RCC APB2 Sleep Clock Register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t RCC_APB2LPENR_0_TIM1LPEN : 1; /// TIM1 peripheral clock enable during CSleep mode
						uint32_t RCC_APB2LPENR_0_TIM8LPEN : 1; /// TIM8 peripheral clock enable during CSleep mode
						uint32_t RCC_APB2LPENR_0_TIM9LPEN : 1; /// TIM9 timer clock enable during Sleep mode
						uint32_t RCC_APB2LPENR_0_TIM10LPEN : 1; /// TIM10 timer clock enable during Sleep mode
						uint32_t RCC_APB2LPENR_0_USART1LPEN : 1; /// USART1 Peripheral Clocks Enable During CSleep Mode
						uint32_t RCC_APB2LPENR_0_USART6LPEN : 1; /// USART6 Peripheral Clocks Enable During CSleep Mode
						uint32_t RCC_APB2LPENR_0_USART9LPEN : 1; /// USART9 clock enable during Sleep mode
						uint32_t RCC_APB2LPENR_0_SDMMC2LPEN : 1; /// SDMMC2 clock enable during Sleep mode
						uint32_t RCC_APB2LPENR_0_ADC1LPEN : 1; /// ADC1 clock enable during Sleep mode
						uint32_t RCC_APB2LPENR_0_ADC2LPEN : 1; /// ADC2 clock enable during Sleep mode
						uint32_t RCC_APB2LPENR_0_ADC3LPEN : 1; /// ADC 3 clock enable during Sleep mode
						uint32_t RCC_APB2LPENR_0_SDMMC1LPEN : 1; /// SDMMC1 clock enable during Sleep mode
						uint32_t SPI1LPEN         : 1; /// SPI1 Peripheral Clocks Enable During CSleep Mode
						uint32_t RCC_APB2LPENR_0_SPI4LPEN : 1; /// SPI4 Peripheral Clocks Enable During CSleep Mode
						uint32_t RCC_APB2LPENR_0_SYSCFGLPEN : 1; /// System configuration controller clock enable during Sleep mode
						uint32_t RCC_APB2LPENR_0_EXTITEN : 1; /// EXTIT APB and SYSCTRL PFREE clock enable during Sleep mode
						uint32_t RCC_APB2LPENR_0_TIM15LPEN : 1; /// TIM15 peripheral clock enable during CSleep mode
						uint32_t RCC_APB2LPENR_0_TIM16LPEN : 1; /// TIM16 peripheral clock enable during CSleep mode
						uint32_t RCC_APB2LPENR_0_TIM17LPEN : 1; /// TIM17 peripheral clock enable during CSleep mode
						uint32_t                  : 1;
						uint32_t RCC_APB2LPENR_0_SPI5LPEN : 1; /// SPI5 Peripheral Clocks Enable During CSleep Mode
						uint32_t RCC_APB2LPENR_0_SPI6LPEN : 1; /// SPI 6 clock enable during Sleep mode
						uint32_t RCC_APB2LPENR_0_SAI1LPEN : 1; /// SAI1 Peripheral Clocks Enable During CSleep Mode
						uint32_t RCC_APB2LPENR_0_SAI2LPEN : 1; /// SAI2 Peripheral Clocks Enable During CSleep Mode
						uint32_t RCC_APB2LPENR_0_SAI3LPEN : 1; /// SAI3 Peripheral Clocks Enable During CSleep Mode
						uint32_t RCC_APB2LPENR_0_DFSDM2LPEN : 1; /// DFSDM2 clock enable during Sleep mode
						uint32_t RCC_APB2LPENR_0_LTDCLPEN : 1; /// LTDC clock enable during sleep mode
						uint32_t RCC_APB2LPENR_0_DSILPEN : 1; /// DSI clocks enable during Sleep mode
						uint32_t RCC_APB2LPENR_0_DFSDM1LPEN : 1; /// DFSDM1 Peripheral Clocks Enable During CSleep Mode
						uint32_t RCC_APB2LPENR_0_HRTIMLPEN : 1; /// HRTIM peripheral clock enable during CSleep mode
						uint32_t                  : 2;
					};
					#ifdef RCC_APB2LPENR_1
					struct
					{
						uint32_t RCC_APB2LPENR_1_SYSCFGLPEN : 1; /// System configuration controller clock enable during Sleep mode
						uint32_t                  : 6;
						uint32_t RCC_APB2LPENR_1_USART10LPEN : 1; /// USART10 clock enable during Sleep mode
						uint32_t                  : 1;
						uint32_t RCC_APB2LPENR_1_ADC1LPEN : 1; /// ADC1 interface clock enable during Sleep mode
						uint32_t                  : 1;
						uint32_t RCC_APB2LPENR_1_SDIOLPEN : 1; /// SDIO clock enable during Sleep mode
						uint32_t                  : 2;
						uint32_t RCC_APB2LPENR_1_USART1LPEN : 1; /// USART1 clock enable during Sleep mode
						uint32_t RCC_APB2LPENR_1_EXTITLPEN : 1; /// EXTI and External IT clock enable during sleep mode
						uint32_t RCC_APB2LPENR_1_TIM9LPEN : 1; /// TIM9 clock enable during sleep mode
						uint32_t RCC_APB2LPENR_1_TIM10LPEN : 1; /// TIM10 clock enable during Sleep mode
						uint32_t RCC_APB2LPENR_1_TIM11LPEN : 1; /// TIM11 clock enable during Sleep mode
						uint32_t                  : 5;
						uint32_t RCC_APB2LPENR_1_DFSDMLPEN : 1;
						uint32_t                  : 7;
					};
					#endif
					#ifdef RCC_APB2LPENR_2
					struct
					{
						uint32_t                  : 4;
						uint32_t TIM11LPEN        : 1; /// TIM11 timer clock enable during Sleep mode
						uint32_t                  : 27;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_APB4LPENR
			struct APB4LPENR_t: public Reg32_t /// RCC APB4 Sleep Clock Register
			{
				using Reg32_t::operator=;
				uint32_t                  : 1;
				uint32_t SYSCFGLPEN       : 1; /// SYSCFG peripheral clock enable during CSleep mode
				uint32_t                  : 1;
				uint32_t LPUART1LPEN      : 1; /// LPUART1 Peripheral Clocks Enable During CSleep Mode
				uint32_t                  : 1;
				uint32_t SPI6LPEN         : 1; /// SPI6 Peripheral Clocks Enable During CSleep Mode
				uint32_t                  : 1;
				uint32_t I2C4LPEN         : 1; /// I2C4 Peripheral Clocks Enable During CSleep Mode
				uint32_t                  : 1;
				uint32_t LPTIM2LPEN       : 1; /// LPTIM2 Peripheral Clocks Enable During CSleep Mode
				uint32_t LPTIM3LPEN       : 1; /// LPTIM3 Peripheral Clocks Enable During CSleep Mode
				uint32_t LPTIM4LPEN       : 1; /// LPTIM4 Peripheral Clocks Enable During CSleep Mode
				uint32_t LPTIM5LPEN       : 1; /// LPTIM5 Peripheral Clocks Enable During CSleep Mode
				uint32_t                  : 1;
				uint32_t COMP12LPEN       : 1; /// COMP1/2 peripheral clock enable during CSleep mode
				uint32_t VREFLPEN         : 1; /// VREF peripheral clock enable during CSleep mode
				uint32_t RTCAPBLPEN       : 1; /// RTC APB Clock Enable During CSleep Mode
				uint32_t                  : 4;
				uint32_t SAI4LPEN         : 1; /// SAI4 Peripheral Clocks Enable During CSleep Mode
				uint32_t                  : 10;
				
			};
			#endif
			#ifdef RCC_ICSCR
			struct ICSCR_t: public Reg32_t /// RCC Internal Clock Source Calibration Register
			{
				using Reg32_t::operator=;
				union
				{
					#ifdef RCC_ICSCR_0
					struct
					{
						uint32_t HSICAL           : 12; /// HSI clock calibration
						uint32_t HSITRIM          : 6; /// HSI clock trimming
						uint32_t CSICAL           : 8; /// CSI clock calibration
						uint32_t CSITRIM          : 5; /// CSI clock trimming
						uint32_t                  : 1;
					};
					#endif
					#ifdef RCC_ICSCR_1
					struct
					{
						uint32_t RCC_ICSCR_1_MSICAL : 8; /// MSI clock calibration
						uint32_t RCC_ICSCR_1_MSITRIM : 8; /// MSI clock trimming
						uint32_t RCC_ICSCR_1_HSICAL : 8; /// HSI clock calibration
						uint32_t RCC_ICSCR_1_HSITRIM : 7; /// HSI clock trimming
						uint32_t                  : 1;
					};
					#endif
					#ifdef RCC_ICSCR_2
					struct
					{
						uint32_t RCC_ICSCR_2_HSICAL : 8; /// HSI16 clock calibration
						uint32_t RCC_ICSCR_2_HSI16TRIM : 5; /// High speed internal clock trimming
						uint32_t RCC_ICSCR_2_MSIRANGE : 3; /// MSI clock ranges
						uint32_t RCC_ICSCR_2_HSICAL0 : 8; /// Internal High Speed clock Calibration
						uint32_t RCC_ICSCR_2_HSITRIM : 5; /// HSI clock trimming
						uint32_t                  : 3;
					};
					#endif
					#ifdef RCC_ICSCR_3
					struct
					{
						uint32_t RCC_ICSCR_3_HSI16CAL : 8; /// nternal high speed clock calibration
						uint32_t RCC_ICSCR_3_HSITRIM : 7; /// HSI16 clock trimming
						uint32_t                  : 1;
						uint32_t RCC_ICSCR_3_MSICAL : 8; /// MSI clock calibration
						uint32_t RCC_ICSCR_3_MSITRIM : 8; /// MSI clock trimming
					};
					#endif
					#ifdef RCC_ICSCR_4
					struct
					{
						uint32_t                  : 8;
						uint32_t HSITRIM          : 5; /// High speed internal clock trimming
						uint32_t                  : 19;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_AHB3ENR
			struct AHB3ENR_t: public Reg32_t /// RCC AHB3 Clock Register
			{
				using Reg32_t::operator=;
				union
				{
					#ifdef RCC_AHB3ENR_0
					struct
					{
						uint32_t RCC_AHB3ENR_0_MDMAEN : 1; /// MDMA Peripheral Clock Enable
						uint32_t                  : 3;
						uint32_t RCC_AHB3ENR_0_DMA2DEN : 1; /// DMA2D Peripheral Clock Enable
						uint32_t RCC_AHB3ENR_0_JPGDECEN : 1; /// JPGDEC Peripheral Clock Enable
						uint32_t                  : 2;
						uint32_t RCC_AHB3ENR_0_QUADSPI1EN : 1; /// Quad SPI 1 module clock enable
						uint32_t RCC_AHB3ENR_0_OSPI2EN : 1; /// OSPI2EN memory interface clock enable
						uint32_t                  : 2;
						uint32_t RCC_AHB3ENR_0_FMCEN : 1; /// FMC Peripheral Clocks Enable
						uint32_t                  : 1;
						uint32_t RCC_AHB3ENR_0_QSPIEN : 1; /// QUADSPI and QUADSPI Delay Clock Enable
						uint32_t                  : 1;
						uint32_t RCC_AHB3ENR_0_SDMMC1EN : 1; /// SDMMC1 and SDMMC1 Delay Clock Enable
						uint32_t RCC_AHB3ENR_0_AES2EN : 1;
						uint32_t RCC_AHB3ENR_0_RNGEN : 1;
						uint32_t RCC_AHB3ENR_0_HSEMEN : 1;
						uint32_t RCC_AHB3ENR_0_IPCCEN : 1;
						uint32_t                  : 4;
						uint32_t RCC_AHB3ENR_0_FLASHEN : 1;
						uint32_t                  : 6;
					};
					#endif
					#ifdef RCC_AHB3ENR_1
					struct
					{
						uint32_t RCC_AHB3ENR_1_FMCEN : 1; /// Flexible memory controller clock enable
						uint32_t RCC_AHB3ENR_1_QSPIEN : 1; /// Quad SPI memory controller clock enable
						uint32_t                  : 14;
						uint32_t RCC_AHB3ENR_1_PKAEN : 1;
						uint32_t                  : 15;
					};
					#endif
					#ifdef RCC_AHB3ENR_2
					struct
					{
						uint32_t RCC_AHB3ENR_2_FSMCEN : 1; /// Flexible static memory controller module clock enable
						uint32_t                  : 7;
						uint32_t RCC_AHB3ENR_2_QSPIEN : 1;
						uint32_t                  : 23;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_C1_AHB3LPENR
			struct C1_AHB3LPENR_t: public Reg32_t /// RCC AHB3 Sleep Clock Register
			{
				using Reg32_t::operator=;
				uint32_t MDMALPEN         : 1; /// MDMA Clock Enable During CSleep Mode
				uint32_t                  : 3;
				uint32_t DMA2DLPEN        : 1; /// DMA2D Clock Enable During CSleep Mode
				uint32_t JPGDECLPEN       : 1; /// JPGDEC Clock Enable During CSleep Mode
				uint32_t                  : 2;
				uint32_t FLITFLPEN        : 1; /// FLITF Clock Enable During CSleep Mode
				uint32_t                  : 3;
				uint32_t FMCLPEN          : 1; /// FMC Peripheral Clocks Enable During CSleep Mode
				uint32_t                  : 1;
				uint32_t QSPILPEN         : 1; /// QUADSPI and QUADSPI Delay Clock Enable During CSleep Mode
				uint32_t                  : 1;
				uint32_t SDMMC1LPEN       : 1; /// SDMMC1 and SDMMC1 Delay Clock Enable During CSleep Mode
				uint32_t                  : 11;
				uint32_t D1DTCM1LPEN      : 1; /// D1DTCM1 Block Clock Enable During CSleep mode
				uint32_t DTCM2LPEN        : 1; /// D1 DTCM2 Block Clock Enable During CSleep mode
				uint32_t ITCMLPEN         : 1; /// D1ITCM Block Clock Enable During CSleep mode
				uint32_t AXISRAMLPEN      : 1; /// AXISRAM Block Clock Enable During CSleep mode
				
			};
			#endif
			#ifdef RCC_C1_AHB1LPENR
			struct C1_AHB1LPENR_t: public Reg32_t /// RCC AHB1 Sleep Clock Register
			{
				using Reg32_t::operator=;
				uint32_t DMA1LPEN         : 1; /// DMA1 Clock Enable During CSleep Mode
				uint32_t DMA2LPEN         : 1; /// DMA2 Clock Enable During CSleep Mode
				uint32_t                  : 3;
				uint32_t ADC12LPEN        : 1; /// ADC1/2 Peripheral Clocks Enable During CSleep Mode
				uint32_t                  : 9;
				uint32_t ETH1MACLPEN      : 1; /// Ethernet MAC bus interface Clock Enable During CSleep Mode
				uint32_t ETH1TXLPEN       : 1; /// Ethernet Transmission Clock Enable During CSleep Mode
				uint32_t ETH1RXLPEN       : 1; /// Ethernet Reception Clock Enable During CSleep Mode
				uint32_t                  : 7;
				uint32_t USB1OTGLPEN      : 1; /// USB1OTG peripheral clock enable during CSleep mode
				uint32_t USB1ULPILPEN     : 1; /// USB_PHY1 clock enable during CSleep mode
				uint32_t USB2OTGLPEN      : 1; /// USB2OTG peripheral clock enable during CSleep mode
				uint32_t USB2ULPILPEN     : 1; /// USB_PHY2 clocks enable during CSleep mode
				uint32_t                  : 3;
				
			};
			#endif
			#ifdef RCC_PLLSAI1CFGR
			struct PLLSAI1CFGR_t: public Reg32_t /// PLLSAI1 configuration register
			{
				using Reg32_t::operator=;
				union
				{
					#ifdef RCC_PLLSAI1CFGR_0
					struct
					{
						uint32_t                  : 4;
						uint32_t RCC_PLLSAI1CFGR_0_PLLSAI1M : 4; /// Division factor for PLLSAI1 input clock
						uint32_t PLLSAI1N         : 7; /// SAI1PLL multiplication factor for VCO
						uint32_t                  : 1;
						uint32_t PLLSAI1PEN       : 1; /// SAI1PLL PLLSAI1CLK output enable
						uint32_t PLLSAI1P         : 1; /// SAI1PLL division factor for PLLSAI1CLK (SAI1 or SAI2 clock)
						uint32_t                  : 2;
						uint32_t PLLSAI1QEN       : 1; /// SAI1PLL PLLUSB2CLK output enable
						uint32_t PLLSAI1Q         : 2; /// SAI1PLL division factor for PLLUSB2CLK (48 MHz clock)
						uint32_t                  : 1;
						uint32_t PLLSAI1REN       : 1; /// PLLSAI1 PLLADC1CLK output enable
						uint32_t PLLSAI1R         : 2; /// PLLSAI1 division factor for PLLADC1CLK (ADC clock)
						uint32_t RCC_PLLSAI1CFGR_0_PLLSAI1PDIV : 5; /// PLLSAI1 division factor for PLLSAI1CLK
					};
					#endif
					#ifdef RCC_PLLSAI1CFGR_1
					struct
					{
						uint32_t                  : 8;
						uint32_t PLLN             : 7; /// SAIPLL multiplication factor for VCO
						uint32_t                  : 1;
						uint32_t PLLPEN           : 1; /// SAIPLL PLLSAI1CLK output enable
						uint32_t PLLP             : 5; /// SAI1PLL division factor P for PLLSAICLK (SAI1clock)
						uint32_t                  : 2;
						uint32_t PLLQEN           : 1; /// SAIPLL PLLSAIUSBCLK output enable
						uint32_t PLLQ             : 3; /// SAIPLL division factor Q for PLLSAIUSBCLK (48 MHz clock)
						uint32_t PLLREN           : 1; /// PLLSAI PLLADC1CLK output enable
						uint32_t PLLR             : 3; /// PLLSAI division factor R for PLLADC1CLK (ADC clock)
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_PLLSAI2CFGR
			struct PLLSAI2CFGR_t: public Reg32_t /// PLLSAI2 configuration register
			{
				using Reg32_t::operator=;
				uint32_t                  : 4;
				uint32_t RCC_PLLSAI2CFGR_PLLSAI2M : 4; /// Division factor for PLLSAI2 input clock
				uint32_t PLLSAI2N         : 7; /// SAI2PLL multiplication factor for VCO
				uint32_t                  : 1;
				uint32_t PLLSAI2PEN       : 1; /// SAI2PLL PLLSAI2CLK output enable
				uint32_t PLLSAI2P         : 1; /// SAI1PLL division factor for PLLSAI2CLK (SAI1 or SAI2 clock)
				uint32_t                  : 2;
				uint32_t RCC_PLLSAI2CFGR_PLLSAI2QEN : 1; /// PLLSAI2 division factor for PLLDISCLK
				uint32_t RCC_PLLSAI2CFGR_PLLSAI2Q : 2; /// SAI2PLL PLLSAI2CLK output enable
				uint32_t                  : 1;
				uint32_t PLLSAI2REN       : 1; /// PLLSAI2 PLLADC2CLK output enable
				uint32_t PLLSAI2R         : 2; /// PLLSAI2 division factor for PLLADC2CLK (ADC clock)
				uint32_t RCC_PLLSAI2CFGR_PLLSAI2PDIV : 5; /// PLLSAI2 division factor for PLLSAI2CLK
				
			};
			#endif
			#ifdef RCC_APB1RSTR1
			struct APB1RSTR1_t: public Reg32_t /// APB1 peripheral reset register 1
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t TIM2RST          : 1; /// TIM2 timer reset
						uint32_t RCC_APB1RSTR1_0_TIM3RST : 1; /// TIM3 timer reset
						uint32_t RCC_APB1RSTR1_0_TIM4RST : 1; /// TIM3 timer reset
						uint32_t RCC_APB1RSTR1_0_TIM5RST : 1; /// TIM5 timer reset
						uint32_t RCC_APB1RSTR1_0_TIM6RST : 1; /// TIM6 timer reset
						uint32_t RCC_APB1RSTR1_0_TIM7RST : 1; /// TIM7 timer reset
						uint32_t                  : 3;
						uint32_t RCC_APB1RSTR1_0_LCDRST : 1; /// LCD interface reset
						uint32_t                  : 4;
						uint32_t SPI2RST          : 1; /// SPI2 reset
						uint32_t RCC_APB1RSTR1_0_SPI3RST : 1; /// SPI3 reset
						uint32_t                  : 1;
						uint32_t RCC_APB1RSTR1_0_USART2RST : 1; /// USART2 reset
						uint32_t RCC_APB1RSTR1_0_USART3RST : 1; /// USART3 reset
						uint32_t RCC_APB1RSTR1_0_UART4RST : 1; /// UART4 reset
						uint32_t RCC_APB1RSTR1_0_UART5RST : 1; /// UART5 reset
						uint32_t I2C1RST          : 1; /// I2C1 reset
						uint32_t RCC_APB1RSTR1_0_I2C2RST : 1; /// I2C2 reset
						uint32_t RCC_APB1RSTR1_0_I2C3RST : 1; /// I2C3 reset
						uint32_t RCC_APB1RSTR1_0_CRSRST : 1; /// CRS reset
						uint32_t RCC_APB1RSTR1_0_CAN1RST : 1; /// CAN1 reset
						uint32_t RCC_APB1RSTR1_0_CAN2RST : 1; /// CAN2 reset
						uint32_t                  : 1;
						uint32_t RCC_APB1RSTR1_0_PWRRST : 1; /// Power interface reset
						uint32_t RCC_APB1RSTR1_0_DAC1RST : 1; /// DAC1 interface reset
						uint32_t RCC_APB1RSTR1_0_OPAMPRST : 1; /// OPAMP interface reset
						uint32_t LPTIM1RST        : 1; /// Low Power Timer 1 reset
					};
					#ifdef RCC_APB1RSTR1_1
					struct
					{
						uint32_t                  : 8;
						uint32_t RCC_APB1RSTR1_1_CRSRST : 1; /// Clock recovery system reset
						uint32_t                  : 9;
						uint32_t RCC_APB1RSTR1_1_USART1RST : 1; /// USART1 reset
						uint32_t RCC_APB1RSTR1_1_USART4RST : 1; /// USART4 reset.
						uint32_t                  : 3;
						uint32_t RCC_APB1RSTR1_1_USBDRST : 1; /// USBD reset
						uint32_t                  : 1;
						uint32_t RCC_APB1RSTR1_1_FDCANRST : 1; /// FDCAN reset
						uint32_t RCC_APB1RSTR1_1_USBFSRST : 1; /// USB FS reset
						uint32_t                  : 3;
						uint32_t RCC_APB1RSTR1_1_I2C3 : 1; /// I2C3 interface reset
						uint32_t                  : 1;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_APB1RSTR2
			struct APB1RSTR2_t: public Reg32_t /// APB1 peripheral reset register 2
			{
				using Reg32_t::operator=;
				uint32_t LPUART1RST       : 1; /// Low-power UART 1 reset
				uint32_t RCC_APB1RSTR2_I2C4RST : 1; /// I2C4 reset
				uint32_t RCC_APB1RSTR2_SWPMI1RST : 1; /// Single wire protocol reset
				uint32_t                  : 2;
				uint32_t RCC_APB1RSTR2_LPTIM2RST : 1; /// Low-power timer 2 reset
				uint32_t                  : 2;
				uint32_t RCC_APB1RSTR2_USBPDRST : 1; /// USBPD reset
				uint32_t                  : 23;
				
			};
			#endif
			#ifdef RCC_APB1ENR1
			struct APB1ENR1_t: public Reg32_t /// None
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t TIM2EN           : 1; /// TIM2 timer clock enable
						uint32_t RCC_APB1ENR1_0_TIM3EN : 1; /// TIM3 timer clock enable
						uint32_t RCC_APB1ENR1_0_TIM4EN : 1; /// TIM4 timer clock enable
						uint32_t RCC_APB1ENR1_0_TIM5EN : 1; /// TIM5 timer clock enable
						uint32_t RCC_APB1ENR1_0_TIM6EN : 1; /// TIM6 timer clock enable
						uint32_t RCC_APB1ENR1_0_TIM7EN : 1; /// TIM7 timer clock enable
						uint32_t                  : 3;
						uint32_t RCC_APB1ENR1_0_LCDEN : 1; /// LCD clock enable
						uint32_t RCC_APB1ENR1_0_RTCAPBEN : 1; /// RTC APB clock enable
						uint32_t WWDGEN           : 1; /// Window watchdog clock enable
						uint32_t                  : 2;
						uint32_t RCC_APB1ENR1_0_SPI2EN : 1; /// SPI2 clock enable
						uint32_t RCC_APB1ENR1_0_SP3EN : 1; /// SPI3 clock enable
						uint32_t                  : 1;
						uint32_t RCC_APB1ENR1_0_USART2EN : 1; /// USART2 clock enable
						uint32_t RCC_APB1ENR1_0_USART3EN : 1; /// USART3 clock enable
						uint32_t RCC_APB1ENR1_0_UART4EN : 1; /// UART4 clock enable
						uint32_t RCC_APB1ENR1_0_UART5EN : 1; /// UART5 clock enable
						uint32_t I2C1EN           : 1; /// I2C1 clock enable
						uint32_t RCC_APB1ENR1_0_I2C2EN : 1; /// I2C2 clock enable
						uint32_t RCC_APB1ENR1_0_I2C3EN : 1; /// I2C3 clock enable
						uint32_t RCC_APB1ENR1_0_CRSEN : 1; /// Clock Recovery System clock enable
						uint32_t RCC_APB1ENR1_0_CAN1EN : 1; /// CAN1 clock enable
						uint32_t RCC_APB1ENR1_0_CAN2EN : 1; /// CAN2 clock enable
						uint32_t                  : 1;
						uint32_t RCC_APB1ENR1_0_PWREN : 1; /// Power interface clock enable
						uint32_t RCC_APB1ENR1_0_DAC1EN : 1; /// DAC1 interface clock enable
						uint32_t RCC_APB1ENR1_0_OPAMPEN : 1; /// OPAMP interface clock enable
						uint32_t LPTIM1EN         : 1; /// Low power timer 1 clock enable
					};
					#ifdef RCC_APB1ENR1_1
					struct
					{
						uint32_t                  : 8;
						uint32_t RCC_APB1ENR1_1_CRSEN : 1; /// CRSclock enable
						uint32_t                  : 5;
						uint32_t RCC_APB1ENR1_1_SPI1EN : 1; /// SPI1 clock enable
						uint32_t RCC_APB1ENR1_1_SPI3EN : 1; /// SPI3 clock enable
						uint32_t                  : 2;
						uint32_t RCC_APB1ENR1_1_USART1EN : 1; /// USART1 clock enable
						uint32_t                  : 4;
						uint32_t RCC_APB1ENR1_1_USBDEN : 1; /// USBDclock enable
						uint32_t                  : 1;
						uint32_t RCC_APB1ENR1_1_FDCANEN : 1; /// FDCAN clock enable
						uint32_t RCC_APB1ENR1_1_USBF : 1; /// USB FS clock enable
						uint32_t                  : 3;
						uint32_t RCC_APB1ENR1_1_I2C3 : 1; /// OPAMP interface clock enable
						uint32_t                  : 1;
					};
					#endif
					#ifdef RCC_APB1ENR1_2
					struct
					{
						uint32_t                  : 26;
						uint32_t USBEN            : 1; /// CPU1 USB clock enable
						uint32_t                  : 5;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_APB1ENR2
			struct APB1ENR2_t: public Reg32_t /// APB1 peripheral clock enable register 2
			{
				using Reg32_t::operator=;
				uint32_t LPUART1EN        : 1; /// Low power UART 1 clock enable
				uint32_t RCC_APB1ENR2_I2C4EN : 1; /// I2C4 clock enable
				uint32_t RCC_APB1ENR2_SWPMI1EN : 1; /// Single wire protocol clock enable
				uint32_t                  : 2;
				uint32_t RCC_APB1ENR2_LPTIM2EN : 1; /// CPU1 LPTIM2EN
				uint32_t                  : 2;
				uint32_t RCC_APB1ENR2_USBPDEN : 1; /// USBPD clock enable
				uint32_t                  : 15;
				uint32_t RCC_APB1ENR2_DFSDMEN : 1; /// DFSDMEN enable
				uint32_t                  : 7;
				
			};
			#endif
			#ifdef RCC_AHB1SMENR
			struct AHB1SMENR_t: public Reg32_t /// AHB1 peripheral clocks enable in Sleep and Stop modes register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t DMA1SMEN         : 1; /// DMA1 clocks enable during Sleep and Stop modes
						uint32_t DMA2SMEN         : 1; /// DMA2 clocks enable during Sleep and Stop modes
						uint32_t RCC_AHB1SMENR_0_DMAMUX1SMEN : 1; /// DMAMUX clock enable during Sleep and Stop modes
						uint32_t RCC_AHB1SMENR_0_CORDICSMEN : 1; /// CORDIC clock enable during sleep mode
						uint32_t RCC_AHB1SMENR_0_FMACSMEN : 1; /// FMACSM clock enable
						uint32_t                  : 3;
						uint32_t RCC_AHB1SMENR_0_FLASHSMEN : 1; /// Flash memory interface clocks enable during Sleep and Stop modes
						uint32_t SRAM1SMEN        : 1; /// SRAM1 interface clocks enable during Sleep and Stop modes
						uint32_t                  : 2;
						uint32_t RCC_AHB1SMENR_0_CRCSMEN : 1; /// CPU1 CRCSMEN
						uint32_t                  : 3;
						uint32_t RCC_AHB1SMENR_0_TSCSMEN : 1; /// Touch Sensing Controller clocks enable during Sleep and Stop modes
						uint32_t RCC_AHB1SMENR_0_DMA2DSMEN : 1; /// DMA2D clock enable during Sleep and Stop modes
						uint32_t RCC_AHB1SMENR_0_GFXMMUSMEN : 1; /// GFXMMU clock enable during Sleep and Stop modes
						uint32_t                  : 13;
					};
					#ifdef RCC_AHB1SMENR_1
					struct
					{
						uint32_t                  : 2;
						uint32_t RCC_AHB1SMENR_1_DMAMUXSMEN : 1; /// CPU1 DMAMUX clocks enable during Sleep and Stop modes
						uint32_t                  : 8;
						uint32_t RCC_AHB1SMENR_1_CRCSMEN : 1;
						uint32_t                  : 20;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_AHB2SMENR
			struct AHB2SMENR_t: public Reg32_t /// AHB2 peripheral clocks enable in Sleep and Stop modes register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t GPIOASMEN        : 1; /// IO port A clocks enable during Sleep and Stop modes
						uint32_t GPIOBSMEN        : 1; /// IO port B clocks enable during Sleep and Stop modes
						uint32_t GPIOCSMEN        : 1; /// IO port C clocks enable during Sleep and Stop modes
						uint32_t GPIODSMEN        : 1; /// IO port D clocks enable during Sleep and Stop modes
						uint32_t RCC_AHB2SMENR_0_GPIOESMEN : 1; /// IO port E clocks enable during Sleep and Stop modes
						uint32_t RCC_AHB2SMENR_0_GPIOFSMEN : 1; /// IO port F clocks enable during Sleep and Stop modes
						uint32_t RCC_AHB2SMENR_0_GPIOGSMEN : 1; /// IO port G clocks enable during Sleep and Stop modes
						uint32_t RCC_AHB2SMENR_0_GPIOHSMEN : 1; /// IO port H clocks enable during Sleep and Stop modes
						uint32_t RCC_AHB2SMENR_0_GPIOISMEN : 1; /// IO port I clocks enable during Sleep and Stop modes
						uint32_t RCC_AHB2SMENR_0_SRAM2SMEN : 1; /// SRAM2 interface clocks enable during Sleep and Stop modes
						uint32_t RCC_AHB2SMENR_0_SRAM3SMEN : 1; /// SRAM2 interface clocks enable during Sleep and Stop modes
						uint32_t                  : 1;
						uint32_t RCC_AHB2SMENR_0_OTGFSSMEN : 1; /// OTG full speed clocks enable during Sleep and Stop modes
						uint32_t RCC_AHB2SMENR_0_ADCFSSMEN : 1; /// ADC clocks enable during Sleep and Stop modes
						uint32_t RCC_AHB2SMENR_0_DCMISMEN : 1; /// DCMI clock enable during Sleep and Stop modes
						uint32_t                  : 1;
						uint32_t RCC_AHB2SMENR_0_AESSMEN : 1; /// AES accelerator clocks enable during Sleep and Stop modes
						uint32_t RCC_AHB2SMENR_0_HASHSMEN : 1; /// HASH clock enable during Sleep and Stop modes
						uint32_t RCC_AHB2SMENR_0_RNGSMEN : 1; /// Random Number Generator clocks enable during Sleep and Stop modes
						uint32_t RCC_AHB2SMENR_0_DAC4SMEN : 1; /// DAC4 clock enable during sleep mode
						uint32_t RCC_AHB2SMENR_0_OSPIMSMEN : 1; /// OctoSPI IO manager clocks enable during Sleep and Stop modes
						uint32_t                  : 1;
						uint32_t RCC_AHB2SMENR_0_SDMMC1SMEN : 1; /// SDMMC1 clocks enable during Sleep and Stop modes
						uint32_t                  : 1;
						uint32_t RCC_AHB2SMENR_0_CRYPTSMEN : 1; /// Cryptography clock enable during sleep mode
						uint32_t                  : 7;
					};
					#ifdef RCC_AHB2SMENR_1
					struct
					{
						uint32_t                  : 13;
						uint32_t AD12CSMEN        : 1; /// ADC clocks enable during Sleep and Stop modes
						uint32_t ADC345SMEN       : 1; /// DCMI clock enable during Sleep and Stop modes
						uint32_t                  : 1;
						uint32_t DAC1SMEN         : 1; /// AES accelerator clocks enable during Sleep and Stop modes
						uint32_t DAC2SMEN         : 1; /// HASH clock enable during Sleep and Stop modes
						uint32_t DAC3SMEN         : 1; /// DAC3 clock enable during sleep mode
						uint32_t                  : 7;
						uint32_t RNGSMEN          : 1; /// Random Number Generator clock enable during sleep mode
						uint32_t                  : 5;
					};
					#endif
					#ifdef RCC_AHB2SMENR_2
					struct
					{
						uint32_t                  : 16;
						uint32_t RCC_AHB2SMENR_2_AES1SMEN : 1; /// CPU1 AES1 accelerator clocks enable during Sleep and Stop modes
						uint32_t RCC_AHB2SMENR_2_HASH1SMEN : 1; /// HASH clock enable during Sleep and Stop modes
						uint32_t                  : 14;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_AHB3SMENR
			struct AHB3SMENR_t: public Reg32_t /// AHB3 peripheral clocks enable in Sleep and Stop modes register
			{
				using Reg32_t::operator=;
				union
				{
					#ifdef RCC_AHB3SMENR_0
					struct
					{
						uint32_t RCC_AHB3SMENR_0_FMCSMEN : 1; /// Flexible memory controller clocks enable during Sleep and Stop modes
						uint32_t                  : 7;
						uint32_t RCC_AHB3SMENR_0_QUADSPI1SMEN : 1; /// QUAD SPI 1 module clock enable during sleep mode
						uint32_t RCC_AHB3SMENR_0_OCTOSPI2 : 1; /// OctoSPI2 memory interface clocks enable during Sleep and Stop modes
						uint32_t                  : 6;
						uint32_t RCC_AHB3SMENR_0_PKASMEN : 1; /// PKA accelerator clocks enable during CPU1 sleep mode
						uint32_t RCC_AHB3SMENR_0_AES2SMEN : 1; /// AES2 accelerator clocks enable during CPU1 sleep mode
						uint32_t RCC_AHB3SMENR_0_RNGSMEN : 1; /// True RNG clocks enable during CPU1 sleep mode
						uint32_t                  : 5;
						uint32_t RCC_AHB3SMENR_0_SRAM2SMEN : 1; /// SRAM2a and SRAM2b memory interface clocks enable during CPU1 sleep mode
						uint32_t RCC_AHB3SMENR_0_FLASHSMEN : 1; /// Flash interface clocks enable during CPU1 sleep mode
						uint32_t                  : 6;
					};
					#endif
					#ifdef RCC_AHB3SMENR_1
					struct
					{
						uint32_t                  : 8;
						uint32_t QSPISMEN         : 1;
						uint32_t                  : 23;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_APB1SMENR1
			struct APB1SMENR1_t: public Reg32_t /// None
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t TIM2SMEN         : 1; /// TIM2 timer clocks enable during Sleep and Stop modes
						uint32_t RCC_APB1SMENR1_0_TIM3SMEN : 1; /// TIM3 timer clocks enable during Sleep and Stop modes
						uint32_t RCC_APB1SMENR1_0_TIM4SMEN : 1; /// TIM4 timer clocks enable during Sleep and Stop modes
						uint32_t RCC_APB1SMENR1_0_TIM5SMEN : 1; /// TIM5 timer clocks enable during Sleep and Stop modes
						uint32_t RCC_APB1SMENR1_0_TIM6SMEN : 1; /// TIM6 timer clocks enable during Sleep and Stop modes
						uint32_t RCC_APB1SMENR1_0_TIM7SMEN : 1; /// TIM7 timer clocks enable during Sleep and Stop modes
						uint32_t                  : 3;
						uint32_t RCC_APB1SMENR1_0_LCDSMEN : 1; /// LCD clocks enable during Sleep and Stop modes
						uint32_t RCC_APB1SMENR1_0_RTCAPBSMEN : 1; /// RTC APB clock enable during Sleep and Stop modes
						uint32_t WWDGSMEN         : 1; /// Window watchdog clocks enable during Sleep and Stop modes
						uint32_t                  : 2;
						uint32_t SPI2SMEN         : 1; /// SPI2 clocks enable during Sleep and Stop modes
						uint32_t RCC_APB1SMENR1_0_SP3SMEN : 1; /// SPI3 clocks enable during Sleep and Stop modes
						uint32_t                  : 1;
						uint32_t RCC_APB1SMENR1_0_USART2SMEN : 1; /// USART2 clocks enable during Sleep and Stop modes
						uint32_t RCC_APB1SMENR1_0_USART3SMEN : 1; /// USART3 clocks enable during Sleep and Stop modes
						uint32_t RCC_APB1SMENR1_0_UART4SMEN : 1; /// UART4 clocks enable during Sleep and Stop modes
						uint32_t RCC_APB1SMENR1_0_UART5SMEN : 1; /// UART5 clocks enable during Sleep and Stop modes
						uint32_t I2C1SMEN         : 1; /// I2C1 clocks enable during Sleep and Stop modes
						uint32_t RCC_APB1SMENR1_0_I2C2SMEN : 1; /// I2C2 clocks enable during Sleep and Stop modes
						uint32_t I2C3SMEN         : 1; /// I2C3 clocks enable during Sleep and Stop modes
						uint32_t RCC_APB1SMENR1_0_CRSSMEN : 1; /// CRS clock enable during Sleep and Stop modes
						uint32_t RCC_APB1SMENR1_0_CAN1SMEN : 1; /// CAN1 clocks enable during Sleep and Stop modes
						uint32_t RCC_APB1SMENR1_0_CAN2SMEN : 1; /// CAN2 clocks enable during Sleep and Stop modes
						uint32_t                  : 1;
						uint32_t RCC_APB1SMENR1_0_PWRSMEN : 1; /// Power interface clocks enable during Sleep and Stop modes
						uint32_t RCC_APB1SMENR1_0_DAC1SMEN : 1; /// DAC1 interface clocks enable during Sleep and Stop modes
						uint32_t RCC_APB1SMENR1_0_OPAMPSMEN : 1; /// OPAMP interface clocks enable during Sleep and Stop modes
						uint32_t LPTIM1SMEN       : 1; /// Low power timer 1 clocks enable during Sleep and Stop modes
					};
					#ifdef RCC_APB1SMENR1_1
					struct
					{
						uint32_t                  : 8;
						uint32_t RCC_APB1SMENR1_1_CRSSMEN : 1; /// CRS clock enable during sleep mode
						uint32_t                  : 8;
						uint32_t RCC_APB1SMENR1_1_USART1SMEN : 1; /// USART1 clocks enable during Sleep and Stop modes
						uint32_t RCC_APB1SMENR1_1_USART2SMEN : 1; /// USART2 clocks enable during Sleep and Stop modes
						uint32_t                  : 5;
						uint32_t RCC_APB1SMENR1_1_CRSMEN : 1; /// CRS clocks enable during CPU1 Sleep mode
						uint32_t RCC_APB1SMENR1_1_FDCANSMEN : 1; /// FDCAN clock enable during sleep mode
						uint32_t RCC_APB1SMENR1_1_USBFSSMEN : 1; /// USB FS clock enable during Sleep and Stop modes
						uint32_t                  : 3;
						uint32_t RCC_APB1SMENR1_1_I2C3SMEN_3 : 1; /// I2C 3 interface clock enable during sleep mode
						uint32_t                  : 1;
					};
					#endif
					#ifdef RCC_APB1SMENR1_2
					struct
					{
						uint32_t                  : 26;
						uint32_t USBSMEN          : 1; /// USB FS clocks enable during CPU1 Sleep mode
						uint32_t                  : 5;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_APB1SMENR2
			struct APB1SMENR2_t: public Reg32_t /// APB1 peripheral clocks enable in Sleep and Stop modes register 2
			{
				using Reg32_t::operator=;
				uint32_t LPUART1SMEN      : 1; /// Low power UART 1 clocks enable during Sleep and Stop modes
				uint32_t RCC_APB1SMENR2_I2C4SMEN : 1; /// I2C4 clocks enable during Sleep and Stop modes
				uint32_t RCC_APB1SMENR2_SWPMI1SMEN : 1; /// Single wire protocol clocks enable during Sleep and Stop modes
				uint32_t                  : 2;
				uint32_t RCC_APB1SMENR2_LPTIM2SMEN : 1; /// Low power timer 2 clocks enable during CPU1 Sleep mode
				uint32_t                  : 2;
				uint32_t RCC_APB1SMENR2_USBPDSMEN : 1; /// USB PD clock enable during sleep mode
				uint32_t                  : 23;
				
			};
			#endif
			#ifdef RCC_APB2SMENR
			struct APB2SMENR_t: public Reg32_t /// CPU2 APB2SMENR
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t RCC_APB2SMENR_0_SYSCFGSMEN : 1; /// SYSCFG clocks enable during Sleep and Stop modes
						uint32_t                  : 1;
						uint32_t RCC_APB2SMENR_0_TIM21SMEN : 1; /// TIM21 timer clock enable during sleep mode bit
						uint32_t                  : 2;
						uint32_t RCC_APB2SMENR_0_TIM22SMEN : 1; /// TIM22 timer clock enable during sleep mode bit
						uint32_t                  : 3;
						uint32_t RCC_APB2SMENR_0_ADCSMEN : 1; /// ADC clock enable during sleep mode bit
						uint32_t RCC_APB2SMENR_0_SDMMCSMEN : 1; /// SDMMC clocks enable during Sleep and Stop modes
						uint32_t RCC_APB2SMENR_0_TIM1SMEN : 1; /// TIM1 timer clocks enable during Sleep and Stop modes
						uint32_t SPI1SMEN         : 1; /// SPI1 clocks enable during Sleep and Stop modes
						uint32_t RCC_APB2SMENR_0_TIM8SMEN : 1; /// TIM8 timer clocks enable during Sleep and Stop modes
						uint32_t USART1SMEN       : 1; /// USART1clocks enable during Sleep and Stop modes
						uint32_t RCC_APB2SMENR_0_SPI4SMEN : 1; /// SPI4 timer clocks enable during Sleep and Stop modes
						uint32_t RCC_APB2SMENR_0_TIM15SMEN : 1; /// TIM15 timer clocks enable during Sleep and Stop modes
						uint32_t RCC_APB2SMENR_0_TIM16SMEN : 1; /// TIM16 timer clocks enable during Sleep and Stop modes
						uint32_t RCC_APB2SMENR_0_TIM17SMEN : 1; /// TIM17 timer clocks enable during Sleep and Stop modes
						uint32_t                  : 1;
						uint32_t RCC_APB2SMENR_0_TIM20SMEN : 1; /// Timer 20clock enable during sleep mode
						uint32_t RCC_APB2SMENR_0_SAI1SMEN : 1; /// SAI1 clocks enable during Sleep and Stop modes
						uint32_t RCC_APB2SMENR_0_SAI2SMEN : 1; /// SAI2 clocks enable during Sleep and Stop modes
						uint32_t                  : 1;
						uint32_t RCC_APB2SMENR_0_DFSDM1SMEN : 1; /// DFSDM timer clocks enable during Sleep and Stop modes
						uint32_t                  : 1;
						uint32_t RCC_APB2SMENR_0_LTDCSMEN : 1; /// LCD-TFT timer clocks enable during Sleep and Stop modes
						uint32_t RCC_APB2SMENR_0_DSISMEN : 1; /// DSI clocks enable during Sleep and Stop modes
						uint32_t                  : 4;
					};
					#ifdef RCC_APB2SMENR_1
					struct
					{
						uint32_t                  : 22;
						uint32_t RCC_APB2SMENR_1_DBGSMEN : 1; /// DBG clock enable during sleep mode bit
						uint32_t                  : 1;
						uint32_t RCC_APB2SMENR_1_DFSDMSMEN : 1; /// DFSDM timer clocks enable during Sleep and Stop modes
						uint32_t                  : 1;
						uint32_t RCC_APB2SMENR_1_HRTIMERSMEN : 1; /// HRTIMER clock enable during sleep mode
						uint32_t                  : 5;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_CCIPR
			struct CCIPR_t: public Reg32_t /// Peripherals independent clock configuration register
			{
				using Reg32_t::operator=;
				union
				{
					#ifdef RCC_CCIPR_0
					struct
					{
						uint32_t USART1SEL        : 2; /// USART1 clock source selection
						uint32_t RCC_CCIPR_0_USART2SEL : 2; /// USART2 clock source selection
						uint32_t RCC_CCIPR_0_USART3SEL : 2; /// USART3 clock source selection
						uint32_t RCC_CCIPR_0_UART4SEL : 2; /// UART4 clock source selection
						uint32_t RCC_CCIPR_0_UART5SEL : 2; /// UART5 clock source selection
						uint32_t LPUART1SEL       : 2; /// LPUART1 clock source selection
						uint32_t I2C1SEL          : 2; /// I2C1 clock source selection
						uint32_t RCC_CCIPR_0_I2C2SEL : 2; /// I2C2 clock source selection
						uint32_t RCC_CCIPR_0_I2C3SEL : 2; /// I2C3 clock source selection
						uint32_t LPTIM1SEL        : 2; /// Low power timer 1 clock source selection
						uint32_t LPTIM2SEL        : 2; /// Low power timer 2 clock source selection
						uint32_t RCC_CCIPR_0_SAI1SEL : 2; /// SAI1 clock source selection
						uint32_t RCC_CCIPR_0_SAI2SEL : 2; /// SAI2 clock source selection
						uint32_t RCC_CCIPR_0_CLK48SEL : 2; /// 48 MHz clock source selection
						uint32_t RCC_CCIPR_0_ADCSEL : 2; /// ADCs clock source selection
						uint32_t RCC_CCIPR_0_SWPMI1SEL : 1; /// SWPMI1 clock source selection
						uint32_t RCC_CCIPR_0_DFSDMSEL : 1; /// DFSDM clock source selection
					};
					#endif
					#ifdef RCC_CCIPR_1
					struct
					{
						uint32_t RCC_CCIPR_1_USART1SEL0 : 1;
						uint32_t RCC_CCIPR_1_USART1SEL1 : 1; /// USART1 clock source selection bits
						uint32_t RCC_CCIPR_1_USART2SEL0 : 1;
						uint32_t RCC_CCIPR_1_USART2SEL1 : 1; /// USART2 clock source selection bits
						uint32_t                  : 2;
						uint32_t RCC_CCIPR_1_USART4SEL : 2; /// USART4 clock source selection
						uint32_t                  : 2;
						uint32_t RCC_CCIPR_1_LPUART1SEL0 : 1;
						uint32_t RCC_CCIPR_1_LPUART1SEL1 : 1; /// LPUART1 clock source selection bits
						uint32_t RCC_CCIPR_1_I2C1SEL0 : 1;
						uint32_t RCC_CCIPR_1_I2C1SEL1 : 1; /// I2C1 clock source selection bits
						uint32_t RCC_CCIPR_1_I2S2SEL : 2; /// I2S1 clock source selection
						uint32_t RCC_CCIPR_1_I2C3SEL0 : 1; /// I2C3 clock source selection bits
						uint32_t RCC_CCIPR_1_I2C3SEL1 : 1; /// I2C3 clock source selection bits
						uint32_t RCC_CCIPR_1_LPTIM1SEL0 : 1;
						uint32_t RCC_CCIPR_1_LPTIM1SEL1 : 1; /// Low Power Timer clock source selection bits
						uint32_t                  : 2;
						uint32_t RCC_CCIPR_1_TIM1SEL : 1; /// TIM1 clock source selection
						uint32_t                  : 1;
						uint32_t RCC_CCIPR_1_TIM15SEL : 1; /// TIM15 clock source selection
						uint32_t                  : 1;
						uint32_t RCC_CCIPR_1_HSI48MSEL : 1; /// 48 MHz HSI48 clock source selection bit
						uint32_t                  : 1;
						uint32_t RCC_CCIPR_1_RNGDIV : 2; /// Division factor of RNG clock divider
						uint32_t RCC_CCIPR_1_RNGSEL : 2; /// RNG clock source selection
					};
					#endif
					#ifdef RCC_CCIPR_2
					struct
					{
						uint32_t                  : 6;
						uint32_t RCC_CCIPR_2_CECSEL : 1; /// HDMI CEC clock source selection
						uint32_t                  : 19;
						uint32_t RNGSEL           : 2; /// RNG clock source selection
						uint32_t                  : 2;
						uint32_t ADCSEL           : 2; /// ADCs clock source selection
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_CCIPR2
			struct CCIPR2_t: public Reg32_t /// Peripherals independent clock configuration register
			{
				using Reg32_t::operator=;
				union
				{
					#ifdef RCC_CCIPR2_0
					struct
					{
						uint32_t I2C4SEL          : 2; /// I2C4 clock source selection
						uint32_t RCC_CCIPR2_0_DFSDMSEL : 1; /// Digital filter for sigma delta modulator kernel clock source selection
						uint32_t RCC_CCIPR2_0_ADFSDMSEL : 2; /// Digital filter for sigma delta modulator audio clock source selection
						uint32_t RCC_CCIPR2_0_SAI1SEL : 3; /// SAI1 clock source selection
						uint32_t RCC_CCIPR2_0_SAI2SEL : 3; /// SAI2 clock source selection
						uint32_t                  : 1;
						uint32_t RCC_CCIPR2_0_DSISEL : 1; /// clock selection
						uint32_t                  : 1;
						uint32_t RCC_CCIPR2_0_SDMMCSEL : 1; /// SDMMC clock selection
						uint32_t                  : 1;
						uint32_t RCC_CCIPR2_0_PLLSAI2DIVR : 2; /// division factor for LTDC clock
						uint32_t                  : 2;
						uint32_t RCC_CCIPR2_0_OSPISEL : 2; /// Octospi clock source selection
						uint32_t                  : 10;
					};
					#endif
					#ifdef RCC_CCIPR2_1
					struct
					{
						uint32_t RCC_CCIPR2_1_I2C4SEL_0 : 1; /// I2C4 clock source selection
						uint32_t RCC_CCIPR2_1_I2C4SEL_1 : 1; /// I2C4 clock source selection
						uint32_t                  : 18;
						uint32_t RCC_CCIPR2_1_QUADSPISEL : 2; /// Octospi clock source selection
						uint32_t                  : 10;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_CIR
			struct CIR_t: public Reg32_t /// clock interrupt register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t LSIRDYF          : 1; /// LSI ready interrupt flag
						uint32_t LSERDYF          : 1; /// LSE ready interrupt flag
						uint32_t HSIRDYF          : 1; /// HSI ready interrupt flag
						uint32_t HSERDYF          : 1; /// HSE ready interrupt flag
						uint32_t PLLRDYF          : 1; /// Main PLL (PLL) ready interrupt flag
						uint32_t RCC_CIR_0_PLLI2SRDYF : 1; /// PLLI2S ready interrupt flag
						uint32_t RCC_CIR_0_PLLSAIRDYF : 1; /// PLLSAI ready interrupt flag
						uint32_t CSSF             : 1; /// Clock security system interrupt flag
						uint32_t LSIRDYIE         : 1; /// LSI ready interrupt enable
						uint32_t LSERDYIE         : 1; /// LSE ready interrupt enable
						uint32_t HSIRDYIE         : 1; /// HSI ready interrupt enable
						uint32_t HSERDYIE         : 1; /// HSE ready interrupt enable
						uint32_t PLLRDYIE         : 1; /// Main PLL (PLL) ready interrupt enable
						uint32_t RCC_CIR_0_PLLI2SRDYIE : 1; /// PLLI2S ready interrupt enable
						uint32_t RCC_CIR_0_PLLSAIRDYIE : 1; /// PLLSAI Ready Interrupt Enable
						uint32_t                  : 1;
						uint32_t LSIRDYC          : 1; /// LSI ready interrupt clear
						uint32_t LSERDYC          : 1; /// LSE ready interrupt clear
						uint32_t HSIRDYC          : 1; /// HSI ready interrupt clear
						uint32_t HSERDYC          : 1; /// HSE ready interrupt clear
						uint32_t PLLRDYC          : 1; /// Main PLL(PLL) ready interrupt clear
						uint32_t RCC_CIR_0_PLLI2SRDYC : 1; /// PLLI2S ready interrupt clear
						uint32_t RCC_CIR_0_PLLSAIRDYC : 1; /// PLLSAI Ready Interrupt Clear
						uint32_t CSSC             : 1; /// Clock security system interrupt clear
						uint32_t                  : 8;
					};
					#ifdef RCC_CIR_1
					struct
					{
						uint32_t                  : 5;
						uint32_t HSI14RDYF        : 1; /// HSI14 ready interrupt flag
						uint32_t HSI48RDYF        : 1; /// HSI48 ready interrupt flag
						uint32_t                  : 6;
						uint32_t HSI14RDYE        : 1; /// HSI14 ready interrupt enable
						uint32_t HSI48RDYIE       : 1; /// HSI48 ready interrupt enable
						uint32_t                  : 6;
						uint32_t HSI14RDYC        : 1; /// HSI 14 MHz Ready Interrupt Clear
						uint32_t HSI48RDYC        : 1; /// HSI48 Ready Interrupt Clear
						uint32_t                  : 9;
					};
					#endif
					#ifdef RCC_CIR_2
					struct
					{
						uint32_t                  : 5;
						uint32_t MSIRDYF          : 1; /// MSI ready interrupt flag
						uint32_t RCC_CIR_2_LSECSSF : 1; /// LSE CSS Interrupt flag
						uint32_t                  : 6;
						uint32_t MSIRDYIE         : 1; /// MSI ready interrupt enable
						uint32_t RCC_CIR_2_LSECSSIE : 1; /// LSE CSS interrupt enable
						uint32_t                  : 6;
						uint32_t MSIRDYC          : 1; /// MSI ready interrupt clear
						uint32_t RCC_CIR_2_LSECSSC : 1; /// LSE CSS interrupt clear
						uint32_t                  : 9;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_APB1RSTR
			struct APB1RSTR_t: public Reg32_t /// APB1 peripheral reset register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t RCC_APB1RSTR_0_TIM2RST : 1; /// TIM2 reset
						uint32_t RCC_APB1RSTR_0_TIM3RST : 1; /// TIM3 reset
						uint32_t RCC_APB1RSTR_0_TIM4RST : 1; /// TIM4 reset
						uint32_t RCC_APB1RSTR_0_TIM5RST : 1; /// TIM5 reset
						uint32_t RCC_APB1RSTR_0_TIM6RST : 1; /// TIM6 reset
						uint32_t RCC_APB1RSTR_0_TIM7RST : 1; /// TIM7 reset
						uint32_t RCC_APB1RSTR_0_TIM12RST : 1; /// TIM12 reset
						uint32_t RCC_APB1RSTR_0_TIM13RST : 1; /// TIM13 reset
						uint32_t RCC_APB1RSTR_0_TIM14RST : 1; /// TIM14 reset
						uint32_t RCC_APB1RSTR_0_LPTIM1RST : 1; /// Low power timer 1 reset
						uint32_t                  : 1;
						uint32_t RCC_APB1RSTR_0_WWDGRST : 1; /// Window watchdog reset
						uint32_t                  : 2;
						uint32_t RCC_APB1RSTR_0_SPI2RST : 1; /// SPI 2 reset
						uint32_t RCC_APB1RSTR_0_SPI3RST : 1; /// SPI 3 reset
						uint32_t RCC_APB1RSTR_0_SPDIFRXRST : 1; /// SPDIF-RX reset
						uint32_t RCC_APB1RSTR_0_UART2RST : 1; /// USART 2 reset
						uint32_t RCC_APB1RSTR_0_UART3RST : 1; /// USART 3 reset
						uint32_t RCC_APB1RSTR_0_UART4RST : 1; /// USART 4 reset
						uint32_t RCC_APB1RSTR_0_UART5RST : 1; /// USART 5 reset
						uint32_t I2C1RST          : 1; /// I2C 1 reset
						uint32_t RCC_APB1RSTR_0_I2C2RST : 1; /// I2C 2 reset
						uint32_t RCC_APB1RSTR_0_I2C3RST : 1; /// I2C3 reset
						uint32_t RCC_APB1RSTR_0_I2C4RST : 1; /// I2C 4 reset
						uint32_t RCC_APB1RSTR_0_CAN1RST : 1; /// CAN1 reset
						uint32_t RCC_APB1RSTR_0_CAN2RST : 1; /// CAN2 reset
						uint32_t RCC_APB1RSTR_0_CECRST : 1; /// HDMI-CEC reset
						uint32_t PWRRST           : 1; /// Power interface reset
						uint32_t RCC_APB1RSTR_0_DACRST : 1; /// DAC reset
						uint32_t RCC_APB1RSTR_0_UART7RST : 1; /// UART7 reset
						uint32_t RCC_APB1RSTR_0_UART8RST : 1; /// UART8 reset
					};
					#ifdef RCC_APB1RSTR_1
					struct
					{
						uint32_t                  : 9;
						uint32_t RCC_APB1RSTR_1_LPTIMER1RST : 1; /// LPTimer1 reset
						uint32_t                  : 1;
						uint32_t RCC_APB1RSTR_1_WWDRST : 1; /// Window watchdog reset
						uint32_t                  : 4;
						uint32_t RCC_APB1RSTR_1_SPDIFRST : 1; /// SPDIF-IN reset
						uint32_t RCC_APB1RSTR_1_USART2RST : 1; /// USART 2 reset
						uint32_t RCC_APB1RSTR_1_USART3RST : 1; /// USART3 reset
						uint32_t RCC_APB1RSTR_1_USART4RST : 1; /// USART4 reset
						uint32_t RCC_APB1RSTR_1_USART5RST : 1; /// USART5 reset
						uint32_t                  : 2;
						uint32_t RCC_APB1RSTR_1_USBRST : 1; /// USB reset
						uint32_t RCC_APB1RSTR_1_I2CFMP1RST : 1; /// I2CFMP1 reset
						uint32_t RCC_APB1RSTR_1_CANRST : 1; /// CAN reset
						uint32_t RCC_APB1RSTR_1_DAC2RST : 1; /// DAC2 interface reset
						uint32_t RCC_APB1RSTR_1_CAN3RST : 1; /// CAN 3 reset
						uint32_t                  : 1;
						uint32_t RCC_APB1RSTR_1_DAC1RST : 1; /// DAC1 interface reset
						uint32_t RCC_APB1RSTR_1_I2C3RST : 1; /// I2C3 reset
						uint32_t RCC_APB1RSTR_1_LPTIM1RST : 1; /// Low power timer reset
					};
					#endif
					#ifdef RCC_APB1RSTR_2
					struct
					{
						uint32_t                  : 9;
						uint32_t RCC_APB1RSTR_2_TIM18RST : 1; /// Timer 18 reset
						uint32_t                  : 7;
						uint32_t RCC_APB1RSTR_2_LPUART12RST : 1; /// UART2 reset
						uint32_t RCC_APB1RSTR_2_LPUART1RST : 1; /// LPUART1 reset
						uint32_t                  : 7;
						uint32_t RCC_APB1RSTR_2_DAC3RST : 1; /// DAC3 reset
						uint32_t RCC_APB1RSTR_2_CRSRST : 1; /// Clock Recovery System interface reset
						uint32_t                  : 2;
						uint32_t RCC_APB1RSTR_2_CECRST : 1; /// HDMI CEC reset
						uint32_t RCC_APB1RSTR_2_COMPRST : 1; /// COMP interface reset
					};
					#endif
					#ifdef RCC_APB1RSTR_3
					struct
					{
						uint32_t                  : 9;
						uint32_t RCC_APB1RSTR_3_LCDRST : 1; /// LCD reset
						uint32_t                  : 17;
						uint32_t RCC_APB1RSTR_3_CRCRST : 1; /// CRC reset
						uint32_t                  : 2;
						uint32_t RCC_APB1RSTR_3_I2C3 : 1; /// I2C3 reset
						uint32_t                  : 1;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_APB1ENR
			struct APB1ENR_t: public Reg32_t /// APB1 peripheral clock enable register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t RCC_APB1ENR_0_TIM2EN : 1; /// TIM2 clock enable
						uint32_t RCC_APB1ENR_0_TIM3EN : 1; /// TIM3 clock enable
						uint32_t RCC_APB1ENR_0_TIM4EN : 1; /// TIM4 clock enable
						uint32_t RCC_APB1ENR_0_TIM5EN : 1; /// TIM5 clock enable
						uint32_t RCC_APB1ENR_0_TIM6EN : 1; /// TIM6 clock enable
						uint32_t RCC_APB1ENR_0_TIM7EN : 1; /// TIM7 clock enable
						uint32_t RCC_APB1ENR_0_TIM12EN : 1; /// TIM12 clock enable
						uint32_t RCC_APB1ENR_0_TIM13EN : 1; /// TIM13 clock enable
						uint32_t RCC_APB1ENR_0_TIM14EN : 1; /// TIM14 clock enable
						uint32_t RCC_APB1ENR_0_LPTMI1EN : 1; /// Low power timer 1 clock enable
						uint32_t RCC_APB1ENR_0_RTCAPBEN : 1; /// RTCAPB clock enable
						uint32_t WWDGEN           : 1; /// Window watchdog clock enable
						uint32_t                  : 2;
						uint32_t RCC_APB1ENR_0_SPI2EN : 1; /// SPI2 clock enable
						uint32_t RCC_APB1ENR_0_SPI3EN : 1; /// SPI3 clock enable
						uint32_t RCC_APB1ENR_0_SPDIFRXEN : 1; /// SPDIF-RX clock enable
						uint32_t USART2EN         : 1; /// USART 2 clock enable
						uint32_t RCC_APB1ENR_0_USART3EN : 1; /// USART3 clock enable
						uint32_t RCC_APB1ENR_0_UART4EN : 1; /// UART4 clock enable
						uint32_t RCC_APB1ENR_0_UART5EN : 1; /// UART5 clock enable
						uint32_t I2C1EN           : 1; /// I2C1 clock enable
						uint32_t RCC_APB1ENR_0_I2C2EN : 1; /// I2C2 clock enable
						uint32_t RCC_APB1ENR_0_I2C3EN : 1; /// I2C3 clock enable
						uint32_t RCC_APB1ENR_0_I2C4EN : 1; /// I2C4 clock enable
						uint32_t RCC_APB1ENR_0_CAN1EN : 1; /// CAN 1 clock enable
						uint32_t RCC_APB1ENR_0_CAN2EN : 1; /// CAN 2 clock enable
						uint32_t RCC_APB1ENR_0_CECEN : 1; /// HDMI-CEN clock enable
						uint32_t PWREN            : 1; /// Power interface clock enable
						uint32_t RCC_APB1ENR_0_DACEN : 1; /// DAC interface clock enable
						uint32_t RCC_APB1ENR_0_UART7ENR : 1; /// UART7 clock enable
						uint32_t RCC_APB1ENR_0_UART8ENR : 1; /// UART8 clock enable
					};
					#ifdef RCC_APB1ENR_1
					struct
					{
						uint32_t                  : 2;
						uint32_t RCC_APB1ENR_1_TIM3EN : 1; /// Timer 3 clock enbale bit
						uint32_t                  : 6;
						uint32_t RCC_APB1ENR_1_LPTIM1EN : 1; /// Low power timer 1 clock enable
						uint32_t RCC_APB1ENR_1_RTCAPB : 1; /// clock enable
						uint32_t                  : 5;
						uint32_t RCC_APB1ENR_1_SPDIFEN : 1; /// SPDIF-IN clock enable
						uint32_t                  : 1;
						uint32_t RCC_APB1ENR_1_LPUART1EN : 1; /// LPUART1 clock enable bit
						uint32_t RCC_APB1ENR_1_USART4EN : 1; /// USART4 clock enable
						uint32_t RCC_APB1ENR_1_USART5EN : 1; /// USART5 clock enable
						uint32_t                  : 2;
						uint32_t RCC_APB1ENR_1_USBEN : 1; /// USB clock enable
						uint32_t RCC_APB1ENR_1_I2CFMP1EN : 1; /// I2CFMP1 clock enable
						uint32_t RCC_APB1ENR_1_CANEN : 1; /// CAN clock enable
						uint32_t RCC_APB1ENR_1_DAC2EN : 1; /// DAC2 clock enable
						uint32_t RCC_APB1ENR_1_CEC : 1; /// CEC interface clock enable
						uint32_t                  : 1;
						uint32_t RCC_APB1ENR_1_DAC1EN : 1; /// DAC1 interface clock enable
						uint32_t RCC_APB1ENR_1_UART7EN : 1; /// UART7 clock enable
						uint32_t RCC_APB1ENR_1_UART8EN : 1; /// UART8 clock enable
					};
					#endif
					#ifdef RCC_APB1ENR_2
					struct
					{
						uint32_t                  : 9;
						uint32_t RCC_APB1ENR_2_LPTIMER1EN : 1; /// LPTimer 1 clock enable
						uint32_t                  : 13;
						uint32_t RCC_APB1ENR_2_USBRST : 1; /// USB interface clock enable
						uint32_t                  : 2;
						uint32_t RCC_APB1ENR_2_DAC3EN : 1; /// DAC3 interface clock enable
						uint32_t RCC_APB1ENR_2_CAN3EN : 1; /// CAN 3 clock enable
						uint32_t                  : 2;
						uint32_t RCC_APB1ENR_2_I2C3EN : 1; /// I2C 3 clock enable
						uint32_t RCC_APB1ENR_2_LPTIM1EN : 1; /// Low power timer clock enable bit
					};
					#endif
					#ifdef RCC_APB1ENR_3
					struct
					{
						uint32_t                  : 9;
						uint32_t RCC_APB1ENR_3_TIM18EN : 1; /// Timer 18 clock enable
						uint32_t                  : 17;
						uint32_t RCC_APB1ENR_3_CRSEN : 1; /// Clock Recovery System interface clock enable
						uint32_t                  : 2;
						uint32_t RCC_APB1ENR_3_CECEN : 1; /// HDMI CEC interface clock enable
						uint32_t RCC_APB1ENR_3_COMPEN : 1; /// COMP interface clock enable
					};
					#endif
					#ifdef RCC_APB1ENR_4
					struct
					{
						uint32_t                  : 9;
						uint32_t LCDEN            : 1; /// LCD clock enable bit
						uint32_t                  : 22;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_APB1LPENR
			struct APB1LPENR_t: public Reg32_t /// APB1 peripheral clock enable in low power mode register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t RCC_APB1LPENR_0_TIM2LPEN : 1; /// TIM2 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_TIM3LPEN : 1; /// TIM3 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_TIM4LPEN : 1; /// TIM4 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_TIM5LPEN : 1; /// TIM5 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_TIM6LPEN : 1; /// TIM6 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_TIM7LPEN : 1; /// TIM7 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_TIM12LPEN : 1; /// TIM12 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_TIM13LPEN : 1; /// TIM13 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_TIM14LPEN : 1; /// TIM14 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_LPTIM1LPEN : 1; /// low power timer 1 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_RTCAPBEN : 1; /// RTC APB clock enable during Sleep mode
						uint32_t WWDGLPEN         : 1; /// Window watchdog clock enable during Sleep mode
						uint32_t                  : 2;
						uint32_t SPI2LPEN         : 1; /// SPI2 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_SPI3LPEN : 1; /// SPI3 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_SPDIFRXLPEN : 1; /// SPDIF-RX clock enable during sleep mode
						uint32_t USART2LPEN       : 1; /// USART2 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_USART3LPEN : 1; /// USART3 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_UART4LPEN : 1; /// UART4 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_UART5LPEN : 1; /// UART5 clock enable during Sleep mode
						uint32_t I2C1LPEN         : 1; /// I2C1 clock enable during Sleep mode
						uint32_t I2C2LPEN         : 1; /// I2C2 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_I2C3LPEN : 1; /// I2C3 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_I2C4LPEN : 1; /// I2C4 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_CAN1LPEN : 1; /// CAN 1 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_CAN2LPEN : 1; /// CAN 2 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_CECLPEN : 1; /// HDMI-CEN clock enable during Sleep mode
						uint32_t PWRLPEN          : 1; /// Power interface clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_DACLPEN : 1; /// DAC interface clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_UART7LPEN : 1; /// UART7 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_0_UART8LPEN : 1; /// UART8 clock enable during Sleep mode
					};
					#ifdef RCC_APB1LPENR_1
					struct
					{
						uint32_t                  : 9;
						uint32_t RCC_APB1LPENR_1_LPTIMER1LPEN : 1; /// TIM14 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_1_RTCAPBLPEN : 1; /// RTC APB clock enable during sleep mode
						uint32_t                  : 5;
						uint32_t RCC_APB1LPENR_1_SPDIFLPEN : 1; /// SPDIF clock enable during Sleep mode
						uint32_t                  : 2;
						uint32_t RCC_APB1LPENR_1_USART4LPEN : 1; /// USART4 clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_1_USART5LPEN : 1; /// USART5 clock enable during Sleep mode
						uint32_t                  : 2;
						uint32_t RCC_APB1LPENR_1_USBLPEN : 1; /// USB clock enable during Sleep mode
						uint32_t RCC_APB1LPENR_1_I2CFMP1LPEN : 1; /// I2CFMP1 clock enable during Sleep mode
						uint32_t                  : 2;
						uint32_t RCC_APB1LPENR_1_CAN3LPEN : 1; /// CAN3 clock enable during Sleep mode
						uint32_t                  : 3;
						uint32_t RCC_APB1LPENR_1_COMPLPEN : 1; /// COMP interface clock enable during Sleep mode
					};
					#endif
					#ifdef RCC_APB1LPENR_2
					struct
					{
						uint32_t                  : 9;
						uint32_t LCDLPEN          : 1; /// LCD clock enable during Sleep mode
						uint32_t                  : 22;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_SSCGR
			struct SSCGR_t: public Reg32_t /// spread spectrum clock generation register
			{
				using Reg32_t::operator=;
				uint32_t MODPER           : 13; /// Modulation period
				uint32_t INCSTEP          : 15; /// Incrementation step
				uint32_t                  : 2;
				uint32_t SPREADSEL        : 1; /// Spread Select
				uint32_t SSCGEN           : 1; /// Spread spectrum modulation enable
				
			};
			#endif
			#ifdef RCC_PLLI2SCFGR
			struct PLLI2SCFGR_t: public Reg32_t /// PLLI2S configuration register
			{
				using Reg32_t::operator=;
				union
				{
					#ifdef RCC_PLLI2SCFGR_0
					struct
					{
						uint32_t RCC_PLLI2SCFGR_0_PLLI2SM : 6; /// Division factor for audio PLL (PLLI2S) input clock
						uint32_t PLLI2SN          : 9; /// PLLI2S multiplication factor for VCO
						uint32_t                  : 1;
						uint32_t RCC_PLLI2SCFGR_0_PLLI2SP : 2; /// PLLI2S division factor for SPDIF-IN clock
						uint32_t                  : 4;
						uint32_t RCC_PLLI2SCFGR_0_PLLI2SSRC : 1; /// PLLI2S entry clock source
						uint32_t                  : 1;
						uint32_t PLLI2SQ          : 4; /// PLLI2S division factor for SAI1 clock
						uint32_t PLLI2SR          : 3; /// PLLI2S division factor for I2S clocks
						uint32_t                  : 1;
					};
					#endif
					#ifdef RCC_PLLI2SCFGR_1
					struct
					{
						uint32_t                  : 6;
						uint32_t PLLI2SNx         : 9; /// PLLI2S multiplication factor for VCO
						uint32_t                  : 13;
						uint32_t PLLI2SRx         : 3; /// PLLI2S division factor for I2S clocks
						uint32_t                  : 1;
					};
					#endif
					#ifdef RCC_PLLI2SCFGR_2
					struct
					{
						uint32_t                  : 6;
						uint32_t PLLI2SN0         : 1; /// PLLI2S multiplication factor for VCO
						uint32_t PLLI2SN1         : 1; /// PLLI2S multiplication factor for VCO
						uint32_t PLLI2SN2         : 1; /// PLLI2S multiplication factor for VCO
						uint32_t PLLI2SN3         : 1; /// PLLI2S multiplication factor for VCO
						uint32_t PLLI2SN4         : 1; /// PLLI2S multiplication factor for VCO
						uint32_t PLLI2SN5         : 1; /// PLLI2S multiplication factor for VCO
						uint32_t PLLI2SN6         : 1; /// PLLI2S multiplication factor for VCO
						uint32_t PLLI2SN7         : 1; /// PLLI2S multiplication factor for VCO
						uint32_t PLLI2SN8         : 1; /// PLLI2S multiplication factor for VCO
						uint32_t                  : 13;
						uint32_t PLLI2SR0         : 1; /// PLLI2S division factor for I2S clocks
						uint32_t PLLI2SR1         : 1; /// PLLI2S division factor for I2S clocks
						uint32_t PLLI2SR2         : 1; /// PLLI2S division factor for I2S clocks
						uint32_t                  : 1;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_PLLSAICFGR
			struct PLLSAICFGR_t: public Reg32_t /// PLL configuration register
			{
				using Reg32_t::operator=;
				uint32_t RCC_PLLSAICFGR_PLLSAIM : 6; /// Division factor for audio PLLSAI input clock
				uint32_t PLLSAIN          : 9; /// PLLSAI division factor for VCO
				uint32_t                  : 1;
				uint32_t RCC_PLLSAICFGR_PLLSAIP : 2; /// PLLSAI division factor for 48MHz clock
				uint32_t                  : 6;
				uint32_t PLLSAIQ          : 4; /// PLLSAI division factor for SAI clock
				uint32_t RCC_PLLSAICFGR_PLLSAIR : 3; /// PLLSAI division factor for LCD clock
				uint32_t                  : 1;
				
			};
			#endif
			#ifdef RCC_DKCFGR1
			struct DKCFGR1_t: public Reg32_t /// dedicated clocks configuration register
			{
				using Reg32_t::operator=;
				uint32_t PLLI2SDIV        : 5; /// PLLI2S division factor for SAI1 clock
				uint32_t                  : 3;
				uint32_t PLLSAIDIVQ       : 5; /// PLLSAI division factor for SAI1 clock
				uint32_t                  : 3;
				uint32_t PLLSAIDIVR       : 2; /// division factor for LCD_CLK
				uint32_t                  : 2;
				uint32_t SAI1SEL          : 2; /// SAI1 clock source selection
				uint32_t SAI2SEL          : 2; /// SAI2 clock source selection
				uint32_t TIMPRE           : 1; /// Timers clocks prescalers selection
				uint32_t                  : 7;
				
			};
			#endif
			#ifdef RCC_DKCFGR2
			struct DKCFGR2_t: public Reg32_t /// dedicated clocks configuration register
			{
				using Reg32_t::operator=;
				uint32_t USART1SEL        : 2; /// USART 1 clock source selection
				uint32_t USART2SEL        : 2; /// USART 2 clock source selection
				uint32_t USART3SEL        : 2; /// USART 3 clock source selection
				uint32_t UART4SEL         : 2; /// UART 4 clock source selection
				uint32_t UART5SEL         : 2; /// UART 5 clock source selection
				uint32_t USART6SEL        : 2; /// USART 6 clock source selection
				uint32_t UART7SEL         : 2; /// UART 7 clock source selection
				uint32_t UART8SEL         : 2; /// UART 8 clock source selection
				uint32_t I2C1SEL          : 2; /// I2C1 clock source selection
				uint32_t I2C2SEL          : 2; /// I2C2 clock source selection
				uint32_t I2C3SEL          : 2; /// I2C3 clock source selection
				uint32_t I2C4SEL          : 2; /// I2C4 clock source selection
				uint32_t LPTIM1SEL        : 2; /// Low power timer 1 clock source selection
				uint32_t CECSEL           : 1; /// HDMI-CEC clock source selection
				uint32_t CK48MSEL         : 1; /// 48MHz clock source selection
				uint32_t SDMMCSEL         : 1; /// SDMMC clock source selection
				uint32_t                  : 3;
				
			};
			#endif
			#ifdef RCC_PLLSYSCFGR
			struct PLLSYSCFGR_t: public Reg32_t /// PLL configuration register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t PLLSRC           : 2; /// Main PLL, PLLSAI1 and PLLSAI2 entry clock source
						uint32_t                  : 2;
						uint32_t RCC_PLLSYSCFGR_0_PLLSYSM : 4; /// Division factor for the main PLL and audio PLL (PLLSAI1 and PLLSAI2) input clock
						uint32_t RCC_PLLSYSCFGR_0_PLLSYSN : 7; /// Main PLL multiplication factor for VCO
						uint32_t                  : 1;
						uint32_t PLLPEN           : 1; /// Main PLL PLLSAI3CLK output enable
						uint32_t RCC_PLLSYSCFGR_0_PLLSYSP : 1; /// Main PLL division factor for PLLSAI3CLK (SAI1 and SAI2 clock)
						uint32_t                  : 2;
						uint32_t RCC_PLLSYSCFGR_0_PLLSYSQEN : 1; /// Main PLL PLLUSB1CLK output enable
						uint32_t RCC_PLLSYSCFGR_0_PLLSYSQ : 2; /// Main PLL division factor for PLLUSB1CLK(48 MHz clock)
						uint32_t                  : 1;
						uint32_t RCC_PLLSYSCFGR_0_PLLSYSREN : 1; /// Main PLL PLLCLK output enable
						uint32_t RCC_PLLSYSCFGR_0_PLLSYSR : 2; /// Main PLL division factor for PLLCLK (system clock)
						uint32_t RCC_PLLSYSCFGR_0_PLLSYSPDIV : 5; /// Main PLL division factor for PLLSAI2CLK
					};
					#ifdef RCC_PLLSYSCFGR_1
					struct
					{
						uint32_t                  : 4;
						uint32_t PLLM             : 3; /// Division factor M of the PLL input clock divider
						uint32_t                  : 1;
						uint32_t PLLN             : 7; /// PLL frequency multiplication factor N
						uint32_t                  : 2;
						uint32_t PLLP             : 5; /// PLL VCO division factor P for PLLPCLK clock output
						uint32_t                  : 2;
						uint32_t PLLQEN           : 1; /// PLLQCLK clock output enable
						uint32_t PLLQ             : 3; /// PLL VCO division factor Q for PLLQCLK clock output
						uint32_t PLLREN           : 1; /// PLLRCLK clock output enable
						uint32_t PLLR             : 3; /// PLL VCO division factor R for PLLRCLK clock output
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_CCIPR1
			struct CCIPR1_t: public Reg32_t /// CCIPR
			{
				using Reg32_t::operator=;
				uint32_t USART1SEL        : 2; /// USART1 clock source selection
				uint32_t USART2SEL        : 2; /// USART2 clock source selection
				uint32_t USART3SEL        : 2; /// USART3 clock source selection
				uint32_t UART4SEL         : 2; /// UART4 clock source selection
				uint32_t UART5SEL         : 2; /// UART5 clock source selection
				uint32_t LPUART1SEL       : 2; /// LPUART1 clock source selection
				uint32_t I2C1SEL          : 2; /// I2C1 clock source selection
				uint32_t I2C2SEL          : 2; /// I2C2 clock source selection
				uint32_t I2C3SEL          : 2; /// I2C3 clock source selection
				uint32_t LPTIM1SEL        : 2; /// Low power timer 1 clock source selection
				uint32_t SAISEL           : 2; /// Low power timer 2 clock source selection
				uint32_t SPISEL_          : 2; /// SAI1 clock source selection
				uint32_t FDCANSEL         : 2; /// SAI2 clock source selection
				uint32_t CLK48SEL         : 2; /// 48 MHz clock source selection
				uint32_t ADCSEL           : 2; /// ADCs clock source selection
				uint32_t ADC345SEL        : 2; /// ADC3/4/5 clock source selection
				
			};
			#endif
			#ifdef RCC_DCKCFGR
			struct DCKCFGR_t: public Reg32_t /// Dedicated Clock Configuration Register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t RCC_DCKCFGR_0_PLLIS2DIVQ : 5; /// PLLI2S division factor for SAIs clock
						uint32_t                  : 3;
						uint32_t RCC_DCKCFGR_0_PLLSAIDIVQ : 5; /// PLLSAI division factor for SAIs clock
						uint32_t                  : 2;
						uint32_t RCC_DCKCFGR_0_CKDFSDM1ASEL : 1; /// DFSDM1 audio clock selection.
						uint32_t RCC_DCKCFGR_0_PLLSAIDIVR : 2;
						uint32_t                  : 2;
						uint32_t RCC_DCKCFGR_0_SAI1ASRC : 2; /// SAI1 clock source selection
						uint32_t RCC_DCKCFGR_0_SAI1BSRC : 2; /// SAI1-B clock source selection
						uint32_t TIMPRE           : 1; /// Timers clocks prescalers selection
						uint32_t RCC_DCKCFGR_0_I2S1SRC : 2; /// I2S APB1 clock source selection
						uint32_t RCC_DCKCFGR_0_MSEL : 1; /// 48 MHz clock source selection
						uint32_t RCC_DCKCFGR_0_SDMMCSEL : 1; /// SDIO clock source selection
						uint32_t RCC_DCKCFGR_0_DSISEL : 1; /// DSI clock source selection
						uint32_t RCC_DCKCFGR_0_LPTIMER1SEL : 2; /// LPTIMER1 kernel clock selection.
					};
					#ifdef RCC_DCKCFGR_1
					struct
					{
						uint32_t RCC_DCKCFGR_1_PLLI2SDIVQ : 5; /// PLLI2S division factor for SAIs clock
						uint32_t                  : 15;
						uint32_t RCC_DCKCFGR_1_SAI1SRC : 2; /// SAI1 clock source selection
						uint32_t RCC_DCKCFGR_1_SAI2SRC : 2; /// SAI2 clock source selection
						uint32_t                  : 1;
						uint32_t RCC_DCKCFGR_1_I2SSRC : 2;
						uint32_t RCC_DCKCFGR_1_I2S2SRC : 2; /// I2S APB2 clock source selection
						uint32_t                  : 3;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_DCKCFGR1
			struct DCKCFGR1_t: public Reg32_t /// dedicated clocks configuration register
			{
				using Reg32_t::operator=;
				uint32_t PLLI2SDIV        : 5; /// PLLI2S division factor for SAI1 clock
				uint32_t                  : 3;
				uint32_t PLLSAIDIVQ       : 5; /// PLLSAI division factor for SAI1 clock
				uint32_t                  : 7;
				uint32_t SAI1SEL          : 2; /// SAI1 clock source selection
				uint32_t SAI2SEL          : 2; /// SAI2 clock source selection
				uint32_t TIMPRE           : 1; /// Timers clocks prescalers selection
				uint32_t                  : 7;
				
			};
			#endif
			#ifdef RCC_DCKCFGR2
			struct DCKCFGR2_t: public Reg32_t /// dedicated clocks configuration register
			{
				using Reg32_t::operator=;
				union
				{
					#ifdef RCC_DCKCFGR2_0
					struct
					{
						uint32_t RCC_DCKCFGR2_0_UART1SEL : 2; /// USART 1 clock source selection
						uint32_t RCC_DCKCFGR2_0_UART2SEL : 2; /// USART 2 clock source selection
						uint32_t RCC_DCKCFGR2_0_UART3SEL : 2; /// USART 3 clock source selection
						uint32_t RCC_DCKCFGR2_0_UART4SEL : 2; /// UART 4 clock source selection
						uint32_t RCC_DCKCFGR2_0_UART5SEL : 2; /// UART 5 clock source selection
						uint32_t RCC_DCKCFGR2_0_UART6SEL : 2; /// USART 6 clock source selection
						uint32_t RCC_DCKCFGR2_0_UART7SEL : 2; /// UART 7 clock source selection
						uint32_t RCC_DCKCFGR2_0_UART8SEL : 2; /// UART 8 clock source selection
						uint32_t RCC_DCKCFGR2_0_I2C1SEL : 2; /// I2C1 clock source selection
						uint32_t RCC_DCKCFGR2_0_I2C2SEL : 2; /// I2C2 clock source selection
						uint32_t RCC_DCKCFGR2_0_I2C3SEL : 2; /// I2C3 clock source selection
						uint32_t RCC_DCKCFGR2_0_FMPI2C1SEL : 2; /// I2C4 kernel clock source selection
						uint32_t RCC_DCKCFGR2_0_LPTIM1SEL : 2; /// Low power timer 1 clock source selection
						uint32_t RCC_DCKCFGR2_0_CECSEL : 1; /// HDMI CEC clock source selection
						uint32_t CK48MSEL         : 1; /// 48MHz clock source selection
						uint32_t RCC_DCKCFGR2_0_SDMMC1SEL : 1; /// SDMMC1 clock source selection
						uint32_t RCC_DCKCFGR2_0_SDMMC2SEL : 1; /// SDMMC2 clock source selection
						uint32_t                  : 2;
					};
					#endif
					#ifdef RCC_DCKCFGR2_1
					struct
					{
						uint32_t                  : 22;
						uint32_t RCC_DCKCFGR2_1_I2CFMP1SEL : 1; /// I2CFMP1 kernel clock source selection
						uint32_t                  : 5;
						uint32_t RCC_DCKCFGR2_1_SDIOSEL : 1; /// SDIO clock selection
						uint32_t RCC_DCKCFGR2_1_SPDIFSEL : 1; /// SPDIF clock selection
						uint32_t RCC_DCKCFGR2_1_LPTIM1SEL : 2;
					};
					#endif
					#ifdef RCC_DCKCFGR2_2
					struct
					{
						uint32_t                  : 22;
						uint32_t RCC_DCKCFGR2_2_I2C4SEL : 2;
						uint32_t                  : 4;
						uint32_t RCC_DCKCFGR2_2_CKSDIOSEL : 1; /// SDIO clock selection.
						uint32_t                  : 3;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_CKGATENR
			struct CKGATENR_t: public Reg32_t /// clocks gated enable register
			{
				using Reg32_t::operator=;
				uint32_t AHB2APB1_CKEN    : 1; /// AHB to APB1 Bridge clock enable
				uint32_t AHB2APB2_CKEN    : 1; /// AHB to APB2 Bridge clock enable
				uint32_t CM4DBG_CKEN      : 1; /// Cortex M4 ETM clock enable
				uint32_t SPARE_CKEN       : 1; /// Spare clock enable
				uint32_t SRAM_CKEN        : 1; /// SRQAM controller clock enable
				uint32_t FLITF_CKEN       : 1; /// Flash Interface clock enable
				uint32_t CKEN             : 1; /// RCC clock enable
				uint32_t RCC_CKGATENR_EVTCL_CKEN : 1;
				uint32_t                  : 24;
				
			};
			#endif
			#ifdef RCC_SMPSCR
			struct SMPSCR_t: public Reg32_t /// Step Down converter control register
			{
				using Reg32_t::operator=;
				uint32_t SMPSSEL          : 2; /// Step Down converter clock selection
				uint32_t                  : 2;
				uint32_t SMPSDIV          : 2; /// Step Down converter clock prescaler
				uint32_t                  : 2;
				uint32_t SMPSSWS          : 2; /// Step Down converter clock switch status
				uint32_t                  : 22;
				
			};
			#endif
			#ifdef RCC_HSECR
			struct HSECR_t: public Reg32_t /// Clock HSE register
			{
				using Reg32_t::operator=;
				uint32_t UNLOCKED         : 1; /// Register lock system
				uint32_t                  : 2;
				uint32_t HSES             : 1; /// HSE Sense amplifier threshold
				uint32_t HSEGMC           : 3; /// HSE current control
				uint32_t                  : 1;
				uint32_t HSETUNE          : 6; /// HSE capacitor tuning
				uint32_t                  : 18;
				
			};
			#endif
			#ifdef RCC_EXTCFGR
			struct EXTCFGR_t: public Reg32_t /// Extended clock recovery register
			{
				using Reg32_t::operator=;
				uint32_t SHDHPRE          : 4; /// Shared AHB prescaler
				uint32_t C2HPRE           : 4; /// CPU2 AHB prescaler
				uint32_t                  : 8;
				uint32_t SHDHPREF         : 1; /// Shared AHB prescaler flag
				uint32_t C2HPREF          : 1; /// CPU2 AHB prescaler flag
				uint32_t                  : 2;
				uint32_t RFCSS            : 1; /// RF clock source selected
				uint32_t                  : 11;
				
			};
			#endif
			#ifdef RCC_C2AHB1ENR
			struct C2AHB1ENR_t: public Reg32_t /// CPU2 AHB1 peripheral clock enable register
			{
				using Reg32_t::operator=;
				uint32_t DMA1EN           : 1; /// CPU2 DMA1 clock enable
				uint32_t DMA2EN           : 1; /// CPU2 DMA2 clock enable
				uint32_t DMAMUXEN         : 1; /// CPU2 DMAMUX clock enable
				uint32_t                  : 6;
				uint32_t SRAM1EN          : 1; /// CPU2 SRAM1 clock enable
				uint32_t                  : 2;
				uint32_t CRCEN            : 1; /// CPU2 CRC clock enable
				uint32_t                  : 3;
				uint32_t TSCEN            : 1; /// CPU2 Touch Sensing Controller clock enable
				uint32_t                  : 15;
				
			};
			#endif
			#ifdef RCC_C2AHB3ENR
			struct C2AHB3ENR_t: public Reg32_t /// CPU2 AHB3 peripheral clock enable register
			{
				using Reg32_t::operator=;
				uint32_t                  : 16;
				uint32_t PKAEN            : 1; /// CPU2 PKAEN
				uint32_t AES2EN           : 1; /// CPU2 AES2EN
				uint32_t RNGEN            : 1; /// CPU2 RNGEN
				uint32_t HSEMEN           : 1; /// CPU2 HSEMEN
				uint32_t IPCCEN           : 1; /// CPU2 IPCCEN
				uint32_t                  : 4;
				uint32_t FLASHEN          : 1; /// CPU2 FLASHEN
				uint32_t                  : 6;
				
			};
			#endif
			#ifdef RCC_C2APB1ENR1
			struct C2APB1ENR1_t: public Reg32_t /// CPU2 APB1ENR1
			{
				using Reg32_t::operator=;
				uint32_t TIM2EN           : 1; /// CPU2 TIM2 timer clock enable
				uint32_t                  : 8;
				uint32_t LCDEN            : 1; /// CPU2 LCD clock enable
				uint32_t RTCAPBEN         : 1; /// CPU2 RTC APB clock enable
				uint32_t                  : 3;
				uint32_t SPI2EN           : 1; /// CPU2 SPI2 clock enable
				uint32_t                  : 6;
				uint32_t I2C1EN           : 1; /// CPU2 I2C1 clock enable
				uint32_t                  : 1;
				uint32_t I2C3EN           : 1; /// CPU2 I2C3 clock enable
				uint32_t CRSEN            : 1; /// CPU2 CRS clock enable
				uint32_t                  : 1;
				uint32_t USBEN            : 1; /// CPU2 USB clock enable
				uint32_t                  : 4;
				uint32_t LPTIM1EN         : 1; /// CPU2 Low power timer 1 clock enable
				
			};
			#endif
			#ifdef RCC_C2APB3ENR
			struct C2APB3ENR_t: public Reg32_t /// CPU2 APB3ENR
			{
				using Reg32_t::operator=;
				uint32_t BLEEN            : 1; /// CPU2 BLE interface clock enable
				uint32_t EN802            : 1; /// CPU2 802.15.4 interface clock enable
				uint32_t                  : 30;
				
			};
			#endif
			#ifdef RCC_C2AHB3SMENR
			struct C2AHB3SMENR_t: public Reg32_t /// CPU2 AHB3 peripheral clocks enable in Sleep and Stop modes register
			{
				using Reg32_t::operator=;
				uint32_t                  : 16;
				uint32_t PKASMEN          : 1; /// PKA accelerator clocks enable during CPU2 sleep modes
				uint32_t AES2SMEN         : 1; /// AES2 accelerator clocks enable during CPU2 sleep modes
				uint32_t RNGSMEN          : 1; /// True RNG clocks enable during CPU2 sleep modes
				uint32_t                  : 5;
				uint32_t SRAM2SMEN        : 1; /// SRAM2a and SRAM2b memory interface clocks enable during CPU2 sleep modes
				uint32_t FLASHSMEN        : 1; /// Flash interface clocks enable during CPU2 sleep modes
				uint32_t                  : 6;
				
			};
			#endif
			#ifdef RCC_C2APB1SMENR1
			struct C2APB1SMENR1_t: public Reg32_t /// CPU2 APB1SMENR1
			{
				using Reg32_t::operator=;
				uint32_t TIM2SMEN         : 1; /// TIM2 timer clocks enable during CPU2 Sleep mode
				uint32_t                  : 8;
				uint32_t LCDSMEN          : 1; /// LCD clocks enable during CPU2 Sleep mode
				uint32_t RTCAPBSMEN       : 1; /// RTC APB clocks enable during CPU2 Sleep mode
				uint32_t                  : 3;
				uint32_t SPI2SMEN         : 1; /// SPI2 clocks enable during CPU2 Sleep mode
				uint32_t                  : 6;
				uint32_t I2C1SMEN         : 1; /// I2C1 clocks enable during CPU2 Sleep mode
				uint32_t                  : 1;
				uint32_t I2C3SMEN         : 1; /// I2C3 clocks enable during CPU2 Sleep mode
				uint32_t CRSMEN           : 1; /// CRS clocks enable during CPU2 Sleep mode
				uint32_t                  : 1;
				uint32_t USBSMEN          : 1; /// USB FS clocks enable during CPU2 Sleep mode
				uint32_t                  : 4;
				uint32_t LPTIM1SMEN       : 1; /// Low power timer 1 clocks enable during CPU2 Sleep mode
				
			};
			#endif
			#ifdef RCC_C2APB3SMENR
			struct C2APB3SMENR_t: public Reg32_t /// CPU2 APB3SMENR
			{
				using Reg32_t::operator=;
				uint32_t BLESMEN          : 1; /// BLE interface clocks enable during CPU2 Sleep mode
				uint32_t SMEN802          : 1; /// 802.15.4 interface clocks enable during CPU2 Sleep modes
				uint32_t                  : 30;
				
			};
			#endif
			#ifdef RCC_AHBENR
			struct AHBENR_t: public Reg32_t /// AHB Peripheral Clock enable register (RCC_AHBENR)
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t RCC_AHBENR_0_DMAEN : 1; /// DMA1 clock enable
						uint32_t RCC_AHBENR_0_DMA2EN : 1; /// DMA2 clock enable
						uint32_t RCC_AHBENR_0_SRAMEN : 1; /// SRAM interface clock enable
						uint32_t RCC_AHBENR_0_GPIODEN : 1; /// IO port D clock enable
						uint32_t RCC_AHBENR_0_FLITFEN : 1; /// FLITF clock enable
						uint32_t RCC_AHBENR_0_GPIOHEN : 1; /// IO port H clock enable
						uint32_t RCC_AHBENR_0_CRCEN : 1; /// CRC clock enable
						uint32_t RCC_AHBENR_0_GPIOGEN : 1; /// IO port G clock enable
						uint32_t RCC_AHBENR_0_FLASHEN : 1; /// Flash memory interface clock enable
						uint32_t                  : 7;
						uint32_t RCC_AHBENR_0_AESEN : 1; /// AES hardware accelerator
						uint32_t RCC_AHBENR_0_IOPAEN : 1; /// I/O port A clock enable
						uint32_t RCC_AHBENR_0_IOPBEN : 1; /// I/O port B clock enable
						uint32_t RCC_AHBENR_0_IOPCEN : 1; /// I/O port C clock enable
						uint32_t RCC_AHBENR_0_IOPDEN : 1; /// I/O port D clock enable
						uint32_t RCC_AHBENR_0_IOPEEN : 1; /// I/O port E clock enable
						uint32_t RCC_AHBENR_0_IOPFEN : 1; /// I/O port F clock enable
						uint32_t RCC_AHBENR_0_IOPGEN : 1; /// I/O port G clock enable
						uint32_t RCC_AHBENR_0_TSCEN : 1; /// Touch sensing controller clock enable
						uint32_t                  : 3;
						uint32_t RCC_AHBENR_0_ADC12EN : 1; /// ADC1 and ADC2 clock enable
						uint32_t RCC_AHBENR_0_ADC34EN : 1; /// ADC3 and ADC4 clock enable
						uint32_t RCC_AHBENR_0_FSMCEN : 1;
						uint32_t                  : 1;
					};
					struct
					{
						uint32_t RCC_AHBENR_1_DMA1EN : 1; /// DMA1 clock enable
						uint32_t                  : 7;
						uint32_t RCC_AHBENR_1_MIFEN : 1; /// NVM interface clock enable bit
						uint32_t                  : 3;
						uint32_t RCC_AHBENR_1_CRCEN : 1; /// CRC clock enable
						uint32_t                  : 2;
						uint32_t RCC_AHBENR_1_FLITFEN : 1; /// FLITF clock enable
						uint32_t RCC_AHBENR_1_IOPHEN : 1; /// I/O port H clock enable
						uint32_t RCC_AHBENR_1_GPIOAEN : 1; /// I/O port A clock enable
						uint32_t RCC_AHBENR_1_GPIOBEN : 1; /// I/O port B clock enable
						uint32_t RCC_AHBENR_1_GPIOCEN : 1; /// I/O port C clock enable
						uint32_t RCC_AHBENR_1_GPIODEN : 1; /// I/O port D clock enable
						uint32_t RCC_AHBENR_1_GPIOEEN : 1; /// I/O port E clock enable
						uint32_t RCC_AHBENR_1_GPIOFEN : 1; /// I/O port F clock enable
						uint32_t RCC_AHBENR_1_GPIOGEN : 1; /// I/O port G clock enable
						uint32_t RCC_AHBENR_1_CRYPEN : 1; /// Crypto clock enable bit
						uint32_t RCC_AHBENR_1_DMA2EN : 1; /// DMA2 clock enable
						uint32_t                  : 6;
					};
					#ifdef RCC_AHBENR_2
					struct
					{
						uint32_t RCC_AHBENR_2_GPIOAEN : 1; /// IO port A clock enable
						uint32_t RCC_AHBENR_2_GPIOBEN : 1; /// IO port B clock enable
						uint32_t RCC_AHBENR_2_GPIOCEN : 1; /// IO port C clock enable
						uint32_t                  : 1;
						uint32_t RCC_AHBENR_2_GPIOEEN : 1; /// IO port E clock enable
						uint32_t                  : 1;
						uint32_t RCC_AHBENR_2_GPIOFEN : 1; /// IO port F clock enable
						uint32_t                  : 9;
						uint32_t RCC_AHBENR_2_GPIOHEN : 1; /// I/O port H clock enable
						uint32_t                  : 1;
						uint32_t RCC_AHBENR_2_RNGEN : 1; /// Random number generator clock enable
						uint32_t                  : 5;
						uint32_t RCC_AHBENR_2_DMA1EN : 1; /// DMA1 clock enable
						uint32_t                  : 7;
					};
					#endif
					#ifdef RCC_AHBENR_3
					struct
					{
						uint32_t                  : 16;
						uint32_t RCC_AHBENR_3_TOUCHEN : 1; /// Touch Sensing clock enable bit
						uint32_t                  : 3;
						uint32_t RCC_AHBENR_3_RNGEN : 1; /// Random Number Generator clock enable bit
						uint32_t                  : 3;
						uint32_t RCC_AHBENR_3_DMAEN : 1; /// DMA1 clock enable
						uint32_t                  : 7;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_AHBRSTR
			struct AHBRSTR_t: public Reg32_t /// AHB peripheral reset register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t RCC_AHBRSTR_0_DMARST : 1; /// DMA1 reset
						uint32_t RCC_AHBRSTR_0_GPIOBRST : 1; /// IO port B reset
						uint32_t RCC_AHBRSTR_0_GPIOCRST : 1; /// IO port C reset
						uint32_t RCC_AHBRSTR_0_GPIODRST : 1; /// IO port D reset
						uint32_t RCC_AHBRSTR_0_GPIOERST : 1; /// IO port E reset
						uint32_t RCC_AHBRSTR_0_GPIOHRST : 1; /// IO port H reset
						uint32_t RCC_AHBRSTR_0_GPIOFRST : 1; /// IO port F reset
						uint32_t RCC_AHBRSTR_0_GPIOGRST : 1; /// IO port G reset
						uint32_t RCC_AHBRSTR_0_FLASHRST : 1; /// FLITF reset
						uint32_t                  : 3;
						uint32_t RCC_AHBRSTR_0_CRCRST : 1; /// CRC reset
						uint32_t                  : 2;
						uint32_t RCC_AHBRSTR_0_FLITFRST : 1; /// FLITF reset
						uint32_t RCC_AHBRSTR_0_AESRST : 1; /// AES hardware accelerator reset
						uint32_t RCC_AHBRSTR_0_IOPARST : 1; /// I/O port A reset
						uint32_t RCC_AHBRSTR_0_IOPBRST : 1; /// I/O port B reset
						uint32_t RCC_AHBRSTR_0_IOPCRST : 1; /// I/O port C reset
						uint32_t RCC_AHBRSTR_0_IOPDRST : 1; /// I/O port D reset
						uint32_t RCC_AHBRSTR_0_IOPERST : 1; /// I/O port E reset
						uint32_t RCC_AHBRSTR_0_IOPFRST : 1; /// I/O port F reset
						uint32_t RCC_AHBRSTR_0_IOPGRST : 1; /// I/O port G reset
						uint32_t RCC_AHBRSTR_0_TSCRST : 1; /// Touch sensing controller reset
						uint32_t RCC_AHBRSTR_0_DMA2RST : 1; /// DMA2 reset
						uint32_t                  : 2;
						uint32_t RCC_AHBRSTR_0_ADC12RST : 1; /// ADC1 and ADC2 reset
						uint32_t RCC_AHBRSTR_0_ADC34RST : 1; /// ADC3 and ADC4 reset
						uint32_t RCC_AHBRSTR_0_FSMCRST : 1; /// FSMC reset
						uint32_t                  : 1;
					};
					#ifdef RCC_AHBRSTR_1
					struct
					{
						uint32_t RCC_AHBRSTR_1_GPIOARST : 1; /// IO port A reset
						uint32_t                  : 7;
						uint32_t RCC_AHBRSTR_1_MIFRST : 1; /// Memory interface reset
						uint32_t                  : 7;
						uint32_t RCC_AHBRSTR_1_IOPHRST : 1; /// I/O port H reset
						uint32_t                  : 1;
						uint32_t RCC_AHBRSTR_1_RNGRST : 1; /// Random number generator reset
						uint32_t                  : 5;
						uint32_t RCC_AHBRSTR_1_CRYPRST : 1; /// Crypto module reset
						uint32_t                  : 7;
					};
					#endif
					#ifdef RCC_AHBRSTR_2
					struct
					{
						uint32_t                  : 16;
						uint32_t RCC_AHBRSTR_2_TOUCHRST : 1; /// Touch Sensing reset
						uint32_t                  : 3;
						uint32_t RCC_AHBRSTR_2_RNGRST : 1; /// Random Number Generator module reset
						uint32_t                  : 3;
						uint32_t RCC_AHBRSTR_2_DMA1RST : 1; /// DMA1 reset
						uint32_t                  : 7;
					};
					#endif
					#ifdef RCC_AHBRSTR_3
					struct
					{
						uint32_t                  : 24;
						uint32_t DMARST           : 1; /// DMA1 reset
						uint32_t                  : 7;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_CFGR2
			struct CFGR2_t: public Reg32_t /// Clock configuration register 2
			{
				using Reg32_t::operator=;
				uint32_t PREDIV           : 4; /// PREDIV division factor
				uint32_t RCC_CFGR2_ADC12PRES : 5; /// ADC1 and ADC2 prescaler
				uint32_t RCC_CFGR2_ADC34PRES : 5; /// ADC3 and ADC4 prescaler
				uint32_t                  : 18;
				
			};
			#endif
			#ifdef RCC_CFGR3
			struct CFGR3_t: public Reg32_t /// Clock configuration register 3
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t USART1SW         : 2; /// USART1 clock source selection
						uint32_t                  : 2;
						uint32_t I2C1SW           : 1; /// I2C1 clock source selection
						uint32_t RCC_CFGR3_0_I2C2SW : 1; /// I2C2 clock source selection
						uint32_t RCC_CFGR3_0_I2C3SW : 1; /// I2C3 clock source selection
						uint32_t RCC_CFGR3_0_USBSW : 1; /// USB clock source selection
						uint32_t RCC_CFGR3_0_TIM1SW : 1; /// Timer1 clock source selection
						uint32_t RCC_CFGR3_0_TIM8SW : 1; /// Timer8 clock source selection
						uint32_t                  : 2;
						uint32_t RCC_CFGR3_0_HRTIM1SW : 1; /// HRTIM1 clock selection
						uint32_t                  : 3;
						uint32_t RCC_CFGR3_0_USART2SW : 2; /// USART2 clock source selection
						uint32_t RCC_CFGR3_0_USART3SW : 2; /// USART3 clock source selection
						uint32_t RCC_CFGR3_0_UART4SW : 2; /// UART4 clock source selection
						uint32_t RCC_CFGR3_0_UART5SW : 2; /// UART5 clock source selection
						uint32_t                  : 8;
					};
					#ifdef RCC_CFGR3_1
					struct
					{
						uint32_t                  : 6;
						uint32_t CECSW            : 1; /// HDMI CEC clock source selection
						uint32_t                  : 1;
						uint32_t RCC_CFGR3_1_ADCSW : 1; /// ADC clock source selection
						uint32_t                  : 23;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_CR2
			struct CR2_t: public Reg32_t /// Clock control register 2
			{
				using Reg32_t::operator=;
				uint32_t HSI14ON          : 1; /// HSI14 clock enable
				uint32_t HSI14RDY         : 1; /// HR14 clock ready flag
				uint32_t HSI14DIS         : 1; /// HSI14 clock request from ADC disable
				uint32_t HSI14TRIM        : 5; /// HSI14 clock trimming
				uint32_t HSI14CAL         : 8; /// HSI14 clock calibration
				uint32_t HSI48ON          : 1; /// HSI48 clock enable
				uint32_t HSI48RDY         : 1; /// HSI48 clock ready flag
				uint32_t                  : 6;
				uint32_t HSI48CAL         : 1; /// HSI48 factory clock calibration
				uint32_t                  : 7;
				
			};
			#endif
			#ifdef RCC_IOPRSTR
			struct IOPRSTR_t: public Reg32_t /// GPIO reset register
			{
				using Reg32_t::operator=;
				uint32_t IOPARST          : 1; /// I/O port A reset
				uint32_t IOPBRST          : 1; /// I/O port B reset
				uint32_t IOPCRST          : 1; /// I/O port C reset
				uint32_t IOPDRST          : 1; /// I/O port D reset
				uint32_t RCC_IOPRSTR_IOPERST : 1; /// I/O port E reset
				uint32_t RCC_IOPRSTR_IOPFRST : 1; /// I/O port F reset
				uint32_t                  : 1;
				uint32_t RCC_IOPRSTR_IOPHRST : 1; /// I/O port H reset
				uint32_t                  : 24;
				
			};
			#endif
			#ifdef RCC_APBRSTR1
			struct APBRSTR1_t: public Reg32_t /// APB peripheral reset register 1
			{
				using Reg32_t::operator=;
				uint32_t TIM2RST          : 1; /// TIM2 timer reset
				uint32_t TIM3RST          : 1; /// TIM3 timer reset
				uint32_t                  : 2;
				uint32_t RCC_APBRSTR1_TIM6RST : 1; /// TIM6 timer reset
				uint32_t RCC_APBRSTR1_TIM7RST : 1; /// TIM7 timer reset
				uint32_t                  : 8;
				uint32_t SPI2RST          : 1; /// SPI2 reset
				uint32_t                  : 2;
				uint32_t USART2RST        : 1; /// USART2 reset
				uint32_t RCC_APBRSTR1_USART3RST : 1; /// USART3 reset
				uint32_t RCC_APBRSTR1_USART4RST : 1; /// USART4 reset
				uint32_t LPUART1RST       : 1; /// LPUART1 reset
				uint32_t I2C1RST          : 1; /// I2C1 reset
				uint32_t I2C2RST          : 1; /// I2C2 reset
				uint32_t                  : 1;
				uint32_t RCC_APBRSTR1_CECRST : 1; /// HDMI CEC reset
				uint32_t RCC_APBRSTR1_UCPD1RST : 1; /// UCPD1 reset
				uint32_t RCC_APBRSTR1_UCPD2RST : 1; /// UCPD2 reset
				uint32_t DBGRST           : 1; /// Debug support reset
				uint32_t PWRRST           : 1; /// Power interface reset
				uint32_t RCC_APBRSTR1_DAC1RST : 1; /// DAC1 interface reset
				uint32_t LPTIM2RST        : 1; /// Low Power Timer 2 reset
				uint32_t LPTIM1RST        : 1; /// Low Power Timer 1 reset
				
			};
			#endif
			#ifdef RCC_APBRSTR2
			struct APBRSTR2_t: public Reg32_t /// APB peripheral reset register 2
			{
				using Reg32_t::operator=;
				uint32_t SYSCFGRST        : 1; /// SYSCFG, COMP and VREFBUF reset
				uint32_t                  : 10;
				uint32_t TIM1RST          : 1; /// TIM1 timer reset
				uint32_t SPI1RST          : 1; /// SPI1 reset
				uint32_t                  : 1;
				uint32_t USART1RST        : 1; /// USART1 reset
				uint32_t TIM14RST         : 1; /// TIM14 timer reset
				uint32_t RCC_APBRSTR2_TIM15RST : 1; /// TIM15 timer reset
				uint32_t TIM16RST         : 1; /// TIM16 timer reset
				uint32_t TIM17RST         : 1; /// TIM17 timer reset
				uint32_t                  : 1;
				uint32_t ADCRST           : 1; /// ADC reset
				uint32_t                  : 11;
				
			};
			#endif
			#ifdef RCC_IOPENR
			struct IOPENR_t: public Reg32_t /// GPIO clock enable register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t IOPAEN           : 1; /// I/O port A clock enable
						uint32_t IOPBEN           : 1; /// I/O port B clock enable
						uint32_t IOPCEN           : 1; /// I/O port C clock enable
						uint32_t IOPDEN           : 1; /// I/O port D clock enable
						uint32_t RCC_IOPENR_0_IOPEEN : 1; /// IO port E clock enable bit
						uint32_t RCC_IOPENR_0_IOPFEN : 1; /// I/O port F clock enable
						uint32_t                  : 1;
						uint32_t RCC_IOPENR_0_IOPHEN : 1; /// I/O port H clock enable bit
						uint32_t                  : 24;
					};
					struct
					{
						uint32_t GPIOAEN          : 1; /// I/O port A clock enable
						uint32_t GPIOBEN          : 1; /// I/O port B clock enable
						uint32_t GPIOCEN          : 1; /// I/O port C clock enable
						uint32_t GPIODEN          : 1; /// I/O port D clock enable
						uint32_t RCC_IOPENR_1_GPIOEEN : 1; /// IO port E clock enable bit
						uint32_t RCC_IOPENR_1_GPIOFEN : 1; /// I/O port F clock enable
						uint32_t                  : 1;
						uint32_t RCC_IOPENR_1_GPIOHEN : 1; /// I/O port H clock enable bit
						uint32_t                  : 24;
					};
				};
				
			};
			#endif
			#ifdef RCC_APBENR1
			struct APBENR1_t: public Reg32_t /// APB peripheral clock enable register 1
			{
				using Reg32_t::operator=;
				uint32_t TIM2EN           : 1; /// TIM2 timer clock enable
				uint32_t TIM3EN           : 1; /// TIM3 timer clock enable
				uint32_t                  : 2;
				uint32_t RCC_APBENR1_TIM6EN : 1; /// TIM6 timer clock enable
				uint32_t RCC_APBENR1_TIM7EN : 1; /// TIM7 timer clock enable
				uint32_t                  : 4;
				uint32_t RTCAPBEN         : 1; /// RTC APB clock enable
				uint32_t WWDGEN           : 1; /// WWDG clock enable
				uint32_t                  : 2;
				uint32_t SPI2EN           : 1; /// SPI2 clock enable
				uint32_t                  : 2;
				uint32_t USART2EN         : 1; /// USART2 clock enable
				uint32_t RCC_APBENR1_USART3EN : 1; /// USART3 clock enable
				uint32_t RCC_APBENR1_USART4EN : 1; /// USART4 clock enable
				uint32_t LPUART1EN        : 1; /// LPUART1 clock enable
				uint32_t I2C1EN           : 1; /// I2C1 clock enable
				uint32_t I2C2EN           : 1; /// I2C2 clock enable
				uint32_t                  : 1;
				uint32_t RCC_APBENR1_CECEN : 1; /// HDMI CEC clock enable
				uint32_t RCC_APBENR1_UCPD1EN : 1; /// UCPD1 clock enable
				uint32_t RCC_APBENR1_UCPD2EN : 1; /// UCPD2 clock enable
				uint32_t DBGEN            : 1; /// Debug support clock enable
				uint32_t PWREN            : 1; /// Power interface clock enable
				uint32_t RCC_APBENR1_DAC1EN : 1; /// DAC1 interface clock enable
				uint32_t LPTIM2EN         : 1; /// LPTIM2 clock enable
				uint32_t LPTIM1EN         : 1; /// LPTIM1 clock enable
				
			};
			#endif
			#ifdef RCC_APBENR2
			struct APBENR2_t: public Reg32_t /// APB peripheral clock enable register 2
			{
				using Reg32_t::operator=;
				uint32_t SYSCFGEN         : 1; /// SYSCFG, COMP and VREFBUF clock enable
				uint32_t                  : 10;
				uint32_t TIM1EN           : 1; /// TIM1 timer clock enable
				uint32_t SPI1EN           : 1; /// SPI1 clock enable
				uint32_t                  : 1;
				uint32_t USART1EN         : 1; /// USART1 clock enable
				uint32_t TIM14EN          : 1; /// TIM14 timer clock enable
				uint32_t RCC_APBENR2_TIM15EN : 1; /// TIM15 timer clock enable
				uint32_t TIM16EN          : 1; /// TIM16 timer clock enable
				uint32_t TIM17EN          : 1; /// TIM16 timer clock enable
				uint32_t                  : 1;
				uint32_t ADCEN            : 1; /// ADC clock enable
				uint32_t                  : 11;
				
			};
			#endif
			#ifdef RCC_IOPSMENR
			struct IOPSMENR_t: public Reg32_t /// GPIO in Sleep mode clock enable register
			{
				using Reg32_t::operator=;
				uint32_t IOPASMEN         : 1; /// I/O port A clock enable during Sleep mode
				uint32_t IOPBSMEN         : 1; /// I/O port B clock enable during Sleep mode
				uint32_t IOPCSMEN         : 1; /// I/O port C clock enable during Sleep mode
				uint32_t IOPDSMEN         : 1; /// I/O port D clock enable during Sleep mode
				uint32_t                  : 1;
				uint32_t IOPFSMEN         : 1; /// I/O port F clock enable during Sleep mode
				uint32_t                  : 26;
				
			};
			#endif
			#ifdef RCC_AHBSMENR
			struct AHBSMENR_t: public Reg32_t /// AHB peripheral clock enable in Sleep mode register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t DMASMEN          : 1; /// DMA clock enable during Sleep mode
						uint32_t                  : 7;
						uint32_t RCC_AHBSMENR_0_FLASHSMEN : 1; /// Flash memory interface clock enable during Sleep mode
						uint32_t SRAMSMEN         : 1; /// SRAM clock enable during Sleep mode
						uint32_t                  : 2;
						uint32_t CRCSMEN          : 1; /// CRC clock enable during Sleep mode
						uint32_t                  : 3;
						uint32_t RCC_AHBSMENR_0_AESSMEN : 1; /// AES hardware accelerator clock enable during Sleep mode
						uint32_t                  : 1;
						uint32_t RCC_AHBSMENR_0_RNGSMEN : 1; /// Random number generator clock enable during Sleep mode
						uint32_t                  : 5;
						uint32_t RCC_AHBSMENR_0_CRYPSMEN : 1; /// Crypto clock enable during sleep mode bit
						uint32_t                  : 7;
					};
					#ifdef RCC_AHBSMENR_1
					struct
					{
						uint32_t                  : 8;
						uint32_t MIFSMEN          : 1; /// NVM interface clock enable during sleep mode bit
						uint32_t                  : 7;
						uint32_t RCC_AHBSMENR_1_TOUCHSMEN : 1; /// Touch Sensing clock enable during sleep mode bit
						uint32_t                  : 3;
						uint32_t RCC_AHBSMENR_1_RNGSMEN : 1; /// Random Number Generator clock enable during sleep mode bit
						uint32_t                  : 3;
						uint32_t RCC_AHBSMENR_1_CRYPTSMEN : 1; /// Crypto clock enable during sleep mode bit
						uint32_t                  : 7;
					};
					#endif
				};
				
			};
			#endif
			#ifdef RCC_APBSMENR1
			struct APBSMENR1_t: public Reg32_t /// APB peripheral clock enable in Sleep mode register 1
			{
				using Reg32_t::operator=;
				uint32_t TIM2SMEN         : 1; /// TIM2 timer clock enable during Sleep mode
				uint32_t TIM3SMEN         : 1; /// TIM3 timer clock enable during Sleep mode
				uint32_t                  : 2;
				uint32_t RCC_APBSMENR1_TIM6SMEN : 1; /// TIM6 timer clock enable during Sleep mode
				uint32_t RCC_APBSMENR1_TIM7SMEN : 1; /// TIM7 timer clock enable during Sleep mode
				uint32_t                  : 4;
				uint32_t RTCAPBSMEN       : 1; /// RTC APB clock enable during Sleep mode
				uint32_t WWDGSMEN         : 1; /// WWDG clock enable during Sleep mode
				uint32_t                  : 2;
				uint32_t SPI2SMEN         : 1; /// SPI2 clock enable during Sleep mode
				uint32_t                  : 2;
				uint32_t USART2SMEN       : 1; /// USART2 clock enable during Sleep mode
				uint32_t RCC_APBSMENR1_USART3SMEN : 1; /// USART3 clock enable during Sleep mode
				uint32_t RCC_APBSMENR1_USART4SMEN : 1; /// USART4 clock enable during Sleep mode
				uint32_t LPUART1SMEN      : 1; /// LPUART1 clock enable during Sleep mode
				uint32_t I2C1SMEN         : 1; /// I2C1 clock enable during Sleep mode
				uint32_t I2C2SMEN         : 1; /// I2C2 clock enable during Sleep mode
				uint32_t                  : 1;
				uint32_t RCC_APBSMENR1_CECSMEN : 1; /// HDMI CEC clock enable during Sleep mode
				uint32_t RCC_APBSMENR1_UCPD1SMEN : 1; /// UCPD1 clock enable during Sleep mode
				uint32_t RCC_APBSMENR1_UCPD2SMEN : 1; /// UCPD2 clock enable during Sleep mode
				uint32_t DBGSMEN          : 1; /// Debug support clock enable during Sleep mode
				uint32_t PWRSMEN          : 1; /// Power interface clock enable during Sleep mode
				uint32_t RCC_APBSMENR1_DAC1SMEN : 1; /// DAC1 interface clock enable during Sleep mode
				uint32_t LPTIM2SMEN       : 1; /// Low Power Timer 2 clock enable during Sleep mode
				uint32_t LPTIM1SMEN       : 1; /// Low Power Timer 1 clock enable during Sleep mode
				
			};
			#endif
			#ifdef RCC_APBSMENR2
			struct APBSMENR2_t: public Reg32_t /// APB peripheral clock enable in Sleep mode register 2
			{
				using Reg32_t::operator=;
				uint32_t SYSCFGSMEN       : 1; /// SYSCFG, COMP and VREFBUF clock enable during Sleep mode
				uint32_t                  : 10;
				uint32_t TIM1SMEN         : 1; /// TIM1 timer clock enable during Sleep mode
				uint32_t SPI1SMEN         : 1; /// SPI1 clock enable during Sleep mode
				uint32_t                  : 1;
				uint32_t USART1SMEN       : 1; /// USART1 clock enable during Sleep mode
				uint32_t TIM14SMEN        : 1; /// TIM14 timer clock enable during Sleep mode
				uint32_t RCC_APBSMENR2_TIM15SMEN : 1; /// TIM15 timer clock enable during Sleep mode
				uint32_t TIM16SMEN        : 1; /// TIM16 timer clock enable during Sleep mode
				uint32_t TIM17SMEN        : 1; /// TIM16 timer clock enable during Sleep mode
				uint32_t                  : 1;
				uint32_t ADCSMEN          : 1; /// ADC clock enable during Sleep mode
				uint32_t                  : 11;
				
			};
			#endif
			#ifdef RCC_IOPSMEN
			struct IOPSMEN_t: public Reg32_t /// GPIO clock enable in sleep mode register
			{
				using Reg32_t::operator=;
				uint32_t IOPASMEN         : 1; /// Port A clock enable during Sleep mode bit
				uint32_t IOPBSMEN         : 1; /// Port B clock enable during Sleep mode bit
				uint32_t IOPCSMEN         : 1; /// Port C clock enable during Sleep mode bit
				uint32_t IOPDSMEN         : 1; /// Port D clock enable during Sleep mode bit
				uint32_t RCC_IOPSMEN_IOPESMEN : 1; /// Port E clock enable during Sleep mode bit
				uint32_t                  : 2;
				uint32_t IOPHSMEN         : 1; /// Port H clock enable during Sleep mode bit
				uint32_t                  : 24;
				
			};
			#endif
			#ifdef RCC_APB1SMENR
			struct APB1SMENR_t: public Reg32_t /// APB1 peripheral clock enable in sleep mode register
			{
				using Reg32_t::operator=;
				uint32_t TIM2SMEN         : 1; /// Timer2 clock enable during sleep mode bit
				uint32_t RCC_APB1SMENR_TIM3SMEN : 1; /// Timer 3 clock enable during sleep mode bit
				uint32_t                  : 2;
				uint32_t TIM6SMEN         : 1; /// Timer 6 clock enable during sleep mode bit
				uint32_t RCC_APB1SMENR_TIM7SMEN : 1; /// Timer 7 clock enable during sleep mode bit
				uint32_t                  : 3;
				uint32_t RCC_APB1SMENR_LCDSMEN : 1; /// LCD clock enable during sleep mode bit
				uint32_t                  : 1;
				uint32_t WWDGSMEN         : 1; /// Window watchdog clock enable during sleep mode bit
				uint32_t                  : 2;
				uint32_t SPI2SMEN         : 1; /// SPI2 clock enable during sleep mode bit
				uint32_t                  : 2;
				uint32_t USART2SMEN       : 1; /// UART2 clock enable during sleep mode bit
				uint32_t LPUART1SMEN      : 1; /// LPUART1 clock enable during sleep mode bit
				uint32_t RCC_APB1SMENR_USART4SMEN : 1; /// USART4 clock enabe during sleep mode bit
				uint32_t RCC_APB1SMENR_USART5SMEN : 1; /// USART5 clock enable during sleep mode bit
				uint32_t I2C1SMEN         : 1; /// I2C1 clock enable during sleep mode bit
				uint32_t I2C2SMEN         : 1; /// I2C2 clock enable during sleep mode bit
				uint32_t RCC_APB1SMENR_USBSMEN : 1; /// USB clock enable during sleep mode bit
				uint32_t                  : 3;
				uint32_t CRSSMEN          : 1; /// Clock recovery system clock enable during sleep mode bit
				uint32_t PWRSMEN          : 1; /// Power interface clock enable during sleep mode bit
				uint32_t RCC_APB1SMENR_DACSMEN : 1; /// DAC interface clock enable during sleep mode bit
				uint32_t RCC_APB1SMENR_I2C3SMEN : 1; /// I2C3 clock enable during sleep mode bit
				uint32_t LPTIM1SMEN       : 1; /// Low power timer clock enable during sleep mode bit
				
			};
			#endif
			#ifdef RCC_AHBLPENR
			struct AHBLPENR_t: public Reg32_t /// AHB peripheral clock enable in low power mode register
			{
				using Reg32_t::operator=;
				union
				{
					struct
					{
						uint32_t GPIOALPEN        : 1; /// IO port A clock enable during Sleep mode
						uint32_t GPIOBLPEN        : 1; /// IO port B clock enable during Sleep mode
						uint32_t GPIOCLPEN        : 1; /// IO port C clock enable during Sleep mode
						uint32_t GPIODLPEN        : 1; /// IO port D clock enable during Sleep mode
						uint32_t RCC_AHBLPENR_0_GPIOELPEN : 1; /// IO port E clock enable during Sleep mode
						uint32_t RCC_AHBLPENR_0_GPIOHLPEN : 1; /// IO port H clock enable during Sleep mode
						uint32_t RCC_AHBLPENR_0_GPIOFLPEN : 1; /// IO port F clock enable during Sleep mode
						uint32_t RCC_AHBLPENR_0_GPIOGLPEN : 1; /// IO port G clock enable during Sleep mode
						uint32_t                  : 4;
						uint32_t CRCLPEN          : 1; /// CRC clock enable during Sleep mode
						uint32_t                  : 2;
						uint32_t FLITFLPEN        : 1; /// FLITF clock enable during Sleep mode
						uint32_t SRAMLPEN         : 1; /// SRAM clock enable during Sleep mode
						uint32_t                  : 7;
						uint32_t RCC_AHBLPENR_0_DMA1LPEN : 1; /// DMA1 clock enable during Sleep mode
						uint32_t RCC_AHBLPENR_0_DMA2LPEN : 1; /// DMA2 clock enable during Sleep mode
						uint32_t                  : 6;
					};
					#ifdef RCC_AHBLPENR_1
					struct
					{
						uint32_t                  : 24;
						uint32_t DMALPEN          : 1; /// DMA1 clock enable during Sleep mode
						uint32_t                  : 7;
					};
					#endif
				};
				
			};
			#endif
			union
			{
				#ifdef RCC_MAP0
				struct
				{
					RCC_MAP0_TZCR; /// This register is used to switch the RCC into secure mode. This register can only be accessed in secure mode.
					RCC_MAP0_ICSCR; /// RCC Internal Clock Source Calibration Register
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP0_OCENSETR; /// This register is used to control the oscillators.Writing to this register has no effect, writing will set the corresponding bits. Reading will give the effective values of each bit.If , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
					RCC_MAP0_OCENCLRR; /// This register is used to control the oscillators.Writing to this register has no effect, writing will clear the corresponding bits. Reading will give the effective values of the enable bits.If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP0_HSICFGR; /// This register is used to configure the HSI. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
					RCC_MAP0_CSICFGR; /// This register is used to fine-tune the CSI frequency. If TZEN = MCKPROT = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
					RCC_MAP0_MPCKSELR; /// This register is used to select the clock source for the MPU. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
					RCC_MAP0_ASSCKSELR; /// This register is used to select the clock source for the AXI sub-system. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
					RCC_MAP0_RCK12SELR; /// This register is used to select the reference clock for PLL1 and PLL2. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
					RCC_MAP0_MPCKDIVR; /// This register is used to control the MPU clock prescaler. Please refer to Section1.4.6.3: Sub-System Clock Generation for additional information. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_AXIDIVR; /// This register is used to control the AXI Matrix clock prescaler. Please refer to Section1.4.6.3: Sub-System Clock Generation for additional information. If TZEN = , this register can only be modified in secure mode.
					__SOOL_PERIPH_PADDING_8;
					RCC_MAP0_APB4DIVR; /// This register is used to control the APB4 clock divider. Please refer to Section1.4.6.3: Sub-System Clock Generation for additional information. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_APB5DIVR; /// This register is used to control the APB5 clock divider. Please refer to Section1.4.6.3: Sub-System Clock Generation for additional information. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_RTCDIVR; /// This register is used to divide the HSE clock for RTC. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MSSCKSELR; /// This register is used to select the clock source for the MCU sub-system, including the MCU itself. If TZEN = MCKPROT = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP0_AHB3ENR; /// AHB3 peripheral clock enable register
					__SOOL_PERIPH_PADDING_4;
					__SOOL_PERIPH_PADDING_8;
					__SOOL_PERIPH_PADDING_32;
					RCC_MAP0_PLL1CR; /// This register is used to control the PLL1. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
					RCC_MAP0_PLL1CFGR1; /// This register is used to configure the PLL1. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
					RCC_MAP0_PLL1CFGR2; /// This register is used to configure the PLL1. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
					RCC_MAP0_PLL1FRACR; /// This register is used to fine-tune the frequency of the PLL1 VCO. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
					RCC_MAP0_PLL1CSGR; /// This register is used to configure the PLL1.It is not recommended to change the content of this register when the PLL1 is enabled (PLLON = ). Please refer to Section1.4.5.4: Using the PLLs in spread spectrum mode for details. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
					RCC_MAP0_PLL2CR; /// This register is used to control the PLL2. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
					RCC_MAP0_PLL2CFGR1; /// This register is used to configure the PLL2. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
					RCC_MAP0_PLL2CFGR2; /// This register is used to configure the PLL2. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
					RCC_MAP0_PLL2FRACR; /// This register is used to fine-tune the frequency of the PLL2 VCO. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
					RCC_MAP0_PLL2CSGR; /// This register is used to configure the PLL2. It is not recommended to change the content of this register when the PLL2 is enabled (PLLON = ). Please refer to Section1.4.5.4: Using the PLLs in spread spectrum mode for details. If TZEN = , this register can only be modified in secure mode. Write access to this register is not allowed during the clock restore sequence. See Section: The clock restore sequence description for details.
					__SOOL_PERIPH_PADDING_8;
					__SOOL_PERIPH_PADDING_16;
					RCC_MAP0_I2C4CKSELR; /// This register is used to control the selection of the kernel clock for the I2C4. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_SPI6CKSELR; /// This register is used to control the selection of the kernel clock for the SPI6. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_UART1CKSELR; /// This register is used to control the selection of the kernel clock for the USART1. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_RNG1CKSELR; /// This register is used to control the selection of the kernel clock for the RNG1. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_CPERCKSELR; /// This register is used to select an oscillator source as kernel clock for the per_ck clock. The per_ck clock is distributed to several peripherals. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_STGENCKSELR; /// This register is used to select the peripheral clock for the STGEN block. Note that this clock is used to provide a time reference for the application. Please refer to Section1.4.10.1: Clock Enabling Delays. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_DDRITFCR; /// This register is used to control the DDR interface, including the DDRC and DDRPHYC. If TZEN = , this register can only be modified in secure mode.
					__SOOL_PERIPH_PADDING_4;
					__SOOL_PERIPH_PADDING_32;
					RCC_MAP0_MP_BOOTCR; /// This register is used to control the HOLD boot function when the system exits from STANDBY. Please refer to Section1.3.13.5: MCU HOLD_BOOT After Processor Reset. This register is reset when a system reset occurs, but not when the circuit exits from STANDBY (app_rst reset).If TZEN = , this register can only be modified in secure mode. This register can only be accessed by the MPU.
					RCC_MAP0_MP_SREQSETR; /// Writing has no effect, reading will return the values of the bits. Writing a sets the corresponding bit to . The MCU cannot access to this register. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MP_SREQCLRR; /// Writing has no effect, reading will return the effective values of the bits. Writing a sets the corresponding bit to . The MCU cannot access to this register. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MP_GCR; /// The register contains global control bits. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MP_APRSTCR; /// This register is used to control the behavior of the warm reset. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MP_APRSTSR; /// This register provides a status of the RDCTL. If TZEN = , this register can only be modified in secure mode.
					__SOOL_PERIPH_PADDING_4;
					__SOOL_PERIPH_PADDING_8;
					__SOOL_PERIPH_PADDING_16;
					RCC_MAP0_C1_AHB3ENR; /// RCC AHB3 Clock Register
					__SOOL_PERIPH_PADDING_8;
					RCC_MAP0_BDCR; /// This register is used to control the LSE function. Wait states are inserted in case of successive write accesses to this register. The number of wait states may be up to 7 cycles of AHB4 clock.After a system reset, the register RCC_BDCR is write-protected. In order to modify this register, the DBP bit in the PWR control register 1 (PWR_CR1) has to be set to . Bits of RCC_BDCR register are only reset after a backup domain reset: nreset_vsw (see Section1.3.5: Backup domain reset). Any other internal or external reset will not have any effect on these bits.This register is located into the VSW domain. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_RDLSICR; /// This register is used to control the minimum NRST active duration and LSI function.0 to 7 wait states are inserted for word, half-word and byte accesses. Wait states are inserted in case of successive accesses to this register.This register is reset by the por_rst reset, and it is located into the VDD domain. If TZEN = , this register can only be modified in secure mode.
					__SOOL_PERIPH_PADDING_8;
					__SOOL_PERIPH_PADDING_16;
					__SOOL_PERIPH_PADDING_32;
					RCC_MAP0_APB4RSTSETR; /// This register is used to activate the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral.
					RCC_MAP0_APB4RSTCLRR; /// This register is used to release the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a releases the reset of the corresponding peripheral.
					RCC_MAP0_APB5RSTSETR; /// This register is used to activate the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_APB5RSTCLRR; /// This register is used to release the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a releases the reset of the corresponding peripheral. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_AHB5RSTSETR; /// This register is used to activate the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_AHB5RSTCLRR; /// This register is used to release the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a releases the reset of the corresponding peripheral. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_AHB6RSTSETR; /// This register is used to activate the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral.
					RCC_MAP0_AHB6RSTCLRR; /// This register is used to release the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a releases the reset of the corresponding peripheral.
					RCC_MAP0_TZAHB6RSTSETR; /// This register is used to activate the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_TZAHB6RSTCLRR; /// This register is used to release the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a releases the reset of the corresponding peripheral. If TZEN = , this register can only be modified in secure mode.
					__SOOL_PERIPH_PADDING_8;
					__SOOL_PERIPH_PADDING_16;
					__SOOL_PERIPH_PADDING_64;
					RCC_MAP0_MP_APB4ENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MPU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_APB4ENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MPU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_APB5ENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MPU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MP_APB5ENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MPU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MP_AHB5ENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MPU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MP_AHB5ENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MPU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MP_AHB6ENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_AHB6ENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_TZAHB6ENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MPU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MP_TZAHB6ENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MPU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
					__SOOL_PERIPH_PADDING_8;
					__SOOL_PERIPH_PADDING_16;
					__SOOL_PERIPH_PADDING_64;
					RCC_MAP0_MC_APB4ENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_APB4ENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_APB5ENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MC_APB5ENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MC_AHB5ENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MC_AHB5ENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MC_AHB6ENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_AHB6ENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					__SOOL_PERIPH_PADDING_32;
					__SOOL_PERIPH_PADDING_64;
					RCC_MAP0_MP_APB4LPENSETR; /// This register is used by the MPU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_APB4LPENCLRR; /// This register is used by the MPU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_APB5LPENSETR; /// This register is used by the MPU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MP_APB5LPENCLRR; /// This register is used by the MPU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MP_AHB5LPENSETR; /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MP_AHB5LPENCLRR; /// This register is used by the MCU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MP_AHB6LPENSETR; /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_AHB6LPENCLRR; /// This register is used by the MCU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_TZAHB6LPENSETR; /// This register is used by the MPU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MP_TZAHB6LPENCLRR; /// This register is used by the MPU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
					__SOOL_PERIPH_PADDING_8;
					__SOOL_PERIPH_PADDING_16;
					__SOOL_PERIPH_PADDING_64;
					RCC_MAP0_MC_APB4LPENSETR; /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_APB4LPENCLRR; /// This register is used by the MCU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_APB5LPENSETR; /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MC_APB5LPENCLRR; /// This register is used by the MCU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MC_AHB5LPENSETR; /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MC_AHB5LPENCLRR; /// This register is used by the MCU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MC_AHB6LPENSETR; /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_AHB6LPENCLRR; /// This register is used by the MCU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					__SOOL_PERIPH_PADDING_32;
					__SOOL_PERIPH_PADDING_64;
					RCC_MAP0_BR_RSTSCLRR; /// This register is used by the BOOTROM to check the reset source. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a clears the corresponding bit to .The application running on MPU shall not use this register to define the reset source, the register RCC_MP_RSTSR must be used instead.Please refer to Section1.3.12: Reset Source Identification for details.This register is located into VDD domain, and is reset by por_rst reset. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MP_GRSTCSETR; /// This register is used by the MPU in order to generate either a MCU reset or a system reset. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral.
					RCC_MAP0_MP_RSTSR; /// This register is used by the MPU to check the reset source. This register is updated by the BOOTROM code, after a power-on reset (por_rst), a system reset (nreset), or an exit from STANDBY or CSTANDBY.The flags can be cleared by simply writing them to . Please refer to Section1.3.12: Reset Source Identification for details.The register is located in VDD_CORE.If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MP_IWDGFZSETR; /// This register is used by the BOOTROM in order to freeze the IWDGs clocks. After a system reset or STANDBY reset (nreset), or a CSTANDBY reset (cstby_rst) the MPU is allowed to write it once.Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MP_IWDGFZCLRR; /// This register is used by the BOOTROM in order to unfreeze the IWDGs clocks. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a clears the corresponding bit to . If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MP_CIER; /// This register shall be used by the MPU to control the interrupt source enable. Please refer to Section1.5: RCC Interrupts for more details. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_MP_CIFR; /// This register shall be used by the MPU in order to read and clear the interrupt flags.Writing has no effect, writing will clear the corresponding flag.Please refer to Section1.5: RCC Interrupts for more details. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_PWRLPDLYCR; /// This register is used to program the delay between the moment where the system exits from STOP and the moment where it is allowed to enable the PLLs and provide a clock to bridges and processors. If TZEN = , this register can only be modified in secure mode.
					__SOOL_PERIPH_PADDING_32;
					__SOOL_PERIPH_PADDING_64;
					__SOOL_PERIPH_PADDING_128;
					__SOOL_PERIPH_PADDING_256;
					__SOOL_PERIPH_PADDING_512;
					RCC_MAP0_MCO1CFGR; /// This register is used to select the clock generated on MCO1 output.
					RCC_MAP0_MCO2CFGR; /// This register is used to select the clock generated on MCO2 output.
					RCC_MAP0_OCRDYR; /// This is a read-only access register, It contains the status flags of oscillators. Writing has no effect.
					RCC_MAP0_DBGCFGR; /// This is register contains the enable control of the debug and trace function, and the clock divider for the trace function.
					__SOOL_PERIPH_PADDING_16;
					RCC_MAP0_RCK3SELR; /// This register is used to select the reference clock for PLL3. If TZEN = MCKPROT = , this register can only be modified in secure mode.
					RCC_MAP0_RCK4SELR; /// This register is used to select the reference clock for PLL4.
					RCC_MAP0_TIMG1PRER; /// This register is used to control the prescaler value of timers located into APB1 domain. It concerns TIM2, TIM3, TIM4, TIM5, TIM6, TIM7, TIM12, TIM13 and TIM14. Please refer to Section1.4.6.3: Sub-System Clock Generation for additional information.
					RCC_MAP0_TIMG2PRER; /// This register is used to control the prescaler value of timers located into APB2 domain. It concerns TIM1, TIM8, TIM15, TIM16, and TIM17. Please refer to Section1.4.6.3: Sub-System Clock Generation for additional information.
					RCC_MAP0_MCUDIVR; /// This register is used to control the MCU sub-system clock prescaler. Please refer to Section1.4.6.3: Sub-System Clock Generation for additional information. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP0_APB1DIVR; /// This register is used to control the APB1 clock prescaler. Please refer to section Section1.4.6.3: Sub-System Clock Generation for additional information.
					RCC_MAP0_APB2DIVR; /// This register is used to control the APB2 clock prescaler. Please refer to Section1.4.6.3: Sub-System Clock Generation for additional information.
					RCC_MAP0_APB3DIVR; /// This register is used to control the APB3 clock prescaler. Please refer to Section1.4.6.3: Sub-System Clock Generation for additional information.
					__SOOL_PERIPH_PADDING_64;
					RCC_MAP0_PLL3CR; /// This register is used to control the PLL3. If TZEN = MCKPROT = , this register can only be modified in secure mode.
					RCC_MAP0_PLL3CFGR1; /// This register is used to configure the PLL3. If TZEN = MCKPROT = , this register can only be modified in secure mode.
					RCC_MAP0_PLL3CFGR2; /// This register is used to configure the PLL3. If TZEN = MCKPROT = , this register can only be modified in secure mode.
					RCC_MAP0_PLL3FRACR; /// This register is used to fine-tune the frequency of the PLL3 VCO. If TZEN = MCKPROT = , this register can only be modified in secure mode.
					RCC_MAP0_PLL3CSGR; /// This register is used to configure the PLL3.It is not recommended to change the content of this register when the PLL3 is enabled (PLLON = ). Please refer to Section1.4.5.4: Using the PLLs in spread spectrum mode for details. If TZEN = MCKPROT = , this register can only be modified in secure mode.
					RCC_MAP0_PLL4CR; /// This register is used to control the PLL4.
					RCC_MAP0_PLL4CFGR1; /// This register is used to configure the PLL4.
					RCC_MAP0_PLL4CFGR2; /// This register is used to configure the PLL4.
					RCC_MAP0_PLL4FRACR; /// This register is used to fine-tune the frequency of the PLL4 VCO.
					RCC_MAP0_PLL4CSGR; /// This register is used to configure the PLL4.It is not recommended to change the content of this register when the PLL4 is enabled (PLLON = ). Please refer to Section1.4.5.4: Using the PLLs in spread spectrum mode for details. If TZEN = MCKPROT = , this register can only be modified in secure mode.
					__SOOL_PERIPH_PADDING_8;
					__SOOL_PERIPH_PADDING_16;
					RCC_MAP0_I2C12CKSELR; /// This register is used to control the selection of the kernel clock for the I2C1 and I2C2. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_I2C35CKSELR; /// This register is used to control the selection of the kernel clock for the I2C3 and I2C5. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_SAI1CKSELR; /// This register is used to control the selection of the kernel clock for the SAI1 and DFSDM audio clock. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_SAI2CKSELR; /// This register is used to control the selection of the kernel clock for the SAI2. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_SAI3CKSELR; /// This register is used to control the selection of the kernel clock for the SAI3. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_SAI4CKSELR; /// This register is used to control the selection of the kernel clock for the SAI4. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_SPI2S1CKSELR; /// This register is used to control the selection of the kernel clock for the SPI/I2S1. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_SPI2S23CKSELR; /// This register is used to control the selection of the kernel clock for the SPI/I2S2,3. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_SPI45CKSELR; /// This register is used to control the selection of the kernel clock for the SPI4,5. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_UART6CKSELR; /// This register is used to control the selection of the kernel clock for the USART6. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_UART24CKSELR; /// This register is used to control the selection of the kernel clock for the USART2 and UART4. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_UART35CKSELR; /// This register is used to control the selection of the kernel clock for the USART3 and UART5. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_UART78CKSELR; /// This register is used to control the selection of the kernel clock for the UART7 and UART8. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_SDMMC12CKSELR; /// This register is used to control the selection of the kernel clock for the SDMMC1 and SDMMC2. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_SDMMC3CKSELR; /// This register is used to control the selection of the kernel clock for the SDMMC3. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_ETHCKSELR; /// This register is used to control the selection of the kernel clock for the ETH block. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_QSPICKSELR; /// This register is used to control the selection of the kernel clock for the QUADSPI. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_FMCCKSELR; /// This register is used to control the selection of the kernel clock for the FMC block. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP0_FDCANCKSELR; /// This register is used to control the selection of the kernel clock for the FDCAN block. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP0_SPDIFCKSELR; /// This register is used to control the selection of the kernel clock for the SPDIFRX. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_CECCKSELR; /// This register is used to control the selection of the kernel clock for the CEC-HDMI. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_USBCKSELR; /// This register is used to control the selection of the kernel clock for the USBPHY PLL of the USB HOST and USB OTG. It also controls the pre-divider for the reference clock for the USBPHY. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_RNG2CKSELR; /// This register is used to control the selection of the kernel clock for the RNG2. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time.
					RCC_MAP0_DSICKSELR; /// This register is used to control the selection of the kernel clock for the DSI block. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_ADCCKSELR; /// This register is used to control the selection of the kernel clock for the ADC block. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_LPTIM45CKSELR; /// This register is used to control the selection of the kernel clock for the LPTIM4 and LPTIM5 blocks. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_LPTIM23CKSELR; /// This register is used to control the selection of the kernel clock for the LPTIM2 and LPTIM3 blocks. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					RCC_MAP0_LPTIM1CKSELR; /// This register is used to control the selection of the kernel clock for the LPTIM1 block. Note that changing the clock source on-the-fly is allowed, and will not generate any timing violation, however the user has to insure that both the previous and the new clock sources are present during the switching, and for the whole transition time. Please refer to Section1.4.10.1: Clock Enabling Delays.
					__SOOL_PERIPH_PADDING_8;
					__SOOL_PERIPH_PADDING_64;
					RCC_MAP0_APB1RSTSETR; /// This register is used to activate the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral.
					RCC_MAP0_APB1RSTCLRR; /// This register is used to release the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a releases the reset of the corresponding peripheral.
					RCC_MAP0_APB2RSTSETR; /// This register is used to activate the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral.
					RCC_MAP0_APB2RSTCLRR; /// This register is used to release the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a releases the reset of the corresponding peripheral.
					RCC_MAP0_APB3RSTSETR; /// This register is used to activate the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral.
					RCC_MAP0_APB3RSTCLRR; /// This register is used to release the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a releases the reset of the corresponding peripheral.
					RCC_MAP0_AHB2RSTSETR; /// This register is used to activate the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral.
					RCC_MAP0_AHB2RSTCLRR; /// This register is used to release the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a releases the reset of the corresponding peripheral.
					RCC_MAP0_AHB3RSTSETR; /// This register is used to activate the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral.
					RCC_MAP0_AHB3RSTCLRR; /// This register is used to release the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a releases the reset of the corresponding peripheral.
					RCC_MAP0_AHB4RSTSETR; /// This register is used to activate the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a activates the reset of the corresponding peripheral.
					RCC_MAP0_AHB4RSTCLRR; /// This register is used to release the reset of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a releases the reset of the corresponding peripheral.
					__SOOL_PERIPH_PADDING_16;
					__SOOL_PERIPH_PADDING_64;
					RCC_MAP0_MP_APB1ENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MPU. Writing has no effect, reading will return the effective value of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_APB1ENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MCU. Writing has no effect, reading will return . Writing a sets the corresponding bit to .
					RCC_MAP0_MP_APB2ENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_APB2ENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_APB3ENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_APB3ENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_AHB2ENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_AHB2ENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_AHB3ENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_AHB3ENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_AHB4ENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_AHB4ENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					__SOOL_PERIPH_PADDING_8;
					RCC_MAP0_MP_MLAHBENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MPU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_MLAHBENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MPU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					__SOOL_PERIPH_PADDING_64;
					RCC_MAP0_MC_APB1ENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return . Writing a sets the corresponding bit to .
					RCC_MAP0_MC_APB1ENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MCU. Writing has no effect, reading will return . Writing a sets the corresponding bit to .
					RCC_MAP0_MC_APB2ENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_APB2ENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_APB3ENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_APB3ENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_AHB2ENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_AHB2ENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_AHB3ENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_AHB3ENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_AHB4ENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_AHB4ENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_AXIMENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_AXIMENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_MLAHBENSETR; /// This register is used to set the peripheral clock enable bit of the corresponding peripheral to . It shall be used to allocate a peripheral to the MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_MLAHBENCLRR; /// This register is used to clear the peripheral clock enable bit of the corresponding peripheral. It shall be used to deallocate a peripheral from MCU. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					__SOOL_PERIPH_PADDING_64;
					RCC_MAP0_MP_APB1LPENSETR; /// This register is used by the MPU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_APB1LPENCLRR; /// This register is used by the MPU in order to clear the PERxLPEN bits of the corresponding peripherals located into the APB1 bus. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_APB2LPENSETR; /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_APB2LPENCLRR; /// This register is used by the MCU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_APB3LPENSETR; /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_APB3LPENCLRR; /// This register is used by the MCU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_AHB2LPENSETR; /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_AHB2LPENCLRR; /// This register is used by the MCU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_AHB3LPENSETR; /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_AHB3LPENCLRR; /// This register is used by the MCU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_AHB4LPENSETR; /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_AHB4LPENCLRR; /// This register is used by the MCU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_AXIMLPENSETR; /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_AXIMLPENCLRR; /// This register is used by the MCU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_MLAHBLPENSETR; /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MP_MLAHBLPENCLRR; /// This register is used by the MCU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					__SOOL_PERIPH_PADDING_64;
					RCC_MAP0_MC_APB1LPENSETR; /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_APB1LPENCLRR; /// This register is used by the MCU in order to clear the PERxLPEN bits of the corresponding peripherals located into the APB1 bus. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_APB2LPENSETR; /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_APB2LPENCLRR; /// This register is used by the MCU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_APB3LPENSETR; /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_APB3LPENCLRR; /// This register is used by the MCU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_AHB2LPENSETR; /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_AHB2LPENCLRR; /// This register is used by the MCU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_AHB3LPENSETR; /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_AHB3LPENCLRR; /// This register is used by the MCU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_AHB4LPENSETR; /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_AHB4LPENCLRR; /// This register is used by the MCU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_AXIMLPENSETR; /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_AXIMLPENCLRR; /// This register is used by the MCU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_MLAHBLPENSETR; /// This register is used by the MCU in order to set the PERxLPEN bit of the corresponding peripheral to . Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					RCC_MAP0_MC_MLAHBLPENCLRR; /// This register is used by the MCU in order to clear the PERxLPEN bit of the corresponding peripheral. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a sets the corresponding bit to .
					__SOOL_PERIPH_PADDING_64;
					RCC_MAP0_MC_RSTSCLRR; /// This register is used by the MCU to check the reset source. Writing has no effect, reading will return the effective values of the corresponding bits. Writing a clears the corresponding bit to .Please refer to Section1.3.12: Reset Source Identification for details.This register is located into VDD domain, and is reset by por_rst reset.
					__SOOL_PERIPH_PADDING_16;
					RCC_MAP0_MC_CIER; /// This register shall be used by the MCU to control the interrupt source enable. Please refer to Section1.5: RCC Interrupts for more details.
					RCC_MAP0_MC_CIFR; /// This register shall be used by the MCU in order to read and clear the interrupt flags.Writing has no effect, writing will clear the corresponding flag.Please refer to Section1.5: RCC Interrupts for more details.
					__SOOL_PERIPH_PADDING_8;
					__SOOL_PERIPH_PADDING_16;
					__SOOL_PERIPH_PADDING_64;
					__SOOL_PERIPH_PADDING_128;
					__SOOL_PERIPH_PADDING_256;
					__SOOL_PERIPH_PADDING_512;
					RCC_MAP0_VERR; /// This register gives the IP version
					RCC_MAP0_IDR; /// This register gives the unique identifier of the RCC
					RCC_MAP0_SIDR; /// This register gives the decoding space, which is for the RCC of 4 kB.
				};
				#endif
				#ifdef RCC_MAP1
				struct
				{
					CR_t CR; /// clock control register
					RCC_MAP1_HSICFGR; /// RCC Internal Clock Source Calibration Register
					RCC_MAP1_CRRCR; /// RCC Clock Recovery RC Register
					RCC_MAP1_CSICFGR; /// RCC CSI configuration register
					RCC_MAP1_CFGR; /// RCC Clock Configuration Register
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP1_D1CFGR; /// RCC Domain 1 Clock Configuration Register
					RCC_MAP1_D2CFGR; /// RCC Domain 2 Clock Configuration Register
					RCC_MAP1_D3CFGR; /// RCC Domain 3 Clock Configuration Register
					RCC_MAP1_APB1ENR; /// APB1 peripheral clock enable register
					RCC_MAP1_PLLCKSELR; /// RCC PLLs Clock Source Selection Register
					RCC_MAP1_PLLCFGR; /// RCC PLLs Configuration Register
					RCC_MAP1_PLL1DIVR; /// RCC PLL1 Dividers Configuration Register
					RCC_MAP1_PLL1FRACR; /// RCC PLL1 Fractional Divider Register
					RCC_MAP1_PLL2DIVR; /// RCC PLL2 Dividers Configuration Register
					RCC_MAP1_PLL2FRACR; /// RCC PLL2 Fractional Divider Register
					RCC_MAP1_PLL3DIVR; /// RCC PLL3 Dividers Configuration Register
					RCC_MAP1_PLL3FRACR; /// RCC PLL3 Fractional Divider Register
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP1_D1CCIPR; /// RCC Domain 1 Kernel Clock Configuration Register
					RCC_MAP1_D2CCIP1R; /// RCC Domain 2 Kernel Clock Configuration Register
					RCC_MAP1_D2CCIP2R; /// RCC Domain 2 Kernel Clock Configuration Register
					RCC_MAP1_D3CCIPR; /// RCC Domain 3 Kernel Clock Configuration Register
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP1_CIER; /// RCC Clock Source Interrupt Enable Register
					RCC_MAP1_CIFR; /// RCC Clock Source Interrupt Flag Register
					RCC_MAP1_CICR; /// RCC Clock Source Interrupt Clear Register
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP1_BDCR; /// RCC Backup Domain Control Register
					RCC_MAP1_CSR; /// RCC Clock Control and Status Register
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP1_AHB3RSTR; /// RCC AHB3 Reset Register
					RCC_MAP1_AHB1RSTR; /// RCC AHB1 Peripheral Reset Register
					RCC_MAP1_AHB2RSTR; /// RCC AHB2 Peripheral Reset Register
					RCC_MAP1_AHB4RSTR; /// RCC AHB4 Peripheral Reset Register
					RCC_MAP1_APB3RSTR; /// RCC APB3 Peripheral Reset Register
					RCC_MAP1_APB1LRSTR; /// RCC APB1 Peripheral Reset Register
					RCC_MAP1_APB1HRSTR; /// RCC APB1 Peripheral Reset Register
					RCC_MAP1_APB2RSTR; /// RCC APB2 Peripheral Reset Register
					RCC_MAP1_APB4RSTR; /// RCC APB4 Peripheral Reset Register
					RCC_MAP1_GCR; /// RCC Global Control Register
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP1_D3AMR; /// RCC D3 Autonomous mode Register
					__SOOL_PERIPH_PADDING_4;
					__SOOL_PERIPH_PADDING_32;
					RCC_MAP1_RSR; /// RCC Reset Status Register
					RCC_MAP1_AHB3ENR; /// RCC AHB3 Clock Register
					RCC_MAP1_AHB1ENR; /// RCC AHB1 Clock Register
					RCC_MAP1_AHB2ENR; /// RCC AHB2 Clock Register
					RCC_MAP1_AHB4ENR; /// RCC AHB4 Clock Register
					RCC_MAP1_APB3ENR; /// RCC APB3 Clock Register
					RCC_MAP1_APB1LENR; /// RCC APB1 Clock Register
					RCC_MAP1_APB1HENR; /// RCC APB1 Clock Register
					RCC_MAP1_APB2ENR; /// RCC APB2 Clock Register
					RCC_MAP1_APB4ENR; /// RCC APB4 Clock Register
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP1_AHB3LPENR; /// RCC AHB3 Sleep Clock Register
					RCC_MAP1_AHB1LPENR; /// RCC AHB1 Sleep Clock Register
					RCC_MAP1_AHB2LPENR; /// RCC AHB2 Sleep Clock Register
					RCC_MAP1_AHB4LPENR; /// RCC AHB4 Sleep Clock Register
					RCC_MAP1_APB3LPENR; /// RCC APB3 Sleep Clock Register
					RCC_MAP1_APB1LLPENR; /// RCC APB1 Low Sleep Clock Register
					RCC_MAP1_APB1HLPENR; /// RCC APB1 High Sleep Clock Register
					RCC_MAP1_APB2LPENR; /// RCC APB2 Sleep Clock Register
					RCC_MAP1_APB4LPENR; /// RCC APB4 Sleep Clock Register
					__SOOL_PERIPH_PADDING_16;
					RCC_MAP1_C1_RSR; /// RCC Reset Status Register
					RCC_MAP1_C1_AHB3ENR; /// RCC AHB3 Clock Register
					RCC_MAP1_C1_AHB1ENR; /// RCC AHB1 Clock Register
					RCC_MAP1_C1_AHB2ENR; /// RCC AHB2 Clock Register
					RCC_MAP1_C1_AHB4ENR; /// RCC AHB4 Clock Register
					RCC_MAP1_C1_APB3ENR; /// RCC APB3 Clock Register
					RCC_MAP1_C1_APB1LENR; /// RCC APB1 Clock Register
					RCC_MAP1_C1_APB1HENR; /// RCC APB1 Clock Register
					RCC_MAP1_C1_APB2ENR; /// RCC APB2 Clock Register
					RCC_MAP1_C1_APB4ENR; /// RCC APB4 Clock Register
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP1_C1_AHB3LPENR; /// RCC AHB3 Sleep Clock Register
					RCC_MAP1_C1_AHB1LPENR; /// RCC AHB1 Sleep Clock Register
					RCC_MAP1_C1_AHB2LPENR; /// RCC AHB2 Sleep Clock Register
					RCC_MAP1_C1_AHB4LPENR; /// RCC AHB4 Sleep Clock Register
					RCC_MAP1_C1_APB3LPENR; /// RCC APB3 Sleep Clock Register
					RCC_MAP1_C1_APB1LLPENR; /// RCC APB1 Low Sleep Clock Register
					RCC_MAP1_C1_APB1HLPENR; /// RCC APB1 High Sleep Clock Register
					RCC_MAP1_C1_APB2LPENR; /// RCC APB2 Sleep Clock Register
					RCC_MAP1_C1_APB4LPENR; /// RCC APB4 Sleep Clock Register
					__SOOL_PERIPH_PADDING_128;
					__SOOL_PERIPH_PADDING_512;
					__SOOL_PERIPH_PADDING_1024;
					__SOOL_PERIPH_PADDING_2048;
				};
				#endif
				#ifdef RCC_MAP2
				struct
				{
					__SOOL_PERIPH_PADDING_8;
					RCC_MAP2_CFGR; /// Clock configuration register
					RCC_MAP2_PLLCFGR; /// PLL configuration register
					RCC_MAP2_PLLSAI1CFGR; /// PLLSAI1 configuration register
					RCC_MAP2_PLLSAI2CFGR; /// PLLSAI2 configuration register
					RCC_MAP2_CIER; /// Clock interrupt enable register
					RCC_MAP2_CIFR; /// Clock interrupt flag register
					RCC_MAP2_CICR; /// Clock interrupt clear register
					RCC_MAP2_IOPRSTR; /// GPIO reset register
					RCC_MAP2_AHB1RSTR; /// AHB1 peripheral reset register
					RCC_MAP2_AHB2RSTR; /// AHB2 peripheral reset register
					RCC_MAP2_AHB3RSTR; /// AHB3 peripheral reset register
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP2_APB1RSTR1; /// APB1 peripheral reset register 1
					RCC_MAP2_APB1RSTR2; /// APB1 peripheral reset register 2
					RCC_MAP2_APB2RSTR; /// APB2 peripheral reset register
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP2_AHB1ENR; /// AHB1 peripheral clock enable register
					RCC_MAP2_AHB2ENR; /// AHB2 peripheral clock enable register
					__SOOL_PERIPH_PADDING_8;
					RCC_MAP2_APB1ENR1;
					RCC_MAP2_APB1ENR2; /// APB1 peripheral clock enable register 2
					RCC_MAP2_APB2ENR; /// RCC APB2 Clock Register
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP2_AHB1SMENR; /// AHB1 peripheral clocks enable in Sleep and Stop modes register
					RCC_MAP2_AHB2SMENR; /// AHB2 peripheral clocks enable in Sleep and Stop modes register
					RCC_MAP2_AHB3SMENR; /// AHB3 peripheral clocks enable in Sleep and Stop modes register
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP2_APB1SMENR1;
					RCC_MAP2_APB1SMENR2; /// APB1 peripheral clocks enable in Sleep and Stop modes register 2
					RCC_MAP2_APB2SMENR; /// CPU2 APB2SMENR
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP2_CCIPR; /// Peripherals independent clock configuration register
					RCC_MAP2_DCKCFGR1; /// dedicated clocks configuration register
					RCC_MAP2_BDCR; /// This register is used to control the LSE function. Wait states are inserted in case of successive write accesses to this register. The number of wait states may be up to 7 cycles of AHB4 clock.After a system reset, the register RCC_BDCR is write-protected. In order to modify this register, the DBP bit in the PWR control register 1 (PWR_CR1) has to be set to . Bits of RCC_BDCR register are only reset after a backup domain reset: nreset_vsw (see Section1.3.5: Backup domain reset). Any other internal or external reset will not have any effect on these bits.This register is located into the VSW domain. If TZEN = , this register can only be modified in secure mode.
					RCC_MAP2_CSR; /// RCC Clock Control and Status Register
					RCC_MAP2_CRRCR; /// Clock recovery RC register
					RCC_MAP2_CCIPR2; /// Peripherals independent clock configuration register
					__SOOL_PERIPH_PADDING_4;
					__SOOL_PERIPH_PADDING_16;
					__SOOL_PERIPH_PADDING_32;
					RCC_MAP2_AHB3ENR; /// RCC AHB3 Clock Register
					__SOOL_PERIPH_PADDING_32;
					__SOOL_PERIPH_PADDING_64;
					RCC_MAP2_C1_AHB1ENR; /// RCC AHB1 Clock Register
					__SOOL_PERIPH_PADDING_4;
					__SOOL_PERIPH_PADDING_8;
					RCC_MAP2_C1_APB1LENR; /// RCC APB1 Clock Register
					__SOOL_PERIPH_PADDING_16;
					RCC_MAP2_C1_AHB3LPENR; /// RCC AHB3 Sleep Clock Register
					RCC_MAP2_C1_AHB1LPENR; /// RCC AHB1 Sleep Clock Register
					__SOOL_PERIPH_PADDING_4;
					__SOOL_PERIPH_PADDING_8;
					__SOOL_PERIPH_PADDING_16;
					__SOOL_PERIPH_PADDING_128;
					__SOOL_PERIPH_PADDING_512;
					__SOOL_PERIPH_PADDING_1024;
					__SOOL_PERIPH_PADDING_2048;
				};
				#endif
				#ifdef RCC_MAP3
				struct
				{
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP3_PLLCFGR; /// PLL configuration register
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP3_CIR; /// clock interrupt register
					RCC_MAP3_AHB1RSTR; /// AHB1 peripheral reset register
					RCC_MAP3_AHB2RSTR; /// AHB2 peripheral reset register
					RCC_MAP3_AHB3RSTR; /// AHB3 peripheral reset register
					RCC_MAP3_AHBENR; /// AHB peripheral clock enable register
					RCC_MAP3_APB1RSTR; /// APB1 peripheral reset register
					RCC_MAP3_APB2RSTR; /// APB2 peripheral reset register
					__SOOL_PERIPH_PADDING_8;
					RCC_MAP3_AHB1ENR; /// AHB1 peripheral clock register
					RCC_MAP3_AHB2ENR; /// AHB2 peripheral clock enable register
					RCC_MAP3_AHB3ENR; /// AHB3 peripheral clock enable register
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP3_APB1ENR; /// APB1 peripheral clock enable register
					RCC_MAP3_APB2ENR; /// APB2 peripheral clock enable register
					__SOOL_PERIPH_PADDING_8;
					RCC_MAP3_AHB1LPENR; /// AHB1 peripheral clock enable in low power mode register
					RCC_MAP3_AHB2LPENR; /// AHB2 peripheral clock enable in low power mode register
					RCC_MAP3_AHB3LPENR; /// AHB3 peripheral clock enable in low power mode register
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP3_APB1LPENR; /// APB1 peripheral clock enable in low power mode register
					RCC_MAP3_APB2LPENR; /// APB2 peripheral clock enabled in low power mode register
					__SOOL_PERIPH_PADDING_8;
					__SOOL_PERIPH_PADDING_16;
					RCC_MAP3_SSCGR; /// spread spectrum clock generation register
					RCC_MAP3_PLLI2SCFGR; /// PLLI2S configuration register
					RCC_MAP3_PLLSAICFGR; /// PLL configuration register
					RCC_MAP3_DKCFGR1; /// dedicated clocks configuration register
					RCC_MAP3_DKCFGR2; /// dedicated clocks configuration register
					__SOOL_PERIPH_PADDING_4;
					__SOOL_PERIPH_PADDING_8;
					__SOOL_PERIPH_PADDING_32;
					__SOOL_PERIPH_PADDING_64;
					__SOOL_PERIPH_PADDING_256;
					__SOOL_PERIPH_PADDING_512;
					__SOOL_PERIPH_PADDING_1024;
					__SOOL_PERIPH_PADDING_2048;
				};
				#endif
				#ifdef RCC_MAP4
				struct
				{
					__SOOL_PERIPH_PADDING_4;
					__SOOL_PERIPH_PADDING_8;
					RCC_MAP4_PLLSYSCFGR; /// PLL configuration register
					RCC_MAP4_AHBRSTR; /// AHB peripheral reset register
					RCC_MAP4_APB2RSTR; /// APB2 peripheral reset register
					RCC_MAP4_APB1RSTR; /// APB1 peripheral reset register
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP4_APB2ENR; /// APB2 peripheral clock enable register
					RCC_MAP4_CSR; /// Control/status register (RCC_CSR)
					RCC_MAP4_AHBLPENR; /// AHB peripheral clock enable in low power mode register
					RCC_MAP4_APBRSTR1; /// APB peripheral reset register 1
					RCC_MAP4_APBRSTR2; /// APB peripheral reset register 2
					RCC_MAP4_IOPENR; /// GPIO clock enable register
					RCC_MAP4_AHBENR; /// AHB peripheral clock enable register
					__SOOL_PERIPH_PADDING_8;
					RCC_MAP4_IOPSMENR; /// GPIO in Sleep mode clock enable register
					__SOOL_PERIPH_PADDING_4;
					__SOOL_PERIPH_PADDING_16;
					RCC_MAP4_BDCR; /// RTC domain control register
					__SOOL_PERIPH_PADDING_8;
					__SOOL_PERIPH_PADDING_32;
					RCC_MAP4_CCIPR1; /// CCIPR
					RCC_MAP4_DCKCFGR; /// Dedicated Clock Configuration Register
					RCC_MAP4_DCKCFGR2; /// dedicated clocks configuration register
					__SOOL_PERIPH_PADDING_4;
					__SOOL_PERIPH_PADDING_8;
					__SOOL_PERIPH_PADDING_32;
					__SOOL_PERIPH_PADDING_64;
					__SOOL_PERIPH_PADDING_256;
					__SOOL_PERIPH_PADDING_512;
					__SOOL_PERIPH_PADDING_1024;
					__SOOL_PERIPH_PADDING_2048;
				};
				#endif
				#ifdef RCC_MAP5
				struct
				{
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP5_CFGR; /// Clock configuration register (RCC_CFGR)
					RCC_MAP5_CIR; /// Clock interrupt register (RCC_CIR)
					RCC_MAP5_APB2RSTR; /// APB2 peripheral reset register (RCC_APB2RSTR)
					RCC_MAP5_APB1RSTR; /// APB1 peripheral reset register (RCC_APB1RSTR)
					RCC_MAP5_AHBENR; /// AHB Peripheral Clock enable register (RCC_AHBENR)
					RCC_MAP5_APB2ENR; /// APB2 peripheral clock enable register (RCC_APB2ENR)
					RCC_MAP5_APB1ENR; /// APB1 peripheral clock enable register (RCC_APB1ENR)
					RCC_MAP5_BDCR; /// Backup domain control register (RCC_BDCR)
					RCC_MAP5_SMPSCR; /// Step Down converter control register
					RCC_MAP5_AHBRSTR; /// AHB peripheral reset register
					RCC_MAP5_CFGR2; /// Clock configuration register 2
					RCC_MAP5_CFGR3; /// Clock configuration register 3
					RCC_MAP5_CR2; /// Clock control register 2
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP5_APBENR1; /// APB peripheral clock enable register 1
					RCC_MAP5_APBENR2; /// APB peripheral clock enable register 2
					RCC_MAP5_APB3RSTR; /// APB3 peripheral reset register
					RCC_MAP5_AHBSMENR; /// AHB peripheral clock enable in Sleep mode register
					RCC_MAP5_APBSMENR1; /// APB peripheral clock enable in Sleep mode register 1
					RCC_MAP5_APBSMENR2; /// APB peripheral clock enable in Sleep mode register 2
					RCC_MAP5_CCIPR; /// Peripherals independent clock configuration register
					__SOOL_PERIPH_PADDING_8;
					RCC_MAP5_CSR; /// Control/status register
					__SOOL_PERIPH_PADDING_4;
					__SOOL_PERIPH_PADDING_8;
					__SOOL_PERIPH_PADDING_32;
					RCC_MAP5_CKGATENR; /// clocks gated enable register
					RCC_MAP5_DCKCFGR2; /// dedicated clocks configuration register 2
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP5_HSECR; /// Clock HSE register
					__SOOL_PERIPH_PADDING_8;
					__SOOL_PERIPH_PADDING_32;
					__SOOL_PERIPH_PADDING_64;
					RCC_MAP5_EXTCFGR; /// Extended clock recovery register
					__SOOL_PERIPH_PADDING_4;
					__SOOL_PERIPH_PADDING_8;
					__SOOL_PERIPH_PADDING_16;
					__SOOL_PERIPH_PADDING_32;
					RCC_MAP5_C2AHB1ENR; /// CPU2 AHB1 peripheral clock enable register
					RCC_MAP5_C2AHB2ENR; /// CPU2 AHB2 peripheral clock enable register
					RCC_MAP5_C2AHB3ENR; /// CPU2 AHB3 peripheral clock enable register
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP5_C2APB1ENR1; /// CPU2 APB1ENR1
					RCC_MAP5_C2APB1ENR2; /// CPU2 APB1 peripheral clock enable register 2
					RCC_MAP5_C2APB2ENR; /// CPU2 APB2ENR
					RCC_MAP5_C2APB3ENR; /// CPU2 APB3ENR
					RCC_MAP5_C2AHB1SMENR; /// CPU2 AHB1 peripheral clocks enable in Sleep and Stop modes register
					RCC_MAP5_C2AHB2SMENR; /// CPU2 AHB2 peripheral clocks enable in Sleep and Stop modes register
					RCC_MAP5_C2AHB3SMENR; /// CPU2 AHB3 peripheral clocks enable in Sleep and Stop modes register
					__SOOL_PERIPH_PADDING_4;
					RCC_MAP5_C2APB1SMENR1; /// CPU2 APB1SMENR1
					RCC_MAP5_C2APB1SMENR2; /// CPU2 APB1 peripheral clocks enable in Sleep and Stop modes register 2
					RCC_MAP5_C2APB2SMENR; /// CPU2 APB2SMENR
					RCC_MAP5_C2APB3SMENR; /// CPU2 APB3SMENR
					__SOOL_PERIPH_PADDING_8;
					__SOOL_PERIPH_PADDING_16;
					__SOOL_PERIPH_PADDING_32;
					__SOOL_PERIPH_PADDING_64;
					__SOOL_PERIPH_PADDING_512;
					__SOOL_PERIPH_PADDING_1024;
					__SOOL_PERIPH_PADDING_2048;
				};
				#endif
				#ifdef RCC_MAP6
				struct
				{
					__SOOL_PERIPH_PADDING_4;
					__SOOL_PERIPH_PADDING_8;
					CFGR_t CFGR; /// Clock configuration register
					CIER_t CIER; /// Clock interrupt enable register
					CIFR_t CIFR; /// Clock interrupt flag register
					CICR_t CICR; /// Clock interrupt clear register
					IOPRSTR_t IOPRSTR; /// GPIO reset register
					AHBRSTR_t AHBRSTR; /// AHB peripheral reset register
					__SOOL_PERIPH_PADDING_4;
					APB1RSTR_t APB1RSTR; /// APB1 peripheral reset register
					IOPENR_t IOPENR; /// GPIO clock enable register
					AHBENR_t AHBENR; /// AHB peripheral clock enable register
					APB2ENR_t APB2ENR; /// APB2 peripheral clock enable register
					APB1ENR_t APB1ENR; /// APB1 peripheral clock enable register
					IOPSMEN_t IOPSMEN; /// GPIO clock enable in sleep mode register
					AHBSMENR_t AHBSMENR; /// AHB peripheral clock enable in sleep mode register
					APB2SMENR_t APB2SMENR; /// APB2 peripheral clock enable in sleep mode register
					APB1SMENR_t APB1SMENR; /// APB1 peripheral clock enable in sleep mode register
					CCIPR_t CCIPR; /// Clock configuration register
					CSR_t CSR; /// Control and status register
					__SOOL_PERIPH_PADDING_4;
					__SOOL_PERIPH_PADDING_8;
					__SOOL_PERIPH_PADDING_32;
					__SOOL_PERIPH_PADDING_128;
					__SOOL_PERIPH_PADDING_256;
					__SOOL_PERIPH_PADDING_512;
					__SOOL_PERIPH_PADDING_1024;
					__SOOL_PERIPH_PADDING_2048;
				};
				#endif
				#ifdef RCC_MAP7
				struct
				{
					__SOOL_PERIPH_PADDING_4;
					__SOOL_PERIPH_PADDING_8;
					__SOOL_PERIPH_PADDING_32;
					APB2LPENR_t APB2LPENR; /// APB2 peripheral clock enable in low power mode register
					APB1LPENR_t APB1LPENR; /// APB1 peripheral clock enable in low power mode register
					CSR_t CSR; /// Control/status register
					__SOOL_PERIPH_PADDING_8;
					__SOOL_PERIPH_PADDING_64;
					__SOOL_PERIPH_PADDING_128;
					__SOOL_PERIPH_PADDING_256;
					__SOOL_PERIPH_PADDING_512;
					__SOOL_PERIPH_PADDING_1024;
					__SOOL_PERIPH_PADDING_2048;
				};
				#endif
			};

			#if __SOOL_DEBUG_NOPHY
				RCC(uintptr_t addr) : myaddr(addr){};
				const uintptr_t myaddr;
				inline const uintptr_t get_addr() {return myaddr;};
			#else
				inline const uintptr_t get_addr() {return reinterpret_cast<uintptr_t>(this);};
			private:
				RCC() = delete;
			#endif
			
		};

#if	defined(STM32MP1     )
#define RCC_BASE_ADDR ((uint32_t)0x50000000U)
#define RCC_TMPL
#endif

#if	defined(STM32H7      )
#define RCC_BASE_ADDR ((uint32_t)0x58024400U)
#define RCC_TMPL
#endif

#if	defined(STM32F0      ) || defined(STM32F3      ) || defined(STM32G0      ) || defined(STM32G4      ) || defined(STM32GB      ) || \
    defined(STM32L0      ) || defined(STM32L4      )
#define RCC_BASE_ADDR ((uint32_t)0x40021000U)
#define RCC_TMPL
#endif

#if	defined(STM32F2      ) || defined(STM32F4      ) || defined(STM32F7      ) || defined(STM32L1      )
#define RCC_BASE_ADDR ((uint32_t)0x40023800U)
#define RCC_TMPL
#endif

#if	defined(STM32WB      )
#define RCC_BASE_ADDR ((uint32_t)0x58000000U)
#define RCC_TMPL
#endif


//Instances for peripheral RCC
		#if __SOOL_DEBUG_NOPHY
			volatile class RCC * const RCC = new class RCC(RCC_BASE_ADDR);
		#else
			volatile class RCC * const RCC = reinterpret_cast<class RCC* const>(RCC_BASE_ADDR);
		#endif

		
		
	};
};
#undef RCC_APB1RSTR_1_WWDRST
#undef RCC_APB1RSTR_2_COMPRST
#undef RCC_APB1ENR_0_I2C4EN
#undef RCC_PLLCFGR_2_PLLN2
#undef RCC_AHBENR_0_IOPCEN
#undef RCC_APB1LPENR_1_CAN3LPEN
#undef RCC_APB1ENR1_0_LCDEN
#undef RCC_MAP0_MC_APB1LPENSETR
#undef RCC_MAP2_AHB1ENR
#undef RCC_MAP0_MPCKDIVR
#undef RCC_CICR_0_PLL3RDYC
#undef RCC_MAP0_RNG1CKSELR
#undef RCC_MAP0_MP_AHB6LPENCLRR
#undef RCC_MAP5_CFGR2
#undef RCC_MAP5_DCKCFGR2
#undef RCC_MAP1_CRRCR
#undef RCC_AHBENR_0_AESEN
#undef RCC_APB1ENR_3_CRSEN
#undef RCC_MAP0_MC_AHB3ENSETR
#undef RCC_CFGR_0
#undef RCC_MAP0_AHB3ENR
#undef RCC_MAP0_HSICFGR
#undef RCC_MAP4_CCIPR1
#undef RCC_MAP0_PLL2FRACR
#undef RCC_MAP1_CSICFGR
#undef RCC_MAP1_C1_APB1HENR
#undef RCC_APB2RSTR_1_USART1RST
#undef RCC_MAP5_APBENR1
#undef RCC_APB2RSTR_0_SAI2RST
#undef RCC_MAP0_MP_APB5LPENCLRR
#undef RCC_AHB3RSTR_2_FSMCRST
#undef RCC_AHB3RSTR_0_CPURST
#undef RCC_APB2SMENR_0_TIM15SMEN
#undef RCC_C1_AHB1ENR_0_USB2OTGHSEN
#undef RCC_PLLCFGR_2_PLLP1
#undef RCC_MAP0_MP_AHB3LPENSETR
#undef RCC_CSR_0_OBLRSTF
#undef RCC_CIFR_1_CSSF
#undef RCC_APB2ENR_1_SYSCFGEN
#undef RCC_AHB3LPENR_1_QSPILPEN
#undef RCC_APBSMENR2_TIM15SMEN
#undef RCC_APB2RSTR_0_USART1RST
#undef RCC_APB2RSTR_3
#undef RCC_DCKCFGR_0_PLLSAIDIVR
#undef RCC_MAP3_AHB1LPENR
#undef RCC_AHBENR_3_TOUCHEN
#undef RCC_AHB1RSTR_2
#undef RCC_APB1SMENR1_0_TIM6SMEN
#undef RCC_CIFR_0_LSECSSF
#undef RCC_AHB1ENR_0_RNGEN
#undef RCC_MAP0_STGENCKSELR
#undef RCC_MAP5_HSECR
#undef RCC_MAP1_PLL3DIVR
#undef RCC_MAP0_MC_APB3ENSETR
#undef RCC_DCKCFGR2_0_UART3SEL
#undef RCC_CFGR_1_I2SSRC
#undef RCC_AHB2ENR_1_RNGEN
#undef RCC_CIER_1_PLLRDYIE
#undef RCC_CR_0_RC48RDY
#undef RCC_MAP5_APB1ENR
#undef RCC_CSR_2
#undef RCC_AHB1ENR_1_GPIOBEN
#undef RCC_MAP1_CSR
#undef RCC_AHB1ENR_2_FLITFEN
#undef RCC_AHB2ENR_0_HASHEN
#undef RCC_AHB2ENR_1_GPIOEEN
#undef RCC_AHB1LPENR_0_ETH1RXLPEN
#undef RCC_AHB3ENR_1_QSPIEN
#undef RCC_APB2RSTR_0_SDMMC2RST
#undef RCC_MAP3_AHB3RSTR
#undef RCC_AHB2RSTR_1_DAC1RST_
#undef RCC_APB1SMENR1_1_I2C3SMEN_3
#undef RCC_AHB1RSTR_2_FLITFRST_
#undef RCC_CICR_1_PLLRDYC
#undef RCC_MAP4_APB2ENR
#undef RCC_AHB3SMENR_0_SRAM2SMEN
#undef RCC_MAP5_C2APB1SMENR2
#undef RCC_CFGR_2_MCO1EN
#undef RCC_MAP0_AHB3RSTSETR
#undef RCC_MAP0_PLL3CSGR
#undef RCC_APB1ENR_2_I2C3EN
#undef RCC_DCKCFGR_1_SAI2SRC
#undef RCC_CIER_2_HSI16RDYIE
#undef RCC_CFGR_0_MCO2PRE
#undef RCC_AHB3RSTR_0_MDMARST
#undef RCC_MAP2_C1_AHB3LPENR
#undef RCC_MAP0_MC_AHB4LPENSETR
#undef RCC_PLLCFGR_0_PLLN7
#undef RCC_PLLI2SCFGR_2
#undef RCC_AHB1RSTR_0_OTGHSRST
#undef RCC_MAP2_APB1ENR1
#undef RCC_PLLCFGR_1_PLLM
#undef RCC_CFGR_2_SWS0
#undef RCC_CCIPR_0_I2C3SEL
#undef RCC_AHBENR_0_TSCEN
#undef RCC_CR_0_HSEPRE
#undef RCC_MAP0_MP_APB5ENSETR
#undef RCC_MAP0_APB3RSTSETR
#undef RCC_APB1RSTR_0_CECRST
#undef RCC_MAP0_MP_APB2ENSETR
#undef RCC_MAP0_MP_AHB5LPENSETR
#undef RCC_CIER_1_PLLSAI1RDYIE
#undef RCC_APB1ENR_0_CAN1EN
#undef RCC_AHB1LPENR_0_OTGHSULPILPEN
#undef RCC_APB1LPENR_0_LPTIM1LPEN
#undef RCC_CSR_2_FIREWALLRSTF
#undef RCC_AHBENR_3_RNGEN
#undef RCC_APB2ENR_1_ADCEN
#undef RCC_APB1SMENR1_1_USART2SMEN
#undef RCC_APB2ENR_0_ADC2EN
#undef RCC_APB2RSTR_3_SDAD1RST
#undef RCC_APB2LPENR_0_SAI2LPEN
#undef RCC_APB2ENR_0_TIM17EN
#undef RCC_MAP0_SAI4CKSELR
#undef RCC_MAP0_AHB4RSTCLRR
#undef RCC_APB2RSTR_0_USBPHYCRST
#undef RCC_APB1ENR_1_RTCAPB
#undef RCC_APB2LPENR_0_SDMMC1LPEN
#undef RCC_MAP1_D3AMR
#undef RCC_AHB2RSTR_0_DAC4RST
#undef RCC_BDCR_1_RTCSRC
#undef RCC_MAP1_AHB1ENR
#undef RCC_APB2LPENR_0_ADC3LPEN
#undef RCC_APB1SMENR1_0_CRSSMEN
#undef RCC_CR_0_HSIKERON
#undef RCC_APB2RSTR_2_DFSDMRST
#undef RCC_CFGR_1_MCO21
#undef RCC_APB2ENR_0_ADC1EN
#undef RCC_APB1RSTR_2_CECRST
#undef RCC_CFGR_2_MCO1PRE
#undef RCC_AHB3SMENR_0_RNGSMEN
#undef RCC_MAP1_CIFR
#undef RCC_MAP2_AHB2ENR
#undef RCC_PLLSAI1CFGR_0_PLLSAI1PDIV
#undef RCC_MAP1_HSICFGR
#undef RCC_AHB1SMENR_0_CORDICSMEN
#undef RCC_AHB2RSTR_1_RNGRST
#undef RCC_MAP0_MC_AHB4ENCLRR
#undef RCC_PLLSAICFGR_PLLSAIR
#undef RCC_APB3RSTR_DSIRST
#undef RCC_AHB1RSTR_1_GPIOARST
#undef RCC_AHBENR_1_MIFEN
#undef RCC_APB1LPENR_1_USART5LPEN
#undef RCC_APB2ENR_3
#undef RCC_PLLI2SCFGR_0_PLLI2SM
#undef RCC_APB1RSTR_1
#undef RCC_MAP0_PLL4CSGR
#undef RCC_AHB1RSTR_1_MATRIXRST
#undef RCC_AHB1RSTR_0_DMA2RST
#undef RCC_APB2SMENR_0_DSISMEN
#undef RCC_CSR_2_LSERDY
#undef RCC_CIFR_2
#undef RCC_AHB1ENR_1_GPIOAEN
#undef RCC_MAP1
#undef RCC_APB2ENR_2_TIM11EN
#undef RCC_CRRCR_1
#undef RCC_APB1RSTR_1_USBRST
#undef RCC_AHB2ENR_0_SRAM3EN
#undef RCC_PLLCFGR_2_PLLSRC
#undef RCC_MAP2_BDCR
#undef RCC_APB2LPENR_0_ADC2LPEN
#undef RCC_AHB2ENR_0_GPIOBEN
#undef RCC_PLLSAI2CFGR_PLLSAI2QEN
#undef RCC_AHB3ENR_0_RNGEN
#undef RCC_MAP1_C1_APB1HLPENR
#undef RCC_CCIPR_1_USART2SEL0
#undef RCC_AHBRSTR_0_CRCRST
#undef RCC_APB2SMENR_0_SPI4SMEN
#undef RCC_APB1RSTR1_0_CAN2RST
#undef RCC_APB1RSTR_0_UART8RST
#undef RCC_AHBRSTR_2_DMA1RST
#undef RCC_APB2SMENR_0_TIM1SMEN
#undef RCC_MAP0_DSICKSELR
#undef RCC_APB1ENR_0_TIM3EN
#undef RCC_MAP0_C1_AHB3ENR
#undef RCC_CRRCR_4
#undef RCC_AHBRSTR_0_IOPFRST
#undef RCC_MAP0_BDCR
#undef RCC_APB1RSTR1_0_SPI3RST
#undef RCC_APB1ENR_0_RTCAPBEN
#undef RCC_AHBENR_2_GPIOCEN
#undef RCC_MAP1_AHB2LPENR
#undef RCC_AHB1SMENR_0_TSCSMEN
#undef RCC_AHB3ENR_0_OSPI2EN
#undef RCC_APB1SMENR_USBSMEN
#undef RCC_CICR_1_PLLSAI1RDYC
#undef RCC_APB1ENR_0_TIM6EN
#undef RCC_APB2SMENR_0_SYSCFGSMEN
#undef RCC_AHB2ENR_2_RNGEN
#undef RCC_AHB3RSTR_0_QSPIRST
#undef RCC_AHB2ENR_1_GPIOGEN
#undef RCC_MAP1_C1_AHB2LPENR
#undef RCC_MAP1_C1_AHB4ENR
#undef RCC_APB1RSTR1_0_TIM5RST
#undef RCC_MAP0_MP_AHB4ENSETR
#undef RCC_APB2ENR_0_USART6EN
#undef RCC_MAP0_SDMMC12CKSELR
#undef RCC_APBSMENR1_TIM7SMEN
#undef RCC_APB2ENR_1_SAI2EN
#undef RCC_MAP0_UART35CKSELR
#undef RCC_CIER_1_RC48RDYIE
#undef RCC_AHB1ENR_1_CORDICEN
#undef RCC_AHBRSTR_0_GPIOCRST
#undef RCC_AHB2RSTR_2_HASH1RST
#undef RCC_AHBENR_0_DMAEN
#undef RCC_AHB1LPENR_1_SRAM2LPEN
#undef RCC_APB1LPENR_2
#undef RCC_AHB2RSTR_0_DAC3RST
#undef RCC_MAP6
#undef RCC_APB1ENR_2_LPTIMER1EN
#undef RCC_AHBENR_3_DMAEN
#undef RCC_AHB1RSTR_0_CRCRST
#undef RCC_CCIPR_1_LPUART1SEL0
#undef RCC_APB1SMENR_LCDSMEN
#undef RCC_AHB3RSTR_1
#undef RCC_MAP1_RSR
#undef RCC_AHB2RSTR_2_HSAHRST
#undef RCC_MAP0_MC_APB4ENCLRR
#undef RCC_CIFR_1_PLLSAI2RDYF
#undef RCC_CFGR_1_RTCPRE
#undef RCC_AHB1RSTR_0_GPIOGRST
#undef RCC_AHB1LPENR_0_ADC12LPEN
#undef RCC_MAP0_MP_AHB6ENCLRR
#undef RCC_AHB3RSTR_0_AES2RST
#undef RCC_MAP0_MP_RSTSR
#undef RCC_CCIPR2_1_QUADSPISEL
#undef RCC_MAP1_D1CFGR
#undef RCC_MAP0_MC_APB5ENSETR
#undef RCC_MAP0_MP_AHB2LPENSETR
#undef RCC_APB1RSTR1_1_FDCANRST
#undef RCC_PLLCFGR_0_DIVR3EN
#undef RCC_MAP1_APB3ENR
#undef RCC_DCKCFGR2_0_LPTIM1SEL
#undef RCC_AHB2SMENR_2
#undef RCC_APB1LPENR_0_I2C3LPEN
#undef RCC_APB2ENR_1_FIREWALLEN
#undef RCC_CICR_0_HSECSSC
#undef RCC_D3AMR_1
#undef RCC_CCIPR2_0_DSISEL
#undef RCC_APB1RSTR_0_I2C2RST
#undef RCC_MAP2_CRRCR
#undef RCC_APB1RSTR_1_USART4RST
#undef RCC_APB2RSTR_0_SPI4RST
#undef RCC_APB2RSTR_0_TIM15RST
#undef RCC_APB1SMENR1_0_USART2SMEN
#undef RCC_APB1RSTR_2_CRSRST
#undef RCC_DCKCFGR2_0
#undef RCC_CFGR_1_PPRE21
#undef RCC_CR_1_CSSON
#undef RCC_APBRSTR1_CECRST
#undef RCC_MAP0_APB2DIVR
#undef RCC_MAP0_AHB3RSTCLRR
#undef RCC_AHBENR_0_SRAMEN
#undef RCC_APB1SMENR1_1
#undef RCC_AHB1LPENR_0_ETH1MACLPEN
#undef RCC_CICR_2_PLLSYSRDYC
#undef RCC_MAP0_MP_APB2ENCLRR
#undef RCC_APB1RSTR2_LPTIM2RST
#undef RCC_MAP0_PLL4CFGR2
#undef RCC_AHB2RSTR_1_ADC12RST
#undef RCC_AHBSMENR_0_FLASHSMEN
#undef RCC_CFGR_4_MCO1PRE1
#undef RCC_APB2ENR_1_SDMMCEN
#undef RCC_AHB2ENR_0_AESEN
#undef RCC_DCKCFGR2_0_CECSEL
#undef RCC_AHBRSTR_0_ADC34RST
#undef RCC_PLLCFGR_0_DIVP3EN
#undef RCC_APB1RSTR1_1_USART4RST
#undef RCC_APBSMENR1_USART4SMEN
#undef RCC_AHB2ENR_0_SDMMC2EN
#undef RCC_MAP0_SPI2S1CKSELR
#undef RCC_MAP0_MP_AHB2LPENCLRR
#undef RCC_PLLCFGR_1_PLLN
#undef RCC_CFGR_2_PPRE2
#undef RCC_APB1RSTR1_1_CRSRST
#undef RCC_MAP0_MP_APB4ENCLRR
#undef RCC_MAP0_MP_TZAHB6ENSETR
#undef RCC_MAP0_PLL3CFGR2
#undef RCC_CSR_0_RTCRST
#undef RCC_APB1ENR1_0_DAC1EN
#undef RCC_CIER_0_HSIRDYIE
#undef RCC_AHB1ENR_0_FLASHEN
#undef RCC_CICR_1_CSSC
#undef RCC_CR_1_RTCPRE
#undef RCC_AHB1ENR_0_OTGHSEN
#undef RCC_ICSCR_0
#undef RCC_APB2RSTR_1_TIM9RST
#undef RCC_APB2RSTR_0_LTDCRST
#undef RCC_MAP1_APB4RSTR
#undef RCC_APB2RSTR_2_HRTIM1RST
#undef RCC_AHB1SMENR_0_CRCSMEN
#undef RCC_MAP5_APB2RSTR
#undef RCC_APB1SMENR_TIM3SMEN
#undef RCC_CFGR_2_RTCPRE4
#undef RCC_MAP0_APB1RSTSETR
#undef RCC_CSR_1_PORRSTF
#undef RCC_ICSCR_2_HSITRIM
#undef RCC_PLLCFGR_0_PLL2RGE
#undef RCC_CICR_1_PLLSAI2RDYC
#undef RCC_MAP0_UART24CKSELR
#undef RCC_MAP0_BR_RSTSCLRR
#undef RCC_CFGR_2
#undef RCC_CIFR_2_RC48RDYF
#undef RCC_MAP5_CIR
#undef RCC_BDCR_3
#undef RCC_CIFR_0_PLL3RDYF
#undef RCC_CFGR_5_HPRE
#undef RCC_MAP0_CSICFGR
#undef RCC_AHB2ENR_2_CRYPEN
#undef RCC_APB1ENR1_1
#undef RCC_AHB2RSTR_0_RNGRST
#undef RCC_MAP0_UART6CKSELR
#undef RCC_CSR_1_RTCEN
#undef RCC_APB2LPENR_0_TIM9LPEN
#undef RCC_MAP0_SIDR
#undef RCC_MAP1_AHB4LPENR
#undef RCC_BDCR_0_RTCSRC
#undef RCC_PLLCFGR_2_PLLR
#undef RCC_CR_1_HSIKERON
#undef RCC_AHB2LPENR_1_CRYPLPEN
#undef RCC_AHB1RSTR_2_DMAMUXRST
#undef RCC_CFGR_2_PPRE1
#undef RCC_MAP1_APB2ENR
#undef RCC_MAP2_C1_AHB1ENR
#undef RCC_AHB1ENR_0_DMA1EN
#undef RCC_MAP5_C2APB2ENR
#undef RCC_APB2ENR_0_DSIEN
#undef RCC_CFGR3_0_I2C2SW
#undef RCC_APB1ENR1_0_I2C3EN
#undef RCC_APB1RSTR1_0_OPAMPRST
#undef RCC_MAP3_AHB3ENR
#undef RCC_APB2ENR_1_TIM11EN
#undef RCC_CCIPR_1_I2C1SEL0
#undef RCC_MAP1_BDCR
#undef RCC_MAP2_PLLSAI2CFGR
#undef RCC_AHB2ENR_2_HASH1EN
#undef RCC_CFGR3_0_UART4SW
#undef RCC_MAP0_OCENSETR
#undef RCC_AHBRSTR_1_IOPHRST
#undef RCC_CFGR_3_MCOSEL
#undef RCC_MAP2_AHB1SMENR
#undef RCC_APB2RSTR_0_TIM1RST
#undef RCC_CR_1
#undef RCC_MAP2_APB1ENR2
#undef RCC_AHB2RSTR_2_CRYPRST
#undef RCC_CCIPR_1_I2C3SEL0
#undef RCC_AHB1ENR_1_USB1ULPIEN
#undef RCC_AHB2LPENR_2_AESLPEN
#undef RCC_CR_0_D2CKRDY
#undef RCC_MAP0_MP_AHB2ENSETR
#undef RCC_AHB2SMENR_0_GPIOGSMEN
#undef RCC_PLLCFGR_0_DIVQ3EN
#undef RCC_APB2SMENR_1_DBGSMEN
#undef RCC_AHB1LPENR_0_GPIOGLPEN
#undef RCC_APB2ENR_1_USART1EN
#undef RCC_APB1ENR1_1_USART1EN
#undef RCC_APB1LPENR_0_TIM12LPEN
#undef RCC_MAP2_APB1RSTR1
#undef RCC_AHB3ENR_1_PKAEN
#undef RCC_BDCR_1_LSECSSON
#undef RCC_APBSMENR1_USART3SMEN
#undef RCC_CFGR_1_PPRE2
#undef RCC_MAP5
#undef RCC_MAP0_VERR
#undef RCC_MAP0_PLL2CSGR
#undef RCC_AHB2SMENR_0_OSPIMSMEN
#undef RCC_MAP0_ICSCR
#undef RCC_APB1ENR1_1_FDCANEN
#undef RCC_CFGR_1_PPRE1
#undef RCC_AHB2RSTR_0_DCMIRST
#undef RCC_AHB3ENR_0_IPCCEN
#undef RCC_CR_2_HSI16ON
#undef RCC_AHB2SMENR_0_OTGFSSMEN
#undef RCC_APB1LPENR_1_RTCAPBLPEN
#undef RCC_APB1RSTR1_0_USART3RST
#undef RCC_MAP1_APB4LPENR
#undef RCC_CR_0_CSION
#undef RCC_CSR_1_LSI2BW
#undef RCC_AHB3LPENR_1_FLASHLPEN
#undef RCC_APB2RSTR_0_HRTIMRST
#undef RCC_AHB1ENR_0_DMAMUX1EN
#undef RCC_APB2ENR_0_TIM1EN
#undef RCC_MAP4_AHBENR
#undef RCC_AHB3RSTR_0_QUADSPI1RST
#undef RCC_APB2ENR_1_TIM10EN
#undef RCC_MAP1_APB1LLPENR
#undef RCC_APB2SMENR_0_TIM21SMEN
#undef RCC_MAP1_AHB4RSTR
#undef RCC_MAP5_APBENR2
#undef RCC_APB1ENR1_0_OPAMPEN
#undef RCC_CFGR_2_MCO11
#undef RCC_CFGR_2_MCO2
#undef RCC_AHB1ENR_1_DMA2EN
#undef RCC_CFGR_5_MCO
#undef RCC_CRRCR_2
#undef RCC_CRRCR_2_HSI48CAL
#undef RCC_AHBRSTR_0_IOPBRST
#undef RCC_APB1SMENR1_1_CRSMEN
#undef RCC_MAP0_MP_APB4LPENCLRR
#undef RCC_MAP0_MP_APB1LPENCLRR
#undef RCC_MAP0_MC_AHB3LPENCLRR
#undef RCC_AHBENR_0_IOPAEN
#undef RCC_AHB2LPENR_0_QSPILPEN
#undef RCC_APB2LPENR_0_SPI4LPEN
#undef RCC_APBENR1_CECEN
#undef RCC_PLLCFGR_2_PLLN1
#undef RCC_AHBRSTR_0_GPIOHRST
#undef RCC_BDCR_1_LSEDRV
#undef RCC_MAP2_AHB1RSTR
#undef RCC_AHBRSTR_0_GPIOBRST
#undef RCC_AHB3ENR_0_JPGDECEN
#undef RCC_APB2RSTR_0_SAI1RST
#undef RCC_PLLCFGR_1_PLLREN
#undef RCC_AHB2ENR_1_GPIOAEN
#undef RCC_AHB1RSTR_1_DMA1RST
#undef RCC_PLLCFGR_1_PLLQ1
#undef RCC_GCR_BOOT_C2
#undef RCC_AHB3ENR_0_DMA2DEN
#undef RCC_MAP0_MC_AHB6ENSETR
#undef RCC_APB2RSTR_2_TIM22RST
#undef RCC_AHB1LPENR_1_GPIOFLPEN
#undef RCC_APB1ENR_1_UART7EN
#undef RCC_APB2LPENR_0_TIM10LPEN
#undef RCC_APB1LENR_1
#undef RCC_CIFR_2_PLLSYSRDYF
#undef RCC_ICSCR_3_HSI16CAL
#undef RCC_CCIPR2_0_SAI1SEL
#undef RCC_APB1RSTR_0_TIM13RST
#undef RCC_APB1RSTR_1_I2CFMP1RST
#undef RCC_CSR_2_PWRRSTF
#undef RCC_MAP1_AHB3ENR
#undef RCC_MAP0_MC_APB3LPENCLRR
#undef RCC_CFGR_3_ADCPRE
#undef RCC_PLLI2SCFGR_1
#undef RCC_AHB1LPENR_1_DMA1LPEN
#undef RCC_APB1ENR_0_LPTMI1EN
#undef RCC_AHB1LPENR_0_GPIOELPEN
#undef RCC_PLLCFGR_0_PLLR
#undef RCC_AHB1LPENR_0_BKPSRAMLPEN
#undef RCC_CCIPR_0_SWPMI1SEL
#undef RCC_AHBRSTR_0_ADC12RST
#undef RCC_BDCR_0_LSERDY
#undef RCC_CFGR_3_USBPRES
#undef RCC_CR_2_HSITRIM
#undef RCC_APB1SMENR2_USBPDSMEN
#undef RCC_AHB1LPENR_1_FLITFLPEN
#undef RCC_APB1RSTR_0_SPI3RST
#undef RCC_AHB1RSTR_0_RNGRST
#undef RCC_CCIPR_1_USART1SEL1
#undef RCC_PLLCFGR_3_PLLR3
#undef RCC_CR_0_HSIASFS
#undef RCC_APB1ENR2_I2C4EN
#undef RCC_APB2LPENR_2
#undef RCC_APB1RSTR1_1_USBDRST
#undef RCC_MAP3_APB1RSTR
#undef RCC_AHB2SMENR_0_GPIOESMEN
#undef RCC_MAP2_IOPRSTR
#undef RCC_APB1RSTR_0_LPTIM1RST
#undef RCC_APB1LPENR_0_I2C4LPEN
#undef RCC_AHB3ENR_1_FMCEN
#undef RCC_MAP0_MC_AHB5LPENCLRR
#undef RCC_DCKCFGR2_2
#undef RCC_PLLCFGR_0_DIVP1EN
#undef RCC_CSR_1_PADRSTF
#undef RCC_AHBRSTR_2_TOUCHRST
#undef RCC_CCIPR_1_USART4SEL
#undef RCC_MAP1_APB3RSTR
#undef RCC_CSR_0_SFTRSTF
#undef RCC_APB1ENR_0_TIM4EN
#undef RCC_MAP2_PLLSAI1CFGR
#undef RCC_MAP0_AHB2RSTCLRR
#undef RCC_CFGR_2_SW1
#undef RCC_AHB1LPENR_0_USB2ULPILPEN
#undef RCC_APB1ENR_0_TIM2EN
#undef RCC_IOPRSTR_IOPFRST
#undef RCC_APB2ENR_0_TIM16EN
#undef RCC_CIFR_1_HSI48RDYF
#undef RCC_CSR_0_MSISRANGE
#undef RCC_CSR_1_CSSLSED
#undef RCC_AHB2RSTR_0_ADCRST
#undef RCC_PLLCFGR_0_PLLN6
#undef RCC_APB1ENR_0_SPDIFRXEN
#undef RCC_APB2ENR_1_SDAD2EN
#undef RCC_IOPENR_1_GPIOHEN
#undef RCC_MAP0_I2C4CKSELR
#undef RCC_CIFR_1
#undef RCC_AHB1SMENR_0_GFXMMUSMEN
#undef RCC_PLLCFGR_2_PLLP0
#undef RCC_AHB1LPENR_0_DMA2DLPEN
#undef RCC_CFGR_2_PPRE1F
#undef RCC_AHB3LPENR_2
#undef RCC_AHB1ENR_1_GPIOIEN
#undef RCC_MAP1_C1_AHB1ENR
#undef RCC_APB2ENR_3_SDAD1EN
#undef RCC_MAP3_APB1ENR
#undef RCC_APB1ENR2_SWPMI1EN
#undef RCC_APB2LPENR_0_USART6LPEN
#undef RCC_ICSCR_1_HSITRIM
#undef RCC_DCKCFGR2_0_FMPI2C1SEL
#undef RCC_MAP2_APB1SMENR2
#undef RCC_CCIPR_1_RNGDIV
#undef RCC_APB1ENR_3_CECEN
#undef RCC_AHB1ENR_0_DMA2EN
#undef RCC_AHB2ENR_0_GPIOHEN
#undef RCC_CSR_0_FWRSTF
#undef RCC_MAP0_MP_MLAHBENSETR
#undef RCC_MAP0_MP_GRSTCSETR
#undef RCC_CR_1_PLLSAI2ON
#undef RCC_APB1ENR2_USBPDEN
#undef RCC_AHB3ENR_2_FSMCEN
#undef RCC_APBENR1_UCPD1EN
#undef RCC_CFGR_5_PLLDIV
#undef RCC_CR_0_PLL1ON
#undef RCC_CCIPR_1_USART1SEL0
#undef RCC_APB1LPENR_0_USART3LPEN
#undef RCC_MAP0_RCK12SELR
#undef RCC_APB1RSTR_0_TIM12RST
#undef RCC_CR_1_MSIRANGE
#undef RCC_DCKCFGR2_0_SDMMC1SEL
#undef RCC_MAP0_LPTIM23CKSELR
#undef RCC_CR_2_PLLI2SON
#undef RCC_DCKCFGR_0_SAI1BSRC
#undef RCC_APB2RSTR_0_TIM16RST
#undef RCC_MAP0_AHB6RSTSETR
#undef RCC_CR_0_PLL3ON
#undef RCC_MAP2_APB1RSTR2
#undef RCC_DCKCFGR2_0_SDMMC2SEL
#undef RCC_APB1SMENR1_0_DAC1SMEN
#undef RCC_AHBLPENR_0_GPIOGLPEN
#undef RCC_MAP1_CIER
#undef RCC_CFGR_2_HPRE0
#undef RCC_APB2LPENR_0_SDMMC2LPEN
#undef RCC_CCIPR_1_I2C1SEL1
#undef RCC_APB1RSTR_0_UART4RST
#undef RCC_MAP0_MP_GCR
#undef RCC_APB2LPENR_1_DFSDMLPEN
#undef RCC_CCIPR_1_HSI48MSEL
#undef RCC_APBENR1_UCPD2EN
#undef RCC_MAP5_AHBRSTR
#undef RCC_MAP0_MC_APB4ENSETR
#undef RCC_MAP0_MP_APB4LPENSETR
#undef RCC_AHB2ENR_0_RNGEN
#undef RCC_APB1RSTR1_0_UART5RST
#undef RCC_MAP1_AHB2ENR
#undef RCC_APB2RSTR_1_TIM20RST
#undef RCC_APB2ENR_3_MIFIEN
#undef RCC_AHB1RSTR_0_ETH1MACRST
#undef RCC_CSR_1_RTCRST
#undef RCC_AHB2RSTR_2_RNGRST
#undef RCC_APB2SMENR_0_TIM22SMEN
#undef RCC_MAP1_CICR
#undef RCC_APB2RSTR_1_TIM1RST
#undef RCC_APB2LPENR_0_HRTIMLPEN
#undef RCC_AHBENR_0_IOPGEN
#undef RCC_AHBLPENR_0_DMA2LPEN
#undef RCC_PLLCFGR_0_DIVQ1EN
#undef RCC_AHB2RSTR_0_DAC2RST
#undef RCC_AHB2LPENR_0_SRAM1LPEN
#undef RCC_CIFR_2_HSI48RDYF
#undef RCC_APB1ENR2_DFSDMEN
#undef RCC_CFGR_0_STOPKERWUCK
#undef RCC_PLLCFGR_2_PLLN4
#undef RCC_MAP0_ETHCKSELR
#undef RCC_CR_3_RTCPRE0
#undef RCC_CSR_0_BORRSTF
#undef RCC_CR_3_HSI16DIVEN
#undef RCC_AHB3ENR_0_QUADSPI1EN
#undef RCC_AHB2SMENR_0_GPIOHSMEN
#undef RCC_AHBRSTR_0_GPIOERST
#undef RCC_APB1ENR1_0_TIM7EN
#undef RCC_HSICFGR_0
#undef RCC_AHBRSTR_1_RNGRST
#undef RCC_MAP1_PLL3FRACR
#undef RCC_AHB1LPENR_0_GPIOHLPEN
#undef RCC_APB2LPENR_1_SYSCFGLPEN
#undef RCC_MAP2_AHB3RSTR
#undef RCC_MAP2_CFGR
#undef RCC_MAP0_MC_AHB2LPENCLRR
#undef RCC_MAP1_C1_AHB2ENR
#undef RCC_MAP0_MC_AXIMLPENCLRR
#undef RCC_MAP2_APB1SMENR1
#undef RCC_MAP2_CIER
#undef RCC_AHBLPENR_0_DMA1LPEN
#undef RCC_CR_0_HSION
#undef RCC_AHB1ENR_1_GPIOCEN
#undef RCC_AHB2RSTR_0
#undef RCC_APB1LPENR_1_COMPLPEN
#undef RCC_AHB2SMENR_0_HASHSMEN
#undef RCC_APB2SMENR_1
#undef RCC_BDCR_0_LSEBYP
#undef RCC_APB2LPENR_1_TIM10LPEN
#undef RCC_MAP0_PLL2CFGR1
#undef RCC_AHBLPENR_1
#undef RCC_APB1LPENR_1_SPDIFLPEN
#undef RCC_CCIPR_1_LPTIM1SEL0
#undef RCC_AHB1ENR_0_ETH1RXEN
#undef RCC_PLLCFGR_0_PLL1VCOSEL
#undef RCC_MAP0_PLL3CFGR1
#undef RCC_APB1RSTR_0_TIM7RST
#undef RCC_PLLSYSCFGR_0_PLLSYSN
#undef RCC_MAP1_PLL2DIVR
#undef RCC_AHB1LPENR_0_GPIODLPEN
#undef RCC_AHB2RSTR_0_GPIOIRST
#undef RCC_PLLCFGR_2_PLLM5
#undef RCC_DCKCFGR2_0_UART5SEL
#undef RCC_CFGR_2_HPREF
#undef RCC_AHB1RSTR_1_ETHMACRST
#undef RCC_MAP0_MCO2CFGR
#undef RCC_APB2SMENR_0_TIM8SMEN
#undef RCC_PLLCFGR_0
#undef RCC_AHB3RSTR_0_FLASHRST
#undef RCC_CIR_2_LSECSSIE
#undef RCC_MAP1_C1_AHB3LPENR
#undef RCC_AHB2SMENR_2_AES1SMEN
#undef RCC_APB2LPENR_1_USART1LPEN
#undef RCC_CR_0_PLL2ON
#undef RCC_GCR_WW2RSC
#undef RCC_ICSCR_3_HSITRIM
#undef RCC_AHB1ENR_0_GPIOGEN
#undef RCC_APB2ENR_0_TIM15EN
#undef RCC_APB1RSTR1_0_USART2RST
#undef RCC_CCIPR_2_CECSEL
#undef RCC_MAP0_MP_AHB5ENSETR
#undef RCC_AHB1ENR_1_FMACEN
#undef RCC_AHB2LPENR_0_OTGFSLPEN
#undef RCC_MAP0_PWRLPDLYCR
#undef RCC_AHBSMENR_1_TOUCHSMEN
#undef RCC_APB1LPENR_0_UART7LPEN
#undef RCC_MAP0_MP_APB2LPENCLRR
#undef RCC_PLLCFGR_0_DIVR1EN
#undef RCC_AHBRSTR_0_FLASHRST
#undef RCC_CIER_2
#undef RCC_AHB1SMENR_0_DMA2DSMEN
#undef RCC_APB1LPENR_1_I2CFMP1LPEN
#undef RCC_APB1RSTR_1_I2C3RST
#undef RCC_APB2LPENR_0_TIM8LPEN
#undef RCC_MAP5_EXTCFGR
#undef RCC_MAP1_D2CFGR
#undef RCC_CFGR_5_SDPRE
#undef RCC_MAP0_SAI2CKSELR
#undef RCC_PLLCFGR_0_PLL3FRACEN
#undef RCC_AHBENR_0_GPIOHEN
#undef RCC_BDCR_0_LSCOSEL
#undef RCC_CSR_0_PINRSTF
#undef RCC_APB1ENR_0_UART7ENR
#undef RCC_CSR_0_WWDGRSTF
#undef RCC_AHBRSTR_2
#undef RCC_APB2LPENR_1
#undef RCC_APB1RSTR_0_TIM3RST
#undef RCC_AHBENR_1_GPIOAEN
#undef RCC_MAP0_MP_MLAHBLPENCLRR
#undef RCC_PLLSAICFGR_PLLSAIM
#undef RCC_MAP3_DKCFGR2
#undef RCC_MAP2_AHB3SMENR
#undef RCC_DCKCFGR2_1_LPTIM1SEL
#undef RCC_APB1ENR1_1_SPI3EN
#undef RCC_CR_1_MSION
#undef RCC_CCIPR_0_ADCSEL
#undef RCC_BDCR_2_RTCSEL
#undef RCC_APB2ENR_0_SAI1EN
#undef RCC_APBENR1_TIM6EN
#undef RCC_AHB2RSTR_2_AES1RST
#undef RCC_CSR_1_RTCSEL
#undef RCC_AHB2SMENR_0_SRAM2SMEN
#undef RCC_APB1SMENR1_0_UART5SMEN
#undef RCC_CCIPR_1_TIM15SEL
#undef RCC_APB1ENR_0_UART5EN
#undef RCC_AHB1RSTR_0_DMA2DRST
#undef RCC_AHB3RSTR_0
#undef RCC_APB1SMENR1_0_RTCAPBSMEN
#undef RCC_APB2ENR_0_SDMMC1EN
#undef RCC_CIR_2_LSECSSF
#undef RCC_APB1ENR1_0_SPI2EN
#undef RCC_AHB1LPENR_1_SRAM1LPEN
#undef RCC_APBSMENR1_DAC1SMEN
#undef RCC_IOPENR_0_IOPHEN
#undef RCC_AHB3RSTR_0_IPCCRST
#undef RCC_AHB1ENR_0_USB1OTGHSULPIEN
#undef RCC_BDCR_0_LSECSSD_
#undef RCC_AHBSMENR_1_RNGSMEN
#undef RCC_AHB2ENR_1_HASHEN
#undef RCC_APB1RSTR_0_UART5RST
#undef RCC_MAP0_MP_AHB4LPENSETR
#undef RCC_APB2ENR_2_SPI4ENR
#undef RCC_AHB3RSTR_0_HSEMRST
#undef RCC_AHB1RSTR_1_DMA2DRST
#undef RCC_MAP0_MC_AHB2LPENSETR
#undef RCC_AHBRSTR_0_DMA2RST
#undef RCC_PLLSYSCFGR_0_PLLSYSM
#undef RCC_AHB2RSTR_1
#undef RCC_AHB1ENR_1_CRCEN
#undef RCC_CIFR_0_PLL1RDYF
#undef RCC_MAP0_MP_APB3LPENSETR
#undef RCC_APB1LPENR_0_CECLPEN
#undef RCC_BDCR_0_RTCEN
#undef RCC_APB2ENR_2_TIM20EN
#undef RCC_AHB1SMENR_0_FLASHSMEN
#undef RCC_CR_0_CSIKERON
#undef RCC_ICSCR_3
#undef RCC_APB2RSTR_0_DFSDM1RST
#undef RCC_AHB2RSTR_1_CRYPTRST
#undef RCC_CR_1_MSIRGSEL
#undef RCC_APB1LPENR_0_UART8LPEN
#undef RCC_MAP0_MP_IWDGFZCLRR
#undef RCC_MAP0_MP_TZAHB6LPENCLRR
#undef RCC_MAP1_D2CCIP1R
#undef RCC_CR_3_HSI16DIVF
#undef RCC_APB2LPENR_0_SYSCFGLPEN
#undef RCC_CIFR_0_HSERDYF
#undef RCC_APB1ENR1_0_CAN1EN
#undef RCC_AHB1LPENR_0_AXILPEN
#undef RCC_APB1LPENR_1_LPTIMER1LPEN
#undef RCC_APB1RSTR1_0_CRSRST
#undef RCC_CIR_0_PLLI2SRDYIE
#undef RCC_MAP0_AXIDIVR
#undef RCC_CIER_2_PLLSYSRDYIE
#undef RCC_CSR_1_WDGRSTF
#undef RCC_CRRCR_3
#undef RCC_APB1ENR_1_SPDIFEN
#undef RCC_MAP5_APB2ENR
#undef RCC_AHB1RSTR_1_CRCRST
#undef RCC_CCIPR2_0_DFSDMSEL
#undef RCC_CFGR_2_HPRE2
#undef RCC_BDCR_0_LSCOEN
#undef RCC_CR_0_HSIDIVF
#undef RCC_APB1ENR1_0_RTCAPBEN
#undef RCC_AHB1ENR_1_GPIOFEN
#undef RCC_APB1RSTR_0_SPDIFRXRST
#undef RCC_APB1SMENR1_1_CRSSMEN
#undef RCC_APB1LENR_0_WWDG2EN
#undef RCC_AHB1ENR_0_OTGHSULPIEN
#undef RCC_APBENR1_TIM7EN
#undef RCC_AHB2RSTR_1_ADC345RST_
#undef RCC_AHB2RSTR_0_OSPIMRST
#undef RCC_MAP3_APB2ENR
#undef RCC_APB2RSTR_0_USART6RST
#undef RCC_AHB2ENR_0_GPIOCEN
#undef RCC_MAP0_MP_APB5ENCLRR
#undef RCC_MAP2_CICR
#undef RCC_MAP0_MC_AHB5ENSETR
#undef RCC_AHB3ENR_0_QSPIEN
#undef RCC_AHB1ENR_2_ETHMACRXEN
#undef RCC_AHB2ENR_0_SDMMC1EN
#undef RCC_MAP0_CECCKSELR
#undef RCC_BDCR_0_LSEDRV
#undef RCC_APB1SMENR_DACSMEN
#undef RCC_AHB3RSTR_1_FMCRST
#undef RCC_CIR_0_PLLSAIRDYF
#undef RCC_MAP5_C2AHB3SMENR
#undef RCC_CR_0_HSIRDY
#undef RCC_CR_2_HSICAL
#undef RCC_ICSCR_2
#undef RCC_APB1ENR_0_UART4EN
#undef RCC_APB2RSTR_0_TIM8RST
#undef RCC_APB1SMENR1_0_SP3SMEN
#undef RCC_APB1ENR_0_UART8ENR
#undef RCC_MAP0_PLL1CFGR2
#undef RCC_APB2LPENR_0_ADC1LPEN
#undef RCC_APB1SMENR1_0_OPAMPSMEN
#undef RCC_APB2ENR_1_TIM9EN
#undef RCC_MAP0_CPERCKSELR
#undef RCC_IOPRSTR_IOPHRST
#undef RCC_APB1SMENR_USART5SMEN
#undef RCC_AHB3RSTR_2_QSPIRST
#undef RCC_APB1SMENR1_0_USART3SMEN
#undef RCC_PLLSAI1CFGR_0
#undef RCC_APB1RSTR_0_TIM2RST
#undef RCC_DCKCFGR2_0_I2C3SEL
#undef RCC_CFGR_0_SW
#undef RCC_APB1ENR1_0_I2C2EN
#undef RCC_MAP1_CFGR
#undef RCC_CIER_0_PLL3RDYIE
#undef RCC_APB2RSTR_0_TIM21RST
#undef RCC_MAP1_C1_AHB4LPENR
#undef RCC_CICR_1_LSI1RDYC
#undef RCC_APB1ENR1_0_TIM5EN
#undef RCC_AHBLPENR_0_GPIOHLPEN
#undef RCC_CFGR_4_ADCPRE
#undef RCC_DCKCFGR_1_PLLI2SDIVQ
#undef RCC_CR_0_PLL2RDY
#undef RCC_MAP0_MP_APB1ENSETR
#undef RCC_AHBSMENR_0_AESSMEN
#undef RCC_PLLSYSCFGR_1
#undef RCC_APB2SMENR_0_DFSDM1SMEN
#undef RCC_AHBENR_0_ADC34EN
#undef RCC_MAP0_MC_AXIMENCLRR
#undef RCC_AHB2ENR_0_CAMITFEN
#undef RCC_APB1LPENR_0_SPDIFRXLPEN
#undef RCC_AHB2ENR_0_DAC4
#undef RCC_APB2LPENR_0_TIM17LPEN
#undef RCC_MAP1_D3CCIPR
#undef RCC_APB2LPENR_0_TIM16LPEN
#undef RCC_APBRSTR1_UCPD1RST
#undef RCC_APB1ENR_1_DAC1EN
#undef RCC_CIFR_0_HSIRDYF
#undef RCC_APB1ENR_1_USART5EN
#undef RCC_IOPENR_1_GPIOFEN
#undef RCC_AHBSMENR_0_CRYPSMEN
#undef RCC_CFGR2_ADC12PRES
#undef RCC_MAP0_SPI45CKSELR
#undef RCC_APB1ENR_3
#undef RCC_CR_0_D1CKRDY
#undef RCC_MAP5_APBSMENR2
#undef RCC_MAP0_MC_AHB4LPENCLRR
#undef RCC_AHB3SMENR_0_FLASHSMEN
#undef RCC_CIR_1
#undef RCC_MAP5_C2AHB1ENR
#undef RCC_MAP3_SSCGR
#undef RCC_APB2ENR_0_EXTITEN
#undef RCC_PLLSYSCFGR_0_PLLSYSPDIV
#undef RCC_AHBENR_2_GPIOHEN
#undef RCC_BDCR_1_VSWRST
#undef RCC_CCIPR_2
#undef RCC_CCIPR_0_USART2SEL
#undef RCC_MAP0_MP_AHB6LPENSETR
#undef RCC_CFGR_0_RTCPRE0
#undef RCC_PLLCFGR_3_PLLM
#undef RCC_DCKCFGR_0_DSISEL
#undef RCC_DCKCFGR_1_SAI1SRC
#undef RCC_CFGR_1_MCOSEL
#undef RCC_AHB3ENR_2_QSPIEN
#undef RCC_CCIPR_1_RNGSEL
#undef RCC_APB2LPENR_1_ADC1LPEN
#undef RCC_MAP7
#undef RCC_PLLCFGR_0_PLLN8
#undef RCC_PLLCFGR_3_PLLR1
#undef RCC_APB2RSTR_0_TIM19RST
#undef RCC_PLLCFGR_2_PLLREN
#undef RCC_CICR_2_HSI48RDYC
#undef RCC_APB2LPENR_0_SAI1LPEN
#undef RCC_APBRSTR1_TIM7RST
#undef RCC_AHBENR_2_GPIOEEN
#undef RCC_MAP3_AHB1ENR
#undef RCC_CRRCR_0
#undef RCC_CR_3_HSIDIV
#undef RCC_MAP0_QSPICKSELR
#undef RCC_MAP0_PLL3FRACR
#undef RCC_MAP0_FMCCKSELR
#undef RCC_BDCR_1_LSECSSD
#undef RCC_CIFR_3
#undef RCC_CSR_0_LSION
#undef RCC_APB2ENR_0_SAI2EN
#undef RCC_MAP0_APB4DIVR
#undef RCC_MAP0_MP_BOOTCR
#undef RCC_AHB2ENR_1
#undef RCC_APB1RSTR1_0_CAN1RST
#undef RCC_CICR_0_HSIRDYC
#undef RCC_CICR_2_HSI16RDYC
#undef RCC_PLLCFGR_4_PLLQEN
#undef RCC_CCIPR_1
#undef RCC_APB1SMENR2_SWPMI1SMEN
#undef RCC_AHB1ENR_0_DMA2DEN
#undef RCC_AHB2LPENR_1
#undef RCC_CFGR3_0_USART2SW
#undef RCC_MAP0_MC_RSTSCLRR
#undef RCC_CIFR_1_PLLRDYF
#undef RCC_MAP3_AHB2LPENR
#undef RCC_APBSMENR1_CECSMEN
#undef RCC_CCIPR_1_USART2SEL1
#undef RCC_MAP4_IOPENR
#undef RCC_APB2SMENR_0_SAI1SMEN
#undef RCC_APBENR2_TIM15EN
#undef RCC_AHBSMENR_1
#undef RCC_MAP0_MP_APB3ENSETR
#undef RCC_APB1RSTR1_1_USART1RST
#undef RCC_MAP1_AHB3LPENR
#undef RCC_AHBENR_0_GPIODEN
#undef RCC_APB1ENR_0_I2C2EN
#undef RCC_APB2RSTR_0_SAI3RST
#undef RCC_CSR_2_LSEDRV
#undef RCC_CCIPR_0
#undef RCC_AHB1LPENR_0_RNGLPEN
#undef RCC_AHB1ENR_2_ETHMACEN
#undef RCC_CFGR_2_MCO10
#undef RCC_APB1RSTR_0_TIM5RST
#undef RCC_APB1RSTR_0_UART2RST
#undef RCC_AHB1ENR_0_USB2OTGHSEN
#undef RCC_MAP3_AHBENR
#undef RCC_MAP0_RCK4SELR
#undef RCC_APB1ENR_2_LPTIM1EN
#undef RCC_MAP1_C1_APB2ENR
#undef RCC_APB2RSTR_0_DSIRST
#undef RCC_AHB2LPENR_0_SRAM3LPEN
#undef RCC_CR_0_PLL1RDY
#undef RCC_MAP1_AHB4ENR
#undef RCC_MAP4_DCKCFGR2
#undef RCC_APB2RSTR_0_TIM17RST
#undef RCC_AHB2ENR_1_OTGFSEN
#undef RCC_AHB3SMENR_0_AES2SMEN
#undef RCC_APB2RSTR_1_SAI2RST
#undef RCC_MAP2
#undef RCC_CFGR_4_PLLMUL
#undef RCC_MAP5_C2AHB2ENR
#undef RCC_PLLSYSCFGR_0_PLLSYSP
#undef RCC_APB1RSTR_1_SPDIFRST
#undef RCC_APB1RSTR_1_CANRST
#undef RCC_MAP5_CFGR
#undef RCC_ICSCR_1
#undef RCC_DCKCFGR2_0_UART8SEL
#undef RCC_MAP2_CCIPR
#undef RCC_APB1RSTR1_1_I2C3
#undef RCC_MAP0_DBGCFGR
#undef RCC_DCKCFGR2_0_I2C1SEL
#undef RCC_AHB1ENR_0_ARTEN
#undef RCC_CSICFGR_0
#undef RCC_MAP1_APB1ENR
#undef RCC_AHB3ENR_0_HSEMEN
#undef RCC_MAP0_TZCR
#undef RCC_AHB1LPENR_1_GPIOALPEN
#undef RCC_APB2ENR_1
#undef RCC_CSICFGR_1
#undef RCC_AHB1LPENR_1_GPIOBLPEN
#undef RCC_AHBLPENR_0_GPIOFLPEN
#undef RCC_APB1SMENR1_0_TIM7SMEN
#undef RCC_APBRSTR2_TIM15RST
#undef RCC_APB1ENR1_0_TIM3EN
#undef RCC_APB1RSTR1_1
#undef RCC_APB2LPENR_0_EXTITEN
#undef RCC_APB2ENR_0_SPI4EN
#undef RCC_APB2SMENR_0_TIM20SMEN
#undef RCC_PLLCFGR_2_PLLQ0
#undef RCC_APB1ENR_1_UART8EN
#undef RCC_AHBENR_1_IOPHEN
#undef RCC_AHB1RSTR_0_TSCRST
#undef RCC_CFGR_3_PPRE10
#undef RCC_AHB1ENR_1_GFXMMUEN
#undef RCC_DCKCFGR2_0_UART2SEL
#undef RCC_PLLI2SCFGR_0_PLLI2SSRC
#undef RCC_PLLCFGR_0_PLL3RGE
#undef RCC_CIFR_0_LSIRDYF
#undef RCC_CR_1_MSIPLLEN
#undef RCC_CFGR_1_MCO2PRE0
#undef RCC_CFGR_1_MCO1
#undef RCC_DCKCFGR_0_SDMMCSEL
#undef RCC_AHB2SMENR_0_DAC4SMEN
#undef RCC_AHBRSTR_1_CRYPRST
#undef RCC_PLLSAI1CFGR_0_PLLSAI1M
#undef RCC_CICR_0_HSERDYC
#undef RCC_APB1ENR1_1_USBF
#undef RCC_AHB2ENR_0_SRAM2EN
#undef RCC_MAP2_APB2ENR
#undef RCC_D3CFGR_0
#undef RCC_CIER_1_LSI1RDYIE
#undef RCC_AHB2ENR_0_DAC2
#undef RCC_APB2LPENR_1_SDIOLPEN
#undef RCC_APB2ENR_0_TIM21EN
#undef RCC_MAP0_AHB4RSTSETR
#undef RCC_APB2SMENR_0_SAI2SMEN
#undef RCC_MAP5_APB3RSTR
#undef RCC_AHB1RSTR_0_ADC12RST
#undef RCC_APB1ENR1_0_TIM6EN
#undef RCC_APB2RSTR_0_SDMMCRST
#undef RCC_APB1LPENR_0_TIM7LPEN
#undef RCC_MAP4_PLLSYSCFGR
#undef RCC_APB2ENR_1_SPI5ENR
#undef RCC_APB1SMENR1_0_I2C2SMEN
#undef RCC_AHB1ENR_0_ETH1TXEN
#undef RCC_CIR_0_PLLI2SRDYC
#undef RCC_APB2LPENR_0_LTDCLPEN
#undef RCC_AHB1LPENR_0_DTCMLPEN
#undef RCC_CR_3_MSIRDY
#undef RCC_AHB1ENR_2_ETHMACTXEN
#undef RCC_IOPSMEN_IOPESMEN
#undef RCC_APB1RSTR2_I2C4RST
#undef RCC_APB2ENR_0_LTDCEN
#undef RCC_APB2RSTR_1_ADCRST
#undef RCC_APB1RSTR_2_DAC3RST
#undef RCC_AHBENR_2_DMA1EN
#undef RCC_BDCR_2
#undef RCC_CR_2
#undef RCC_APB2RSTR_2_TIM9RST
#undef RCC_APB2ENR_2
#undef RCC_APB2ENR_0_USART1EN
#undef RCC_CSR_1_RMVF
#undef RCC_CR_1_PLLON
#undef RCC_DCKCFGR_0_MSEL
#undef RCC_MAP0_SAI3CKSELR
#undef RCC_APB1ENR1_2
#undef RCC_PLLCFGR_0_PLL2VCOSEL
#undef RCC_BDCR_1
#undef RCC_APB1LPENR_1_USART4LPEN
#undef RCC_CFGR_4_USBPRE
#undef RCC_CCIPR2_0_PLLSAI2DIVR
#undef RCC_AHB2RSTR_0_OTGFSRST
#undef RCC_APB1SMENR1_0_TIM5SMEN
#undef RCC_MAP0_MC_MLAHBLPENSETR
#undef RCC_CFGR_0_MCO2SEL
#undef RCC_CICR_2
#undef RCC_CR_2_PLLSYSON
#undef RCC_AHB3RSTR_0_OSPI2RST
#undef RCC_APB2ENR_2_DBGMCUEN
#undef RCC_AHB1LPENR_0_DMA2LPEN
#undef RCC_MAP0_MC_AHB3LPENSETR
#undef RCC_APB2ENR_2_SDIOEN
#undef RCC_AHBENR_2
#undef RCC_MAP2_AHB2SMENR
#undef RCC_APB3ENR_DSIEN
#undef RCC_PLLCFGR_0_DIVR2EN
#undef RCC_APB2ENR_1_TIM22EN
#undef RCC_AHB1ENR_0_USB2OTGHSULPIEN
#undef RCC_AHB3ENR_1
#undef RCC_APB2RSTR_1_TIM8RST
#undef RCC_MAP5_C2AHB2SMENR
#undef RCC_APB1ENR_0_SPI2EN
#undef RCC_AHB2ENR_0_ADCEN
#undef RCC_CSR_0_LSI2RDY
#undef RCC_CFGR_0_MCO1PRE
#undef RCC_MAP0_MC_AHB6LPENCLRR
#undef RCC_APB2RSTR_1_TIM10RST
#undef RCC_AHB2LPENR_2
#undef RCC_AHBENR_2_GPIOBEN
#undef RCC_BDCR_0_LSECSSON
#undef RCC_DCKCFGR_1_I2SSRC
#undef RCC_AHB1SMENR_1
#undef RCC_MAP0_MC_AXIMLPENSETR
#undef RCC_APB1ENR1_1_USBDEN
#undef RCC_APB1SMENR2_I2C4SMEN
#undef RCC_MAP0_MP_CIER
#undef RCC_MAP1_APB1HLPENR
#undef RCC_MAP1_D2CCIP2R
#undef RCC_AHB3ENR_0_MDMAEN
#undef RCC_AHB2RSTR_0_GPIODRST
#undef RCC_MAP0_LPTIM45CKSELR
#undef RCC_MAP1_C1_APB4ENR
#undef RCC_MAP0_MP_APB3ENCLRR
#undef RCC_CR_0_HSECSSON
#undef RCC_AHBENR_1_GPIOCEN
#undef RCC_IOPENR_1_GPIOEEN
#undef RCC_MAP0_MC_APB5ENCLRR
#undef RCC_AHBENR_0_FLASHEN
#undef RCC_APB1LRSTR_1
#undef RCC_AHB1RSTR_0_FLASHRST
#undef RCC_CCIPR2_1
#undef RCC_APB1LPENR_0_CAN2LPEN
#undef RCC_CIFR_2_PLLRDYF
#undef RCC_AHB2RSTR_0_GPIOHRST
#undef RCC_MAP5_AHBSMENR
#undef RCC_MAP0_MP_CIFR
#undef RCC_APB1RSTR_0_I2C3RST
#undef RCC_AHB1LPENR_0_ARTLPEN
#undef RCC_PLLSYSCFGR_0_PLLSYSREN
#undef RCC_CFGR_0_SWS
#undef RCC_MAP0_MP_AHB3LPENCLRR
#undef RCC_MAP1_C1_RSR
#undef RCC_MAP1_PLLCFGR
#undef RCC_MAP0_MC_APB1ENCLRR
#undef RCC_APB1RSTR1_0_LCDRST
#undef RCC_CFGR_3_MCO2PRE2
#undef RCC_PLLCFGR_4
#undef RCC_AHBRSTR_0_DMARST
#undef RCC_MAP0_MP_TZAHB6ENCLRR
#undef RCC_AHB1RSTR_0_GPIOKRST
#undef RCC_MAP0_UART78CKSELR
#undef RCC_CCIPR_1_I2S2SEL
#undef RCC_CSR_0_LSI2ON
#undef RCC_AHB2RSTR_2_DCMIRST
#undef RCC_PLLCFGR_2
#undef RCC_CSR_0_RMVF
#undef RCC_CCIPR_1_I2C3SEL1
#undef RCC_AHB2RSTR_0_SDMMC2RST
#undef RCC_PLLCFGR_1_PLLR
#undef RCC_ICSCR_3_MSITRIM
#undef RCC_APB2RSTR_1_SYSCFGRST
#undef RCC_AHB2RSTR_0_SDMMC1RST
#undef RCC_CFGR2_ADC34PRES
#undef RCC_AHB2SMENR_0_AESSMEN
#undef RCC_MAP0_MC_APB2ENCLRR
#undef RCC_APB1ENR1_1_SPI1EN
#undef RCC_AHB3RSTR_2
#undef RCC_AHBENR_2_GPIOFEN
#undef RCC_MAP0_RTCDIVR
#undef RCC_PLLCFGR_1_PLLQ3
#undef RCC_MAP2_APB2RSTR
#undef RCC_AHBENR_2_RNGEN
#undef RCC_PLLCFGR_2_PLLN0
#undef RCC_CFGR_1_STOPWUCK
#undef RCC_APB1ENR_2_CAN3EN
#undef RCC_PLLCFGR_2_PLLN5
#undef RCC_AHB1LPENR_1_USB2OTGHSULPILPEN
#undef RCC_MAP0_MC_MLAHBLPENCLRR
#undef RCC_AHB1RSTR_1_GPIOIRST
#undef RCC_MAP3_CIR
#undef RCC_APB1RSTR1_0_TIM7RST
#undef RCC_CCIPR_0_CLK48SEL
#undef RCC_APB1RSTR_3_LCDRST
#undef RCC_AHB1SMENR_0_DMAMUX1SMEN
#undef RCC_CCIPR2_0
#undef RCC_CFGR_1_HPRE
#undef RCC_APB2ENR_0_TIM8EN
#undef RCC_APB1ENR1_0_SP3EN
#undef RCC_AHB1LPENR_0_SRAM3LPEN
#undef RCC_MAP0_APB2RSTCLRR
#undef RCC_AHB2ENR_0_DCMIEN
#undef RCC_AHBSMENR_0_RNGSMEN
#undef RCC_MAP0_TIMG1PRER
#undef RCC_CIER_0_CSIRDYIE
#undef RCC_APB2RSTR_0_SYSCFGRST
#undef RCC_CFGR_3_PLLNODIV
#undef RCC_APB2RSTR_2
#undef RCC_AHBRSTR_0_GPIODRST
#undef RCC_CFGR_1_SWS
#undef RCC_APB1LPENR_0_TIM14LPEN
#undef RCC_MAP2_C1_APB1LENR
#undef RCC_AHBSMENR_1_CRYPTSMEN
#undef RCC_AHBRSTR_2_RNGRST
#undef RCC_APB2RSTR_1_SAI1RST
#undef RCC_GCR_BOOT_C1
#undef RCC_MAP0_MC_APB2ENSETR
#undef RCC_APB1ENR_1
#undef RCC_AHBENR_0_DMA2EN
#undef RCC_CCIPR_0_I2C2SEL
#undef RCC_APB2ENR_0_HRTIMEN
#undef RCC_MAP1_AHB3RSTR
#undef RCC_MAP2_PLLCFGR
#undef RCC_CCIPR_0_UART4SEL
#undef RCC_APB1SMENR_I2C3SMEN
#undef RCC_MAP2_AHB2RSTR
#undef RCC_MAP0_FDCANCKSELR
#undef RCC_AHB2LPENR_2_FSMCLPEN
#undef RCC_APB1SMENR1_0_LCDSMEN
#undef RCC_APB1ENR_1_CANEN
#undef RCC_DCKCFGR2_1
#undef RCC_AHBENR_0_IOPEEN
#undef RCC_MAP0_MP_MLAHBLPENSETR
#undef RCC_APB1ENR_0_I2C3EN
#undef RCC_APB2LPENR_0_SPI5LPEN
#undef RCC_CICR_0_LSECSSC
#undef RCC_MAP5_C2APB1SMENR1
#undef RCC_PLLSYSCFGR_0_PLLSYSQ
#undef RCC_CFGR_0_MCO1SEL
#undef RCC_MAP2_CCIPR2
#undef RCC_MAP0_AHB5RSTSETR
#undef RCC_APB1ENR_1_TIM3EN
#undef RCC_CFGR_3_PPRE22
#undef RCC_MAP4_AHBRSTR
#undef RCC_AHB2SMENR_2_HASH1SMEN
#undef RCC_APB2LPENR_1_TIM9LPEN
#undef RCC_AHB2RSTR_3
#undef RCC_AHB2SMENR_0_DCMISMEN
#undef RCC_APB1SMENR1_0_PWRSMEN
#undef RCC_APB1LPENR_1_USBLPEN
#undef RCC_APB1ENR1_0_USART3EN
#undef RCC_MAP0_MP_SREQCLRR
#undef RCC_PLLCFGR_0_PLL3VCOSEL
#undef RCC_MAP5_CKGATENR
#undef RCC_MAP0_MP_AHB4ENCLRR
#undef RCC_AHB2RSTR_1_GPIOFRST
#undef RCC_APBENR1_USART3EN
#undef RCC_APB2SMENR_1_HRTIMERSMEN
#undef RCC_APB2ENR_1_DFSDM1EN
#undef RCC_CFGR_2_SWS1
#undef RCC_AHB2LPENR_0_SDMMC2LPEN
#undef RCC_APB2RSTR_1_HRTIM1RST
#undef RCC_AHB2LPENR_0_SRAM2LPEN
#undef RCC_AHB2ENR_0_OSPIMEN
#undef RCC_MAP0_SPI2S23CKSELR
#undef RCC_PLLCFGR_1_PLLP
#undef RCC_CSR_0_IWDGRSTF
#undef RCC_APB1ENR_0_TIM12EN
#undef RCC_APB1LRSTR_0_HDMICECRST
#undef RCC_APB1ENR_2
#undef RCC_CIER_0_PLL1RDYIE
#undef RCC_CFGR_3_PPRE12
#undef RCC_MAP5_BDCR
#undef RCC_APB1RSTR_3_CRCRST
#undef RCC_AHB3LPENR_1_FMCLPEN
#undef RCC_AHB1ENR_1_DMA2DEN
#undef RCC_AHB1ENR_1
#undef RCC_AHB2RSTR_1_GPIOERST
#undef RCC_APB1ENR1_0_UART4EN
#undef RCC_DCKCFGR_1
#undef RCC_AHB1ENR_0_USB1OTGHEN
#undef RCC_APB1RSTR_0_TIM4RST
#undef RCC_ICSCR_1_MSITRIM
#undef RCC_MAP0_APB3DIVR
#undef RCC_MAP4_APB2RSTR
#undef RCC_MAP0_MP_APB1ENCLRR
#undef RCC_AHB1SMENR_0_FMACSMEN
#undef RCC_AHB3LPENR_0_FLITFLPEN
#undef RCC_APB1SMENR1_0_TIM4SMEN
#undef RCC_AHB1ENR_0_GPIODEN
#undef RCC_CSR_0_RFWKPSEL
#undef RCC_MAP0
#undef RCC_CFGR_0_HRTIMSEL
#undef RCC_CICR_1_HSI48RDYC
#undef RCC_AHB2ENR_1_DAC1
#undef RCC_AHB1LPENR_0_GPIOJLPEN
#undef RCC_APB2LPENR_0_DSILPEN
#undef RCC_PLLCFGR_1_PLLPEN
#undef RCC_APB1SMENR1_1_USART1SMEN
#undef RCC_AHB1RSTR_1_GPIOFRST
#undef RCC_APB2ENR_3_DBGEN
#undef RCC_DCKCFGR_0_I2S1SRC
#undef RCC_APB1SMENR1_1_USBFSSMEN
#undef RCC_MAP0_MC_AHB6ENCLRR
#undef RCC_MAP0_MP_AHB4LPENCLRR
#undef RCC_DCKCFGR2_0_UART7SEL
#undef RCC_AHB1RSTR_1_GPIOCRST
#undef RCC_MAP0_PLL2CR
#undef RCC_MAP4_DCKCFGR
#undef RCC_AHB2SMENR_0_CRYPTSMEN
#undef RCC_MAP0_APB4RSTCLRR
#undef RCC_AHB3RSTR_1_PKARST
#undef RCC_AHB2ENR_0_GPIOIEN
#undef RCC_AHB1ENR_0_CRCEN
#undef RCC_AHB1LPENR_0_USB1OTGHSULPILPEN
#undef RCC_TMPL
#undef RCC_APB2ENR_0_DFSDM2EN
#undef RCC_MAP1_D3CFGR
#undef RCC_CFGR3_1
#undef RCC_MAP0_PLL1FRACR
#undef RCC_AHBENR_1_GPIOEEN
#undef RCC_APB1ENR1_0_TIM4EN
#undef RCC_MAP4_AHBLPENR
#undef RCC_APB1RSTR_1_LPTIMER1RST
#undef RCC_APB2LPENR_0_TIM15LPEN
#undef RCC_APB2RSTR_0_SPI5RST
#undef RCC_CR_1_PLLSAI1ON
#undef RCC_APB1ENR_1_LPUART1EN
#undef RCC_CR_3_CSSON
#undef RCC_APB1ENR_0_TIM5EN
#undef RCC_APB2LPENR_0_SAI3LPEN
#undef RCC_AHB3SMENR_0_OCTOSPI2
#undef RCC_MAP5_CR2
#undef RCC_AHBRSTR_0_TSCRST
#undef RCC_APB1LPENR_0_TIM4LPEN
#undef RCC_AHB2SMENR_0_SRAM3SMEN
#undef RCC_PLLSAICFGR_PLLSAIP
#undef RCC_APB2ENR_0_SYSCFGEN
#undef RCC_AHB2RSTR_2
#undef RCC_APB2LPENR_0_USART9LPEN
#undef RCC_APB1LPENR_0_CAN1LPEN
#undef RCC_MAP0_MP_APB1LPENSETR
#undef RCC_MAP0_MC_APB4LPENCLRR
#undef RCC_CICR_0_PLL2RDYC
#undef RCC_APB2ENR_2_DFSDMEN
#undef RCC_PLLCFGR_0_PLL1FRACEN
#undef RCC_APB2RSTR_1_DFSDM1RST
#undef RCC_APB1RSTR_1_DAC2RST
#undef RCC_CR_0_CSIRDY
#undef RCC_MAP1_PLL1DIVR
#undef RCC_PLLCFGR_0_PLL2FRACEN
#undef RCC_CR_0_RTCPRE1
#undef RCC_MAP4_IOPSMENR
#undef RCC_AHB1ENR_0_CCMDATARAMEN
#undef RCC_CSR_1_LSI1ON
#undef RCC_ICSCR_2_HSICAL0
#undef RCC_CFGR_2_RTCPRE2
#undef RCC_CIER_0_LSI2RDYIE
#undef RCC_APB1RSTR1_0_TIM6RST
#undef RCC_MAP5_CFGR3
#undef RCC_AHB1RSTR_0_USB1OTGRST
#undef RCC_AHB3RSTR_1_QSPIRST
#undef RCC_MAP0_PLL4CR
#undef RCC_AHB1ENR_0_GPIOJEN
#undef RCC_MAP0_AHB5RSTCLRR
#undef RCC_CR_1_HSIKERDY
#undef RCC_APB2LPENR_0_USART1LPEN
#undef RCC_APB1SMENR1_0_CAN1SMEN
#undef RCC_CIFR_1_MSIRDYF
#undef RCC_MAP0_IDR
#undef RCC_CSR_2_LSEBYP
#undef RCC_MAP0_MP_AHB3ENSETR
#undef RCC_APB2ENR_2_TIM9EN
#undef RCC_AHB1LPENR_1_DMA2LPEN
#undef RCC_MAP0_APB4RSTSETR
#undef RCC_MAP1_GCR
#undef RCC_APB2LPENR_0_DFSDM2LPEN
#undef RCC_APB1RSTR_2
#undef RCC_MAP0_USBCKSELR
#undef RCC_AHB2LPENR_0_HASHLPEN
#undef RCC_MAP0_MC_APB5LPENCLRR
#undef RCC_CSR_0_LSI2TRIMEN
#undef RCC_CIER_2_PLLRDYIE
#undef RCC_AHB1RSTR_0_GPIOHRST
#undef RCC_MAP0_MC_AHB2ENSETR
#undef RCC_CFGR_2_MCO2PRE
#undef RCC_PLLCFGR_0_DIVQ2EN
#undef RCC_APB2ENR_0_TIM19EN
#undef RCC_MAP0_LPTIM1CKSELR
#undef RCC_CICR_0_HSE_ready_Interrupt_Clear
#undef RCC_APB1RSTR_0_DACRST
#undef RCC_APB1ENR_1_LPTIM1EN
#undef RCC_MAP1_C1_APB3ENR
#undef RCC_MAP0_MSSCKSELR
#undef RCC_PLLCFGR_0_PLL1RGE
#undef RCC_AHB2SMENR_1
#undef RCC_CSR_2_LSEON
#undef RCC_CFGR_3_PLLXTPRE
#undef RCC_AHB1RSTR_0_USB2OTGRST
#undef RCC_AHBENR_0_ADC12EN
#undef RCC_AHB2RSTR_1_HASHRST
#undef RCC_APB2ENR_2_SDAD3EN
#undef RCC_CFGR_3_PPRE2F
#undef RCC_APB3LPENR_DSILPEN
#undef RCC_AHBENR_1_GPIOGEN
#undef RCC_CFGR_2_RTCPRE3
#undef RCC_CFGR_3_MCO20
#undef RCC_AHB2RSTR_1_GPIOGRST
#undef RCC_APB2RSTR_1_SPI4RST
#undef RCC_AHB1ENR_2_BKPSRAMEN
#undef RCC_APBRSTR1_USART3RST
#undef RCC_MAP5_C2APB1ENR1
#undef RCC_CSR_0_LSECSSD
#undef RCC_MAP5_AHBENR
#undef RCC_PLLCFGR_1_PLLQEN
#undef RCC_CIFR_2_CSSLSEF
#undef RCC_AHB3SMENR_0_FMCSMEN
#undef RCC_AHB1ENR_0_GPIOEEN
#undef RCC_PLLSYSCFGR_0_PLLSYSR
#undef RCC_CSR_0_CSSLSEON
#undef RCC_CCIPR2_0_ADFSDMSEL
#undef RCC_CFGR_0_TIMPRE
#undef RCC_AHB2ENR_0_SRAM1EN
#undef RCC_APBENR1_DAC1EN
#undef RCC_MAP5_C2APB1ENR2
#undef RCC_MAP5_APB1RSTR
#undef RCC_APBSMENR1_UCPD1SMEN
#undef RCC_MAP1_APB2RSTR
#undef RCC_APB1LPENR_0_RTCAPBEN
#undef RCC_CFGR3_0_HRTIM1SW
#undef RCC_MAP5_C2APB3ENR
#undef RCC_MAP0_SPDIFCKSELR
#undef RCC_APB1ENR_3_TIM18EN
#undef RCC_AHB1SMENR_1_DMAMUXSMEN
#undef RCC_APB2ENR_2_SDMMC2EN
#undef RCC_CFGR_4_MCOF
#undef RCC_CR_1_HSION
#undef RCC_APB2ENR_2_ADC1EN
#undef RCC_CCIPR_1_LPTIM1SEL1
#undef RCC_APB2ENR_1_SPI4EN
#undef RCC_AHBRSTR_0_IOPDRST
#undef RCC_APB2SMENR_0_LTDCSMEN
#undef RCC_APB3RSTR_RFRST
#undef RCC_MAP0_TIMG2PRER
#undef RCC_MAP1_AHB1LPENR
#undef RCC_APB2RSTR_0_DFSDM2RST
#undef RCC_CIER_1_PLLSAI2RDYIE
#undef RCC_CFGR_2_MCO2EN
#undef RCC_MAP3_AHB2RSTR
#undef RCC_IOPENR_0_IOPEEN
#undef RCC_AHBENR_1_GPIODEN
#undef RCC_MAP0_RNG2CKSELR
#undef RCC_MAP0_MC_AXIMENSETR
#undef RCC_MAP2_AHB3ENR
#undef RCC_DCKCFGR_0_LPTIMER1SEL
#undef RCC_APB2RSTR_0_ADCRST
#undef RCC_APB1RSTR_3_I2C3
#undef RCC_AHB2ENR_0_DAC3
#undef RCC_MAP4_APBRSTR1
#undef RCC_C1_AHB1ENR_0_USB2ULPIEN
#undef RCC_APB1RSTR_0_SPI2RST
#undef RCC_APB1RSTR_1_DAC1RST
#undef RCC_APB1ENR_0_TIM7EN
#undef RCC_MAP0_MP_IWDGFZSETR
#undef RCC_AHB1RSTR_0_GPIODRST
#undef RCC_CICR_0_LSI2RDYC
#undef RCC_AHB3ENR_0_AES2EN
#undef RCC_MAP1_APB1LRSTR
#undef RCC_APB1LPENR_0_TIM5LPEN
#undef RCC_CR_2_PLLSAIRDY
#undef RCC_AHBRSTR_1
#undef RCC_APB3RSTR_LTDCRST
#undef RCC_AHB3RSTR_0_DMA2DRST
#undef RCC_AHB2LPENR_0_CAMITFLPEN
#undef RCC_PLLCFGR_2_PLLM1
#undef RCC_AHB1ENR_2_DMAMUXEN
#undef RCC_AHB2SMENR_0_RNGSMEN
#undef RCC_MAP1_C1_APB4LPENR
#undef RCC_AHB1LPENR_0_USB2OTGHSLPEN
#undef RCC_AHB2ENR_0
#undef RCC_CIFR_1_LSI1RDYF
#undef RCC_MAP2_C1_AHB1LPENR
#undef RCC_APB2ENR_1_SAI1EN
#undef RCC_MAP0_MC_APB4LPENSETR
#undef RCC_MAP0_MP_SREQSETR
#undef RCC_APB2RSTR_2_SDIORST
#undef RCC_APB2RSTR_0_ADC1RST
#undef RCC_CSR_1_LSIIWDGLP
#undef RCC_ICSCR_2_HSI16TRIM
#undef RCC_CICR_2_HSECSSC
#undef RCC_MAP0_SAI1CKSELR
#undef RCC_CIR_0_PLLI2SRDYF
#undef RCC_APB2SMENR_0_SDMMCSMEN
#undef RCC_MAP0_MP_AHB6ENSETR
#undef RCC_CR_0_RC48ON
#undef RCC_D3CFGR_1
#undef RCC_MAP4_CSR
#undef RCC_MAP2_CIFR
#undef RCC_APB1LPENR_0_UART5LPEN
#undef RCC_AHB3SMENR_0
#undef RCC_AHBENR_0_FSMCEN
#undef RCC_MAP0_MC_APB2LPENCLRR
#undef RCC_AHB1ENR_1_TSCEN
#undef RCC_AHB2LPENR_0_RNGLPEN
#undef RCC_MAP2_DCKCFGR1
#undef RCC_CIR_0_PLLSAIRDYIE
#undef RCC_AHB3LPENR_0
#undef RCC_APB2ENR_0_SPI5EN
#undef RCC_APB1ENR_2_USBRST
#undef RCC_PLLCFGR_3_PLLQ
#undef RCC_APB1ENR_0_TIM14EN
#undef RCC_CIFR_2_HSECSSF
#undef RCC_CICR_2_RC48RDYC
#undef RCC_APB1LPENR_0_TIM13LPEN
#undef RCC_AHB2ENR_2
#undef RCC_CR_1_PLLSAI1RDY
#undef RCC_PLLCFGR_1_PLLM2
#undef RCC_APB1SMENR_USART4SMEN
#undef RCC_AHB1ENR_0_GPIOKEN
#undef RCC_MAP0_SPI6CKSELR
#undef RCC_MAP1_C1_AHB3ENR
#undef RCC_CIR_2_LSECSSC
#undef RCC_CR_2_CSSLSEON
#undef RCC_PLLI2SCFGR_0_PLLI2SP
#undef RCC_MAP3_APB2RSTR
#undef RCC_DCKCFGR2_1_SDIOSEL
#undef RCC_PLLCFGR_0_DIVP2EN
#undef RCC_AHB1RSTR_1
#undef RCC_PLLCFGR_2_PLLQ
#undef RCC_APB2LPENR_0_DFSDM1LPEN
#undef RCC_APB1ENR_1_CEC
#undef RCC_APB1RSTR_2_TIM18RST
#undef RCC_MAP1_PLL2FRACR
#undef RCC_APB1RSTR_2_LPUART1RST
#undef RCC_CCIPR_0_UART5SEL
#undef RCC_CR_3_HSI16OUTEN
#undef RCC_AHBRSTR_0_FLITFRST
#undef RCC_CCIPR_1_TIM1SEL
#undef RCC_CIER_3
#undef RCC_CIER_0_LSECSSIE
#undef RCC_DCKCFGR_0_PLLSAIDIVQ
#undef RCC_MAP4_BDCR
#undef RCC_APB2ENR_1_HRTIM1EN
#undef RCC_PLLCFGR_2_PLLN3
#undef RCC_APB1LPENR_0_TIM6LPEN
#undef RCC_DCKCFGR2_2_CKSDIOSEL
#undef RCC_APB1RSTR1_0_TIM4RST
#undef RCC_PLLCFGR_4_PLLP
#undef RCC_AHB1ENR_1_DMA1EN
#undef RCC_APB1RSTR1_1_USBFSRST
#undef RCC_DCKCFGR2_0_UART6SEL
#undef RCC_APB1ENR_2_DAC3EN
#undef RCC_CIFR_0_HSECSSF
#undef RCC_CR_1_HSIRDY
#undef RCC_AHB1LPENR_0_CRCLPEN
#undef RCC_APB1RSTR_1_USART3RST
#undef RCC_APB1ENR_1_I2CFMP1EN
#undef RCC_APB2RSTR_1_TM11RST
#undef RCC_APB2RSTR_0_SDMMC1RST
#undef RCC_CSR_1
#undef RCC_AHB2ENR_2_DCMIEN
#undef RCC_MAP0_MP_APB2LPENSETR
#undef RCC_CIER_1
#undef RCC_AHB1LPENR_0_ETH1TXLPEN
#undef RCC_MAP2_APB2SMENR
#undef RCC_PLLCFGR_2_PLLM4
#undef RCC_AHB2RSTR_0_CAMITFRST
#undef RCC_AHB2SMENR_0_GPIOFSMEN
#undef RCC_AHB2RSTR_1_GPIOARST
#undef RCC_APB2RSTR_0_TM10RST
#undef RCC_PLLSAI1CFGR_1
#undef RCC_AHB2SMENR_0_SDMMC1SMEN
#undef RCC_CIER_0_LSIRDYIE
#undef RCC_CFGR_4
#undef RCC_MAP0_OCENCLRR
#undef RCC_MAP0_RDLSICR
#undef RCC_AHB2RSTR_0_HASHRST
#undef RCC_APB1ENR_0_CAN2EN
#undef RCC_MAP0_MC_APB3ENCLRR
#undef RCC_MAP1_C1_APB2LPENR
#undef RCC_PLLCFGR_1_PLLQ
#undef RCC_MAP0_MC_APB5LPENSETR
#undef RCC_MAP3_AHB3LPENR
#undef RCC_AHB2LPENR_0_CRYPTLPEN
#undef RCC_MAP4_APBRSTR2
#undef RCC_PLLSAI2CFGR_PLLSAI2PDIV
#undef RCC_MAP0_MCO1CFGR
#undef RCC_DCKCFGR2_0_UART1SEL
#undef RCC_MAP1_APB3LPENR
#undef RCC_CFGR_4_MCO1PRE0
#undef RCC_APBRSTR1_UCPD2RST
#undef RCC_MAP0_MP_AHB5ENCLRR
#undef RCC_APB1LPENR_1
#undef RCC_MAP0_UART1CKSELR
#undef RCC_MAP0_MP_AXIMLPENSETR
#undef RCC_AHB2ENR_1_ADC345EN
#undef RCC_MAP1_AHB1RSTR
#undef RCC_MAP0_ADCCKSELR
#undef RCC_AHB3SMENR_1
#undef RCC_CKGATENR_EVTCL_CKEN
#undef RCC_DCKCFGR2_1_SPDIFSEL
#undef RCC_APB2RSTR_1_TM12RST
#undef RCC_MAP0_MP_APB3LPENCLRR
#undef RCC_CICR_2_CSSLSEC
#undef RCC_MAP5_C2APB3SMENR
#undef RCC_APB2RSTR_2_SDAD3RST
#undef RCC_APB1RSTR_2_LPUART12RST
#undef RCC_CICR_3
#undef RCC_CFGR_3
#undef RCC_CFGR_4_MCO1PRE2
#undef RCC_APB2ENR_1_TIM1EN
#undef RCC_MAP0_PLL4CFGR1
#undef RCC_CCIPR_0_SAI2SEL
#undef RCC_AHB1LPENR_0_DMA1LPEN
#undef RCC_BDCR_0_VSWRST
#undef RCC_APB1SMENR2_LPTIM2SMEN
#undef RCC_CICR_2_PLLRDYC
#undef RCC_CR_2_PLLSAION
#undef RCC_PLLSAI2CFGR_PLLSAI2M
#undef RCC_PLLI2SCFGR_0
#undef RCC_AHB2ENR_0_OTGFSEN
#undef RCC_CFGR_2_HPRE3
#undef RCC_MAP0_APB1RSTCLRR
#undef RCC_AHB3ENR_2
#undef RCC_AHB3RSTR_0_SDMMC1RST
#undef RCC_CSR_3
#undef RCC_CR_3
#undef RCC_MAP0_PLL2CFGR2
#undef RCC_MAP0_MP_APB5LPENSETR
#undef RCC_APB1ENR2_LPTIM2EN
#undef RCC_AHBRSTR_0_GPIOGRST
#undef RCC_CSR_0_RTCEN
#undef RCC_CFGR3_0_USBSW
#undef RCC_AHBRSTR_0_IOPERST
#undef RCC_MAP0_MP_AXIMLPENCLRR
#undef RCC_APB1RSTR_0_I2C4RST
#undef RCC_DCKCFGR2_0_I2C2SEL
#undef RCC_MAP3_PLLCFGR
#undef RCC_AHB3ENR_0_FLASHEN
#undef RCC_APB1SMENR1_1_FDCANSMEN
#undef RCC_APB1ENR_1_USBEN
#undef RCC_APB1SMENR1_0_UART4SMEN
#undef RCC_AHB1RSTR_0_ARTRST
#undef RCC_AHB1ENR_1_USB2OTGEN
#undef RCC_MAP3
#undef RCC_MAP5_SMPSCR
#undef RCC_CIER_0_HSI48RDYIE
#undef RCC_CFGR3_0_I2C3SW
#undef RCC_CR_2_PLLSYSRDY
#undef RCC_AHBENR_1_DMA2EN
#undef RCC_AHB1ENR_0_ADC12EN
#undef RCC_CFGR_1_MCOPRE
#undef RCC_AHB1ENR_0_USB2ULPIEN
#undef RCC_CFGR_0_RTCPRE
#undef RCC_CCIPR_0_USART3SEL
#undef RCC_MAP0_MC_AHB6LPENSETR
#undef RCC_AHB1LPENR_0_OTGHSLPEN
#undef RCC_C1_AHB1ENR_1
#undef RCC_MAP0_MC_APB2LPENSETR
#undef RCC_CR_3_MSION
#undef RCC_ICSCR_2_MSIRANGE
#undef RCC_MAP4
#undef RCC_MAP0_TZAHB6RSTCLRR
#undef RCC_AHBRSTR_0_IOPCRST
#undef RCC_CIER_0_HSERDYIE
#undef RCC_AHB1LPENR_0_GPIOKLPEN
#undef RCC_MAP0_SDMMC3CKSELR
#undef RCC_AHB1SMENR_1_CRCSMEN
#undef RCC_MAP0_MC_AHB2ENCLRR
#undef RCC_APB1RSTR_1_LPTIM1RST
#undef RCC_APB1LPENR_0_UART4LPEN
#undef RCC_AHB1LPENR_1_USB1ULPILPEN
#undef RCC_CCIPR2_0_SDMMCSEL
#undef RCC_MAP0_PLL4FRACR
#undef RCC_APB2ENR_0_FWEN
#undef RCC_DCKCFGR_0_SAI1ASRC
#undef RCC_APB1RSTR_0_CAN2RST
#undef RCC_CFGR_3_MCO2PRE1
#undef RCC_AHBENR_1_GPIOBEN
#undef RCC_MAP3_PLLSAICFGR
#undef RCC_APB2ENR_0_SAI3EN
#undef RCC_CICR_0_RC48RDYC
#undef RCC_APB2RSTR_3_DBGRST
#undef RCC_PLLSAI2CFGR_PLLSAI2Q
#undef RCC_MAP0_MP_APRSTSR
#undef RCC_CIER_1_MSIRDYIE
#undef RCC_MAP1_C1_APB1LENR
#undef RCC_CSR_0_LSI2TRIMOK
#undef RCC_APB2RSTR_1
#undef RCC_MAP3_DKCFGR1
#undef RCC_CIFR_0_RC48RDYF
#undef RCC_CSR_0_RFRSTS
#undef RCC_MAP0_MC_MLAHBENSETR
#undef RCC_APB1ENR1_0_UART5EN
#undef RCC_APB1ENR1_0_CRSEN
#undef RCC_MAP5_APBSMENR1
#undef RCC_MAP0_PLL1CR
#undef RCC_APB2ENR_0_USBPHYCEN
#undef RCC_MAP0_OCRDYR
#undef RCC_MAP3_APB2LPENR
#undef RCC_APB1LPENR_0_TIM3LPEN
#undef RCC_DCKCFGR2_2_I2C4SEL
#undef RCC_CIFR_2_HSI16RDYF
#undef RCC_APB1ENR_4
#undef RCC_APB1ENR1_1_CRSEN
#undef RCC_ICSCR_4
#undef RCC_APB1ENR1_1_I2C3
#undef RCC_APB2RSTR_1_SART10RST
#undef RCC_CFGR3_0_TIM1SW
#undef RCC_D3AMR_0_BKPSRAMAMEN
#undef RCC_MAP1_APB2LPENR
#undef RCC_MAP5_CCIPR
#undef RCC_PLLCFGR_2_PLLM0
#undef RCC_CICR_1_MSIRDYC
#undef RCC_AHBRSTR_3
#undef RCC_MAP0_MPCKSELR
#undef RCC_CFGR3_0_USART3SW
#undef RCC_PLLCFGR_3_PLLN
#undef RCC_PLLCFGR_0_PLLPDIV
#undef RCC_APB2RSTR_0_SPI6RST
#undef RCC_CR_2_HSIRDY
#undef RCC_APB1SMENR1_2
#undef RCC_DCKCFGR2_0_UART4SEL
#undef RCC_APB2ENR_0_SPI6ENR
#undef RCC_APB1ENR_0_DACEN
#undef RCC_APB1ENR_1_USART4EN
#undef RCC_APB1RSTR2_USBPDRST
#undef RCC_CFGR_1_SW
#undef RCC_APB1ENR_0_USART3EN
#undef RCC_CFGR3_0_TIM8SW
#undef RCC_MAP0_MC_AHB5ENCLRR
#undef RCC_MAP1_C1_APB1LLPENR
#undef RCC_APBSMENR1_UCPD2SMEN
#undef RCC_CICR_0_LSIRDYC
#undef RCC_MAP1_APB1HENR
#undef RCC_CFGR_2_HPRE1
#undef RCC_BDCR_1_LSCOSEL
#undef RCC_MAP0_MP_AHB2ENCLRR
#undef RCC_AHB2ENR_0_GPIODEN
#undef RCC_APBRSTR1_DAC1RST
#undef RCC_MAP0_APB5RSTCLRR
#undef RCC_DCKCFGR_1_I2S2SRC
#undef RCC_AHBRSTR_0_GPIOFRST
#undef RCC_AHB1RSTR_0_GPIOJRST
#undef RCC_AHB3ENR_0
#undef RCC_AHBENR_0_IOPBEN
#undef RCC_CIR_0_PLLSAIRDYC
#undef RCC_IOPRSTR_IOPERST
#undef RCC_MAP0_MCUDIVR
#undef RCC_AHB1LPENR_1_USB1OTGLPEN
#undef RCC_PLLCFGR_1_PLLQ2
#undef RCC_AHB2ENR_1_CRYPTEN
#undef RCC_MAP0_PLL3CR
#undef RCC_APB1RSTR1_0_UART4RST
#undef RCC_CFGR_3_PPRE11
#undef RCC_APB1LPENR_0_SPI3LPEN
#undef RCC_AHB1LPENR_1_USB2OTGLPEN
#undef RCC_DCKCFGR_0_PLLIS2DIVQ
#undef RCC_APBRSTR1_USART4RST
#undef RCC_MAP0_MP_AHB3ENCLRR
#undef RCC_AHBENR_3
#undef RCC_CSR_1_LSI1RDY
#undef RCC_MAP0_MP_APRSTCR
#undef RCC_CIFR_0_PLL2RDYF
#undef RCC_CFGR_0_STOPWUCK
#undef RCC_MAP0_APB2RSTSETR
#undef RCC_C1_AHB1ENR_0_USB1OTGHSEN
#undef RCC_MAP5_C2AHB1SMENR
#undef RCC_CCIPR_0_DFSDMSEL
#undef RCC_AHB2RSTR_0_GPIOBRST
#undef RCC_BDCR_2_BDRST
#undef RCC_BDCR_1_LSCCOEN
#undef RCC_CFGR_3_PLLSRC
#undef RCC_APB1SMENR1_0_TIM3SMEN
#undef RCC_APB1ENR_1_DAC2EN
#undef RCC_CFGR_5
#undef RCC_APB2ENR_1_HRTIMEREN
#undef RCC_MAP3_APB1LPENR
#undef RCC_MAP0_AHB2RSTSETR
#undef RCC_CIER_2_CSSLSE
#undef RCC_CIR_2
#undef RCC_AHBENR_0_IOPDEN
#undef RCC_MAP0_APB5DIVR
#undef RCC_CFGR_3_PPRE20
#undef RCC_APB2RSTR_2_DBGMCURST
#undef RCC_AHB2ENR_0_CRYPTEN
#undef RCC_AHBENR_1_DMA1EN
#undef RCC_CIFR_0_CSIRDY
#undef RCC_CCIPR_0_SAI1SEL
#undef RCC_AHB1ENR_1_DTCMRAMEN
#undef RCC_AHB1ENR_2
#undef RCC_CFGR_0_RTCPRE1
#undef RCC_MAP1_APB1LENR
#undef RCC_ICSCR_2_HSICAL
#undef RCC_AHB1ENR_1_ETHMACPTPEN
#undef RCC_CFGR_5_PPRE
#undef RCC_MAP0_MC_APB1ENSETR
#undef RCC_MAP0_MP_AHB5LPENCLRR
#undef RCC_MAP0_MC_AHB5LPENSETR
#undef RCC_AHB2RSTR_0_CRYPTRST
#undef RCC_IOPENR_0_IOPFEN
#undef RCC_AHB3ENR_0_FMCEN
#undef RCC_AHB1LPENR_0_GPIOCLPEN
#undef RCC_DCKCFGR_0_CKDFSDM1ASEL
#undef RCC_APB1ENR_3_COMPEN
#undef RCC_MAP0_APB1DIVR
#undef RCC_APB1LPENR_0_DACLPEN
#undef RCC_APB2SMENR_1_DFSDMSMEN
#undef RCC_MAP1_PLL1FRACR
#undef RCC_CICR_1
#undef RCC_PLLCFGR_1_PLLSRC
#undef RCC_AHBRSTR_1_GPIOARST
#undef RCC_AHB3RSTR_0_JPGDECRST
#undef RCC_MAP0_MP_APB4ENSETR
#undef RCC_CR_1_PLLSAI2RDY
#undef RCC_AHB1ENR_0_ETH1MACEN
#undef RCC_CR_0_PLL3RDY
#undef RCC_MAP3_AHB1RSTR
#undef RCC_APB2SMENR_0_TIM16SMEN
#undef RCC_CSR_0_LPWRSTF
#undef RCC_MAP0_MC_AHB4ENSETR
#undef RCC_APB2ENR_0_ADC3EN
#undef RCC_CCIPR2_0_OSPISEL
#undef RCC_APB1RSTR_0_TIM6RST
#undef RCC_MAP0_MC_CIER
#undef RCC_PLLCFGR_3_PLLP
#undef RCC_AHB1RSTR_0_DMA1RST
#undef RCC_APB1RSTR_1_USART5RST
#undef RCC_CIFR_0_LSI2RDYF
#undef RCC_CCIPR2_1_I2C4SEL_1
#undef RCC_PLLCFGR_1_PLLM3
#undef RCC_AHBRSTR_0_IOPGRST
#undef RCC_AHB3RSTR_0_FMCRST
#undef RCC_MAP1_APB1HRSTR
#undef RCC_MAP0_I2C12CKSELR
#undef RCC_AHB3LPENR_1
#undef RCC_APB2LPENR_1_EXTITLPEN
#undef RCC_AHBENR_1_FLITFEN
#undef RCC_APB1ENR_0_SPI3EN
#undef RCC_BDCR_0_LSECSSD
#undef RCC_MAP5_C2APB2SMENR
#undef RCC_HSICFGR_1
#undef RCC_MAP1_D1CCIPR
#undef RCC_MAP0_MC_APB1LPENCLRR
#undef RCC_CR_0_HSIDIV
#undef RCC_APB2ENR_1_TIM8EN
#undef RCC_APB1SMENR1_0_CAN2SMEN
#undef RCC_ICSCR_1_MSICAL
#undef RCC_APB1LLPENR_WWDG2LPEN
#undef RCC_APB2SMENR_0_ADCSMEN
#undef RCC_CFGR_5_PLLSRC
#undef RCC_APB1ENR1_0_PWREN
#undef RCC_D1CCIPR_DSISEL
#undef RCC_CSR_0_LSIRDY
#undef RCC_MAP0_MC_MLAHBENCLRR
#undef RCC_AHB1RSTR_1_GPIOBRST
#undef RCC_AHB2ENR_3
#undef RCC_CCIPR2_0_SAI2SEL
#undef RCC_MAP0_PLL1CFGR1
#undef RCC_ICSCR_3_MSICAL
#undef RCC_CSR_1_LPWRRSTF
#undef RCC_CFGR_2_SW0
#undef RCC_CR_3_HSI16KERON
#undef RCC_APB1RSTR1_0_DAC1RST
#undef RCC_AHBENR_0_GPIOGEN
#undef RCC_APB2LPENR_0_TIM1LPEN
#undef RCC_PLLSYSCFGR_0_PLLSYSQEN
#undef RCC_MAP0_PLL1CSGR
#undef RCC_AHB1RSTR_1_CORDICRST
#undef RCC_AHB2RSTR_1_OTGFSRST
#undef RCC_MAP1_AHB2RSTR
#undef RCC_APB1RSTR_0_WWDGRST
#undef RCC_APB1RSTR_1_USART2RST
#undef RCC_APB1RSTR_1_CAN3RST
#undef RCC_AHBRSTR_0_FSMCRST
#undef RCC_AHBENR_0_IOPFEN
#undef RCC_APB1ENR1_0_USART2EN
#undef RCC_AHB1ENR_0_GPIOHEN
#undef RCC_AHB2SMENR_0_ADCFSSMEN
#undef RCC_AHB3ENR_0_SDMMC1EN
#undef RCC_CR_2_HSI16RDYF
#undef RCC_APB2LPENR_1_USART10LPEN
#undef RCC_AHBRSTR_0_AESRST
#undef RCC_MAP5_CSR
#undef RCC_CICR_0_PLL1RDYC
#undef RCC_APB1ENR_0_CECEN
#undef RCC_AHBENR_0_FLITFEN
#undef RCC_APB2RSTR_1_SDAD2RST
#undef RCC_PLLCFGR_3
#undef RCC_APB2RSTR_1_TIM11RST
#undef RCC_PLLCFGR_1
#undef RCC_MAP3_AHB2ENR
#undef RCC_CCIPR2_1_I2C4SEL_0
#undef RCC_MAP0_AHB6RSTCLRR
#undef RCC_MAP4_APB1RSTR
#undef RCC_AHB1RSTR_0_GFXMMURST
#undef RCC_MAP1_PLLCKSELR
#undef RCC_CFGR3_0_UART5SW
#undef RCC_MAP0_TZAHB6RSTSETR
#undef RCC_CFGR_4_PPRE
#undef RCC_BDCR_0_LSEMOD
#undef RCC_AHBLPENR_0_GPIOELPEN
#undef RCC_APB2LPENR_1_TIM11LPEN
#undef RCC_MAP0_MP_TZAHB6LPENSETR
#undef RCC_APB1SMENR_TIM7SMEN
#undef RCC_CIFR_1_PLLSAI1RDYF
#undef RCC_MAP3_PLLI2SCFGR
#undef RCC_AHB1ENR_1_USB1OTGEN
#undef RCC_AHBRSTR_0_IOPARST
#undef RCC_AHB3RSTR_0_RNGRST
#undef RCC_AHB1LPENR_2
#undef RCC_CFGR3_1_ADCSW
#undef RCC_AHB2RSTR_0_GPIOCRST
#undef RCC_BDCR_0_RTCCKEN
#undef RCC_MAP0_ASSCKSELR
#undef RCC_CIER_0_RC48RDYIE
#undef RCC_CFGR_1
#undef RCC_MAP0_RCK3SELR
#undef RCC_MAP0_I2C35CKSELR
#undef RCC_C1_AHB1ENR_0_USB1OTGHSULPIEN
#undef RCC_AHB2ENR_2_AES1EN
#undef RCC_AHB1LPENR_1
#undef RCC_APB2ENR_0_TIM10EN
#undef RCC_CR_2_PLLI2SRDY
#undef RCC_CSR_1_BORRSTF
#undef RCC_ICSCR_1_HSICAL
#undef RCC_APB1RSTR1_0_TIM3RST
#undef RCC_AHB3SMENR_0_QUADSPI1SMEN
#undef RCC_MAP0_MC_APB3LPENSETR
#undef RCC_AHB3SMENR_0_PKASMEN
#undef RCC_AHB1RSTR_1_DMA2RST
#undef RCC_APB1LPENR_0_TIM2LPEN
#undef RCC_MAP0_MC_CIFR
#undef RCC_AHB2ENR_1_ADC12EN
#undef RCC_AHBENR_0_CRCEN
#undef RCC_AHB2RSTR_0_AESRST
#undef RCC_APB1RSTR1_0_I2C2RST
#undef RCC_CR_1_MSIRDY
#undef RCC_APB1RSTR_0_TIM14RST
#undef RCC_APB1RSTR_0_UART3RST
#undef RCC_AHB1LPENR_0_GPIOILPEN
#undef RCC_MAP2_CSR
#undef RCC_MAP0_MP_MLAHBENCLRR
#undef RCC_MAP5_C2AHB3ENR
#undef RCC_AHBRSTR_1_MIFRST
#undef RCC_AHBENR_1_GPIOFEN
#undef RCC_APB1RSTR1_0_PWRRST
#undef RCC_APB1LENR_0_HDMICECEN
#undef RCC_CR_1_PLLRDY
#undef RCC_MAP1_C1_APB3LPENR
#undef RCC_APB1RSTR2_SWPMI1RST
#undef RCC_APB2ENR_0_DFSDM1EN
#undef RCC_APB1RSTR_0_CAN1RST
#undef RCC_AHBENR_1_CRCEN
#undef RCC_C1_AHB1ENR_0_ARTEN
#undef RCC_APB1RSTR_3
#undef RCC_APB1ENR1_0_CAN2EN
#undef RCC_AHB2ENR_1_GPIOFEN
#undef RCC_APB2SMENR_0_TIM17SMEN
#undef RCC_APB1ENR_0_TIM13EN
#undef RCC_MAP0_DDRITFCR
#undef RCC_AHB2SMENR_0_GPIOISMEN
#undef RCC_AHBENR_1_CRYPEN
#undef RCC_APB2RSTR_0_USART9RST
#undef RCC_MAP0_MC_AHB3ENCLRR
#undef RCC_APBENR1_USART4EN
#undef RCC_AHBENR_2_GPIOAEN
#undef RCC_CIER_0_PLL2RDYIE
#undef RCC_AHB1LPENR_0_USB1OTGHSLPEN
#undef RCC_DCKCFGR2_1_I2CFMP1SEL
#undef RCC_MAP0_APB5RSTSETR
#undef RCC_APB1RSTR1_0_I2C3RST
#undef RCC_PLLCFGR_3_PLLR2
#undef RCC_APBRSTR1_TIM6RST
#undef RCC_APB1RSTR_0_UART7RST
#undef RCC_MAP0_APB3RSTCLRR
#undef RCC_MAP1_APB4ENR
#undef RCC_CCIPR_1_LPUART1SEL1
#undef RCC_APBSMENR1_TIM6SMEN
#undef RCC_AHB1RSTR_0_DMAMUX1RST
#undef RCC_APB2LPENR_0_SPI6LPEN
#undef RCC_MAP1_C1_AHB1LPENR
#undef RCC_AHB1RSTR_0_GPIOERST
#undef RCC_CIER_2_HSI48RDYIE


#endif //__SOOL_CORE_RCC_H